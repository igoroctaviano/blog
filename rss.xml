<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Blog]]></title><description><![CDATA[Blog.]]></description><link>https:igoroctaviano.com/blog</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 27 Jan 2023 17:49:55 GMT</lastBuildDate><item><title><![CDATA[Fundamentos em Java]]></title><description><![CDATA[O que é Java? A primeira coisa que precisamos entender é exatamente o que é Java.
Quando alguém fala Java, do que eles estão falando? Bom…]]></description><link>https:igoroctaviano.com/blog/fundamentos-em-java/</link><guid isPermaLink="false">https:igoroctaviano.com/blog/fundamentos-em-java/</guid><pubDate>Thu, 20 Apr 2017 00:11:00 GMT</pubDate><content:encoded>&lt;h2&gt;O que é Java?&lt;/h2&gt;
&lt;p&gt;A primeira coisa que precisamos entender é exatamente o que é Java.
Quando alguém fala Java, do que eles estão falando?&lt;/p&gt;
&lt;p&gt;Bom, Java é uma Linguagem de Programação.. mas também, Java é um Ambiente de Execução.
No lado da linguagem de programação temos coisas como sintaxe, tipos de dados,
controle de fluxo (como loops e condições), orientação a objetos (herança e tal).
Já do lado do ambiente de execução, temos coisas como configuração, segurança,
threading, input/output, coisas assim. Então quando alguém diz Java, eles podem
estar se referindo a linguagem de programação ou o ambiente de execução ou os dois.&lt;/p&gt;
&lt;p&gt;Geralmente, quando alguem fala de Java no contexto de ambiente de execução, eles
estão se referindo ao Java SE ou Java Standard Edition (ambiente básico de Java),
mas existem outros ambientes que se derivaram deste, como o Java EE (Java Enterprise Edition),
Java ME (Java Micro Edition) e o &lt;a href=&quot;https://docs.oracle.com/javaf&quot;&gt;JavaFX&lt;/a&gt;{:target=”&lt;em&gt;blank”}, todos eles sendo super conjuntos ou sub conjuntos
da versão standard (padrão). Java é tão flexível que existem ambientes de execução
que não são amarrados ao Java produzido pela &lt;a href=&quot;https://www.oracle.com/br/&quot;&gt;Oracle&lt;/a&gt;{:target=”&lt;/em&gt;blank”},
o exemplo mais conhecido é o &lt;a href=&quot;https://www.google.com.br/url?sa=t&amp;#x26;rct=j&amp;#x26;q=&amp;#x26;esrc=s&amp;#x26;source=web&amp;#x26;cd=1&amp;#x26;cad=rja&amp;#x26;uact=8&amp;#x26;ved=0ahUKEwjpr9v4yb3TAhUGkJAKHR0iAFgQFgglMAA&amp;#x26;url=https%3A%2F%2Fwww.android.com%2Fintl%2Fpt-BR_br%2F&amp;#x26;usg=AFQjCNGLx65qg4JE5zi0juTlAnyY5oTvpQ&amp;#x26;sig2=Kj9oy8F4Bs8x4LgI4UoCYg&quot;&gt;Android&lt;/a&gt;{:target=“_blank”},
o Android produz produz um ambiente de execução bem diferente que a versão Standard da Oracle.
A coisa é que todos esses ambientes suportam efetivamente a mesma linguagem de programação, &lt;strong&gt;Java!&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;JRE vs JDK&lt;/h2&gt;
&lt;p&gt;JRE e JDK são dois termos que as pessoas se referem com frequência no mundo Java; esses termos
são duas partes que precisamos para rodar e criar aplicações Java. JRE (Java Runtime Environment)
é o ambiente de execução Java enquanto JDK (Java Development Kit) é o kit de desenvolvimento Java.&lt;/p&gt;
&lt;!-- Adicionar imagem --&gt;
&lt;p&gt;&lt;strong&gt;Java Runtime Environment (JRE)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Necessário para executar aplicações Java&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Usuários finais normalmente só precisam do JRE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Java Development Kit (JDK)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Disponibiliza as ferramentas que precisamos para criar aplicativos Java&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; Geralmente desenvolvedores instalam a JDK em suas máquinas&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; checked disabled&gt; A instalação da JDK já incluí a JRE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;De acordo com a documentação Java versão 8 SE, a JDK 8 é um superset (super conjunto) da JRE 8, a JDK contém tudo que existe dentro da JRE 8 mais compiladores e debuggers (debugadores existe no PT-BR? =D) necessarios para desenvolver applets e aplicações! Opera, perai, o que são Applets? Apples são pequenos programas que são feitos para serem embutidos ou embarcados dentro de aplicações. Em Java, a classe Applet deve ser uma superclasse de qualquer applet que deve ser embarcada em uma página web ou vista por um Java Applet Viewer (é um programa autônomo de linha de comando feito pela Sun para rodar os Java Applets, o Applet Viewer é geralmente usado por desenvolvedores para testar suas applets antes de realizarem o deploy delas para um website). A classe Applet fornece uma interface padrão entre os applets e seu ambiente.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/&quot;&gt;Aqui&lt;/a&gt;{:target=“_blank”} voce vai encontrar o diagrama conceitual de tudo isso e muito mais (todos os componentes menores que pertencem a JDK e a JRE). &lt;/p&gt;
&lt;h2&gt;Criando e Executando aplicações Java&lt;/h2&gt;
&lt;p&gt;Então como tudo isso funciona? Se nós sentarmos e digitarmos um arquivo fonte de Java
com o código de um programa que fizemos e queremos executar esse arquivo fonte em algum
ambiente hospedeiro (pode ser o browser, windows, linux, android ou mac), como podemos fazer isso?
Como podemos, partindo daquele código fonte que digitamos, chegar em algo que pode ser
executado em outro computador? Isso é onde o Kit de Desenvolvimento Java (JDK) vem para nos
ajudar. Usando a JDK, nós inferimos o código e então, a JDK vai produzir nossa aplicação Java.&lt;/p&gt;
&lt;!-- Adicionar imagem --&gt;
&lt;p&gt;Mas Java não é uma linguagem de baixo nível igual C. Na linguagem C, quando compilamos algum programa,
é produzido uma aplicação que pode ser executada diretamente no computador hospedeiro, diferentemente
de Java, onde é utilizada uma abstração chamada &lt;em&gt;bytecode&lt;/em&gt; que é independente de plataforma. Isso
nos permite a não ficar tão amarrado a um ambiente hospedeiro específico e sim disponível para
executar em ambientes diferentes, e é ai que entra o Ambiente de Execução Java (JRE), nos fornecendo
o que precisamos para executar em qualquer ambiente hospedeiro (por isso que usuários finais instalam
o JRE, porque eles apenas precisam executar aquela aplicação enquanto os desenvolvedores precisam da JDK
para produzir aquela aplicação).&lt;/p&gt;
&lt;h2&gt;Pacotes&lt;/h2&gt;
&lt;p&gt;Pacotes é um conceito bem importante em Java, vamos cobrir algumas coisas básicas porém importântes sobre pacotes.&lt;/p&gt;
&lt;p&gt;Se você observar alguns códigos Java por ai, vai ver que no topo do arquivo do código fonte, tem a palavra &lt;em&gt;package&lt;/em&gt;
declarada com algum nome em seguida. E o que isso faz, quando adicionamos o conceito de pacotes?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fundamentosemjava&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exemplo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Strings&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Isso nos provê de organização dentro de uma aplicação Java. Existem muitos aspectos em torno desse conceito
mais vamos cobrir só o basico para entendermos melhor. Uma coisa é que esses pacotes seguem uma convenção
em sua nomenclatura e de fato afeta nossa estrutura de código fonte.&lt;/p&gt;
&lt;p&gt;Em torno da convenção de como um pacote deve ser nomeado, uma regra simples é tudo minusculo, com nome de
domínio reverso para assegurar unicidade global. Exemplo: tenho um domínio &lt;a href=&quot;https://igoroctaviano.com.br&quot;&gt;https://igoroctaviano.com.br&lt;/a&gt;,
meu nome de pacote junto a declaração será &lt;strong&gt;br.com.igoroctaviano&lt;/strong&gt;, isso é apenas uma convenção pra não acontecer colisão de nomes. E ainda mais, nessa regra simples, vamos adicionar ainda mais qualificadores para garantir que o nome do pacote
será único dentro de um grupo ou organização. COmo por exemplo: dentro da minha empresa posso ter um projeto
chamado blog então a declaração junto ao nome do meu pacote vai ficar &lt;strong&gt;package br.com.igoroctaviano.blog;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Essa é a convenção mais simples que tem, mas se você tem uma organização grande, provavelmente isso não será suficiente.
No caso de vários grupos de desenvolvedores, você pode adicionar a categoria dentro do nome do pacote: &lt;strong&gt;package br.com.igoroctavaiano.contabilidade;&lt;/strong&gt; para todos os desenvolvedores do grupo de contabilidade. Neste caso, podemos
criar projetos com o mesmo nome, não vai causar colisões devido ao grupo especificado, garantindo unicidade. São
apenas convenções, nada está forçando ninguem a fazer nada aqui.&lt;/p&gt;
&lt;h3&gt;Membros se tornam parte do pacote&lt;/h3&gt;
&lt;p&gt;Neste caso, temos uma classe chamada Main, mas uma vez que colocamos essa classe dentro de um pacote,
a classe já não é mais conhecida como Main, mas sim, como &lt;strong&gt;com.fundamentosemjava.Main&lt;/strong&gt;. Agora ela
tem um nome único, devido as nossas convenções.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fundamentosemjava&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Strings&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Nomes de pacotes e estrutura dos arquivos fonte&lt;/h3&gt;
&lt;p&gt;Nomes de pacotes afetam a estrutura dos arquivos fonte. O que é interessante, Java por sí, não exige
correlação entre nome de pacotes e a estrutura de código fonte, Java não quer saber como você nomeou seus pacotes.
Porém! a maioria dos Ambientes Integrados de Desenvolvimento Java (IDEs) exigem uma sub pasta para cada parte
do nome do pacote. A maoria das ferramentas que você vai utilizar para programar Java vai te exigir isso.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fundamentosemjava&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Vai mapear para a seguinte estrutura de arquivos fonte:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;src&lt;/strong&gt;
|—&lt;strong&gt;com&lt;/strong&gt;
|—&lt;strong&gt;fundamentosemjava&lt;/strong&gt;
|—&lt;strong&gt;Main.java&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Execução de aplicações fora das IDEs&lt;/h3&gt;
&lt;p&gt;Podemos executar programas pela linha de comando com o comando &lt;em&gt;java&lt;/em&gt; no nosso terminal.
Você pode fazer isso, caminhando até a pasta onde está a classe candidata a execução e
utilizar o comando &lt;em&gt;java&lt;/em&gt; logo em seguida o nome da classe. Não se esqueça de colocar o nome completo da classe
incluindo o nome do pacote em que ela pertence. &lt;em&gt;Quando em ambiente Windows, você precisa incluir
o diretorio bin da JRE nas variaveis de ambiente.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Statements (afirmações)!&lt;/h3&gt;
&lt;p&gt;Em Java, programas são feitos de afirmações (algum código, como o exemplo do hello world) e essas afirmações possuem ou não declarações. Em Java, as afirmações terminam com ponto e virgula no final, coisa de sintaxe. Pra alguns conhecedores
de outras linguagens que não exigem podem achar meio chato, mas é necessário no mundo Java.&lt;/p&gt;
&lt;h2&gt;Collections&lt;/h2&gt;
&lt;p&gt;Vamos cobrir todas as coisas, o background, as caracteristicas comuns que as classes Colections tem. Primeiramente vamos cobrir &lt;strong&gt;Coleçes de Coleções&lt;/strong&gt;, em outras palavras, quais os tipos de coleções que temos, porque existem diferentes tipos.. coisas assim. Logo depois vamos falar brevemente sobre a distinção entre &lt;strong&gt;Interface e Implementação&lt;/strong&gt;, mas não é sobre os termos genéricos de programação orientada a objetos e sim, mais especificadamente, o como olhamos as coleções. Vamos reconhecer que uma Interface define o comportamento de uma determinada coleção e que há uma ou mais implementaçes daquela Interface e que cada uma dessas implementações possuem diferentes caracteristicas quanto a performance.&lt;/p&gt;
&lt;h3&gt;Coleções de Coleções&lt;/h3&gt;
&lt;p&gt;Todas as interfaces das coleçes dentro da API Java extende de uma interface comum chamada &lt;em&gt;java.util.Collection&lt;/em&gt; e na interface propriamente dita, existem alguns comportamentos comuns ou métodos comuns no qual quem os extende, os implementam.
O primeiro tipo de &lt;em&gt;Collection&lt;/em&gt; que vamos encontrar é o tipo &lt;em&gt;List&lt;/em&gt; (Lista), provavelmente o mais utilizado ou comum em Java, possuem ordem, indexação e uma série de implementaçes na biblioteca núcleo. O próximo tipo geral é o &lt;em&gt;Set&lt;/em&gt; (Conjunto) e seu irmão mais próximo &lt;em&gt;Sorted Set&lt;/em&gt; (o mesmo que set porém seus elementos são ordenados) que são um tipo de coleção que contém elementos distintos. Outros dois tipos relacionados são &lt;em&gt;Queue&lt;/em&gt; e &lt;em&gt;Deque&lt;/em&gt; (Fila), são tipos que possuem ordem, não só ordem de índice mas ordem de entrada e saida de elementos também do tipo FIFO (primeiro a entrar é o primeiro a sair) no caso da &lt;em&gt;Queue&lt;/em&gt; pois o &lt;em&gt;Deque&lt;/em&gt; (Fila dupla) se comporta tanto primeiro a entrar é o primeiro a sair como o primeiro a entrar é o ultimo a sair (dai podemos deduzir que isso é o comportamento da estrutura de dados pilha, se você precisa de alguma estrutura que se comporte como uma pilha, &lt;em&gt;Deque&lt;/em&gt; é o que você precisa). Finalmente temos tipos baseado em chaves, sendo eles o &lt;em&gt;Map&lt;/em&gt; e o &lt;em&gt;Sorted Map&lt;/em&gt; (igual o Map porém temos uma ordem definida), são interfaces que defidem coleções que possuem chaves (únicas) e valores (associados a uma chave).&lt;/p&gt;
&lt;!-- IMG --&gt;
&lt;h3&gt;Interfaces e Implementaçes&lt;/h3&gt;
&lt;p&gt;É bem crítico para entender o design geral da API Collections, é a dessegregação entre uma interface e sua implementação. Uma &lt;strong&gt;interface&lt;/strong&gt; pode ter várias implementações, várias estruturas de dados, elas defidem as caracteristicas funcionas, o comportamento (se uma coleção é acessada de forma indexada ou por meio da ordem). Interfaces geralmente tem implementações bem populares, muitas vezes você vai ver a interface &lt;em&gt;List&lt;/em&gt; sendo usada e frequentemente a implementação &lt;em&gt;ArrayList&lt;/em&gt; sendo usada. Já a &lt;strong&gt;implementação&lt;/strong&gt;, cada uma é uma estrutura de dado diferente, como exemplo, a interface &lt;em&gt;List&lt;/em&gt; possúi tanto a implementação &lt;em&gt;ArrayList&lt;/em&gt; como a de &lt;em&gt;LinkedList&lt;/em&gt; na biblioteca padrão e isso quer dizer que você pode trocar fácilmente entre diferentes implementações. Mas porque você iria querer coisa do tipo? devido as diferenças de performance, adicionar um elemento em uma &lt;em&gt;LinkedList&lt;/em&gt; é mais performático que em um &lt;em&gt;ArrayList&lt;/em&gt; devido ao fato que a &lt;em&gt;LinkedList&lt;/em&gt; não tem que se expandir para adicionar um elemento como também você pode acessar algum ponto na coleção mais rapidamente com o &lt;em&gt;ArrayList&lt;/em&gt; do que em uma &lt;em&gt;LinkedList&lt;/em&gt; que é uma lista encadeada.&lt;/p&gt;
&lt;h2&gt;Bonus&lt;/h2&gt;
&lt;h3&gt;String, StringBuffer e StringBuilder&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Você deve usar &lt;em&gt;String&lt;/em&gt; quando uma estrutura imutável é apropriada; obtendo uma nova sequência
de caracteres de uma &lt;em&gt;String&lt;/em&gt; talvez possa tomar um baque de performance não apropriado, tanto em tempo de CPU
quanto de memória (obtendo substrings é eficiente em termos de CPU porque dados não são copiados, mas isso
significa um potencial grande em termos de quantidade de dados em que talvez continuem alocados).&lt;/li&gt;
&lt;li&gt;Você deve usar &lt;em&gt;StringBuilder&lt;/em&gt; quando você precisa criar uma sequência de caracteres mutáveis, usualmente
concatenando uma série de caracteres em sequência, juntos.&lt;/li&gt;
&lt;li&gt;Você deve usar &lt;em&gt;StringBuffer&lt;/em&gt; nas mesmas circunstâncias que você utilizaria &lt;em&gt;StringBuilder&lt;/em&gt;, porém quando
mudanças na string devem ser síncronas (porque vários threads estão lendo/modificando o buffer de string).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Diferença de Mutabilidade&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;String&lt;/em&gt; é imutável, se você quer alterar seus valores, outro objeto é criado enquanto &lt;em&gt;StringBuffer&lt;/em&gt;
e &lt;em&gt;StringBuilder&lt;/em&gt; são mutáveis, então eles podem ter seus valores alterados. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Diferença em Thread-Safety&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A diferença entre &lt;em&gt;StringBuffer&lt;/em&gt; e &lt;em&gt;StringBuilder&lt;/em&gt; é que &lt;em&gt;StringBuffer&lt;/em&gt; é thread-safe. Então quando a
aplicação precisa rodar em apenas um thread, é melhor usar &lt;em&gt;StringBuilder&lt;/em&gt;. &lt;em&gt;StringBuilder é mais eficiente
que o *StringBuffer&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Situações&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Se sua string não vai mudar, utilize a classe &lt;em&gt;String&lt;/em&gt; porque objetos &lt;em&gt;String&lt;/em&gt; são imutáveis.&lt;/li&gt;
&lt;li&gt;Se sua string vai mudar (por exemplo: muitas operações e lógica na construção da string) e vai
ser acessado apartir de um único thread, usar &lt;em&gt;StringBuilder&lt;/em&gt; é bom o suficiente.&lt;/li&gt;
&lt;li&gt;Se sua string vai mudar e vai ser acessada por vários threads, utilize &lt;em&gt;StringBuffer&lt;/em&gt; porque &lt;em&gt;StringBuffer&lt;/em&gt;
é síncrono, sendo assim, você vai ter thead-safety.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Detalhes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Vale notar que &lt;em&gt;StringBuilder/Buffers&lt;/em&gt; não são pura magia, eles apenas utilizam um Array como um objeto de apoio
e que esse Array tem que ser realocado sempre quando se torna cheio. Tenha certeza e crie o seu objeto &lt;em&gt;StringBuilder/Buffer&lt;/em&gt; grande o suficiente para que eles não tenham que estar constantemente sendo modificados
de tamanho (isso é custoso) toda vez que o método &lt;em&gt;.append()&lt;/em&gt; é chamado.&lt;/p&gt;
&lt;p&gt;A modificação do tamanho pode se tornar bem degenerativa. Basicamente modifica o tamanho desse Array the apoio para
duas vezes o seu tamanho atual, toda vez que é necessário a expansão. Isso pode resultar em uma quantidade absurda
de memoria RAM sendo alocada e não utilizada quando &lt;em&gt;StringBuilder/Buffer&lt;/em&gt; começam a crescer demais.&lt;/p&gt;
&lt;p&gt;Em Java &lt;em&gt;String x = “A” + “B”; O que ocorre é que um *StringBuilder&lt;/em&gt; é utlizado, escondido. Então, para casos simples assim, não há necessidade de declarar seu próprio &lt;em&gt;StringBuilder&lt;/em&gt;. Mas… se você estiver construindo objetos &lt;em&gt;String&lt;/em&gt; grandes (menos que 4k), declarar &lt;em&gt;StringBuilder sb = StringBuilder(4096);&lt;/em&gt; é muito mais eficiente que concatenação ou usar o construtor padrão no qual é apenas 16 caracteres. Se sua &lt;em&gt;String&lt;/em&gt; vai ser menor que 10k então inicialize-a com o construtor em 10k para garantir segurança. Mas se for igual a 10k, melhor escrever um caracter a mais que 10k, causando realocação e copia para um Array de tamanho 20k. De certa forma, inicializar com mais é melhor que com menos.&lt;/p&gt;
&lt;p&gt;No caso de auto modificação de tamanho, no décimo sétimo caracter (construtor padrão são apenas 16 caracteres), o Array de apoio vai ser realocado e copiado para 32 caracteres e no trigésimo terceiro isso vai ocorrer denovo e você vai ter uma realocação e copia para 64 caracteres. Você pode ver como isso degenera para várias realocações e cópias no qual você precisa evitar utilizando &lt;em&gt;StringBuilder/Buffer&lt;/em&gt; no inicio.&lt;/p&gt;
&lt;p&gt;Esse é o código fonte retirado da JDK 6 para &lt;em&gt;AbstractStringBuilder&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;expandCapacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; minimumCapacity&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; newCapacity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newCapacity &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        newCapacity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;MAX_VALUE&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;minimumCapacity &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; newCapacity&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        newCapacity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; minimumCapacity&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;copyOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; newCapacity&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A boa prática é inicializar o &lt;em&gt;StringBuilder/Buffer&lt;/em&gt; um pouco maior do que você pensa que vai precisar, isso se você não tem uma ideia na hora, do tão grande a &lt;em&gt;String&lt;/em&gt; vai ser. Uma alocação com um pouco mais de memória do que você precisa vai ser melhor que várias realocações e cópias.&lt;/p&gt;
&lt;p&gt;Também tome cuidade de inicializar um &lt;em&gt;StringBuilder/Buffer&lt;/em&gt; com uma &lt;em&gt;String&lt;/em&gt;, porque vai acontecer de ser alocado o tamanho da &lt;em&gt;String&lt;/em&gt; + 16 caracteres, no qual na maioria dos casos, vai apenas fazer com que o ciclo de realocação e cópia seja degenerado, coisa que você quer evitar.&lt;/p&gt;
&lt;p&gt;Esse código é foi diretamente tirado como exemplo do código fonte do Java 6&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; str&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Se porque alguma razão, você acabar ficando com uma instância de &lt;em&gt;StringBuilder/Buffer&lt;/em&gt; que você não criou e
não pode controlar o construtor que é chamado, tem uma forma de evitar comportamentos degenerados com realocações e cópias. Chame o método &lt;em&gt;.ensureCapacity()&lt;/em&gt; com o tamanho que você quer para assegurar que sua &lt;em&gt;String&lt;/em&gt; resultante caiba.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;As alternativas&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Só pra constar, se você está fazendo bastante manipulação e construção de &lt;em&gt;String&lt;/em&gt;, tem muitas outras melhores alternativas em questão de performance. Por exemplo, se você pode criar uma implementação de &lt;em&gt;StringList&lt;/em&gt; herdando &lt;em&gt;ArrayList&lt;String&gt;&lt;/em&gt; e adicionando contadores para rastrear o numero de caracteres em cada &lt;em&gt;.append()&lt;/em&gt; e outras operações de mutação da lista, e então fazer um override (sobrescrita) do método &lt;em&gt;.toString()&lt;/em&gt; para criar um &lt;em&gt;StringBuilder&lt;/em&gt; do mesmo tamanho que você precisa e fazer um loop pela lista, construindo a saída, você pode até mesmo fazer o &lt;em&gt;StringBuilder&lt;/em&gt; uma instância e ‘cachiar’ os resultados do &lt;em&gt;.toString()&lt;/em&gt; e apenas ter que regenerar ela quando mudanças ocorrerem.&lt;/p&gt;
&lt;p&gt;Não se esqueça sobre &lt;em&gt;String.format()&lt;/em&gt; quando construindo saídas fixas e formatadas, no qual pode ser otimizado pelo compilador assim que eles o fazem cada vez melhor.&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;More &lt;a href=&quot;http://stackoverflow.com/questions/2971315/string-stringbuffer-and-stringbuilder&quot;&gt;here.&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt;
&lt;h2&gt;Questões de Entrevista&lt;/h2&gt;
&lt;h3&gt;Básico&lt;/h3&gt;
&lt;h4&gt;Qual a diferença entre JDK e JRE?&lt;/h4&gt;
&lt;p&gt;Bom, JDK significa Java Development Kit. O JDK contém as ferramentas e bibliotécas para o desenvolvimento de aplicações Java. Ele também contém compiladores de ferramentas de debug necessários para compilar um programa Java. Porém JRE significa Java Runtime Environment. E este é incluso na JDK. O JRE provê bibliotécas e a maquina virtual Java (JVM) que é necessária para rodar um programa Java.&lt;/p&gt;
&lt;h4&gt;O que é a JVM?&lt;/h4&gt;
&lt;p&gt;A Java Virtual Machine ou Máquina Virtual Java, é uma máquina abstrata que executa bytecode Java. Existe uma JVM diferente para cada hardware ou software diferente. Dessa forma, a JVM depende de plataforma. Ela é responsável por carregar, verificar e executar bytecode Java em uma plataforma.&lt;/p&gt;
&lt;h4&gt;Quais os diferentes tipos de áreas de memória alocadas pela JVM?&lt;/h4&gt;
&lt;p&gt;Em Java a JVM aloca memória para diferentes processos, métodos e objetos. Algumas áreas alocadas pela JVM são:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ClassLoader: Componente da JVM usado para carregar os arquivos de classes.&lt;/li&gt;
&lt;li&gt;Class (Method) Area: Armazena estruturas por classe como a Runtime Constant Pool (pool de tempo de execução constante), dados dos campos e métodos e código dos métodos.&lt;/li&gt;
&lt;li&gt;Heap: A Heap é criada em tempo de execução e contém a área de dados de tempo de execução no qual objetos são alocados.&lt;/li&gt;
&lt;li&gt;Stack: A Stack guarda variáveis locais e resultados parciais em tempo de execução. Ela também ajuda no invocamento de métodos e o retorno de valor. Cada thread cria uma Stack da JVM no tempo de criação da thread.&lt;/li&gt;
&lt;li&gt;Program Counter Register: Essa área de memória contém o endereço da instrução da JVM que está sendo executada.&lt;/li&gt;
&lt;li&gt;Native Method Stack: Essa área é reservada para todos os métodos nativos usados na aplicação.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;O que é compilador JIT?&lt;/h4&gt;
&lt;p&gt;Just In Time Compiler também conhecido como JIT compiler (compilador que funciona apenas na hora certa) é utilizado para a melhora de performance em Java. É ativado por padrão. Sua compilação é feita em tempo de execução. Java popularizou a utilização do JIT incluindo-o na JVM.&lt;/p&gt;
&lt;h4&gt;Como a plataforma Java se difere de outras plataformas?&lt;/h4&gt;
&lt;p&gt;Java é uma linguagem independente de plataforma. O compilador Java compila código Java em bytecode que pode ser interpretado pela JVM. Existem JVMs escritas para quase todas as mais conhecidas plataformas. O bytecode Java pode rodar em qualquer plataforma suportadada na mesma forma, enquanto que outras linguagens requerem bibliotécas compiladas para rodar em uma plataforma específica.&lt;/p&gt;
&lt;h4&gt;Porque pessoas falam que Java é uma linguagem que você ‘escreve uma vez e roda em qualquer lugar’?&lt;/h4&gt;
&lt;p&gt;Você pode escrever código Java, compilar e rodar no Windows. Os arquivos &lt;em&gt;jar&lt;/em&gt; e &lt;em&gt;class&lt;/em&gt; que você vai pegar da plataforma Windows pode rodar como se fosse em um ambiente Unix. Dessa meneira, é dita ser uma linguagem totalmente independente de plataforma. Por trás de toda essa portabilidade está o Java bytecode. Bytecode gerado pelo compilador Java pode ser interpretado por qualquer JVM. Dessa maneira, fica fácil escrever programas em Java e esperar que eles também rodem em qualquer plataforma. O compilador Java &lt;em&gt;javac&lt;/em&gt; compila código Java e a JVM roda esse código. &lt;/p&gt;
&lt;h4&gt;Como o ClassLoader funciona em Java?&lt;/h4&gt;
&lt;p&gt;Em Java, ClassLoader é a classe que é utilizada para carregar arquivos na JVM. ClassLoader carrega arquivos de seus locais físicos (Filesystem, Network, etc). Existem três tipos principais de ClassLoader em Java:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bootstrap ClassLoader: Esse é o primiro ClassLoader. Ele carrega classes partindo dos arquivos &lt;em&gt;rt.kar&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Extension ClassLoader: Carrega arquivos de classe do local &lt;em&gt;jre/lib/ext&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Application ClassLoader: Esse ClassLoader depende do CLASSPATH para encontrar a localização dos arquivos de classe. Se você especificar o CLASSPATH, então esse ClassLoader vai carrega-los pra você.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Você acha que &lt;em&gt;main&lt;/em&gt; (utilizado para o método main) seja uma keyword em Java?&lt;/h4&gt;
&lt;p&gt;Não, &lt;em&gt;main&lt;/em&gt; é apenas o nome do método. Pode ocorrer de ter vários métodos com o nome &lt;em&gt;main&lt;/em&gt; em um arquivo de classe.&lt;/p&gt;
&lt;h4&gt;Podemos escrever o método &lt;em&gt;main&lt;/em&gt; como &lt;em&gt;public void static&lt;/em&gt; ao contrário de &lt;em&gt;public static void&lt;/em&gt;?&lt;/h4&gt;
&lt;p&gt;Não, você não pode escrever dessa forma. Qualquer método tem que especificar primeiro os modificadores e depois o valor de retorno. Você pode escrever &lt;em&gt;static public void main()&lt;/em&gt; ao contrário de &lt;em&gt;public static void main()&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;Em Java, se você não especificar qualquer valor para variaveis locais, qual será o valor padrão dessas variaveis locais?&lt;/h4&gt;
&lt;p&gt;Java não inicializa variaveis locais com algum valor padrão. Então essas variaveis vão ser nulas &lt;em&gt;null&lt;/em&gt; por padrão.&lt;/p&gt;
&lt;h4&gt;Vamos dizer que executamos uma classe Java sem passar nenhum argumento. Qual o valor do array de &lt;em&gt;String&lt;/em&gt; no método &lt;em&gt;Main&lt;/em&gt;?&lt;/h4&gt;
&lt;p&gt;No método &lt;em&gt;main&lt;/em&gt;, quando não temos nenhum argumento no array, ele é vazio, porém ele não é nulo.&lt;/p&gt;
&lt;h4&gt;Qual a diferença entre os tipos de dados &lt;em&gt;byte&lt;/em&gt; e &lt;em&gt;char&lt;/em&gt; em Java?&lt;/h4&gt;
&lt;p&gt;Ambos são tipos de dados numéricos em Java. Eles são utilizados para representar numeros em uma capacidade específica. A maior diferença entre esses tipos é que &lt;em&gt;byte&lt;/em&gt; pode guardar um dado binário cru enquanto que &lt;em&gt;char&lt;/em&gt; apenas guarda ou armazena caracteres ou texto. O uso de &lt;em&gt;char&lt;/em&gt; é, por exemplo, &lt;em&gt;char ch = ‘x’;&lt;/em&gt;. O &lt;em&gt;byte&lt;/em&gt; pode possuir valores entre -128 e 127, e é feito de 8 bits. O &lt;em&gt;char&lt;/em&gt; é feito de 16 bits, sendo equivalente a 2 bytes.&lt;/p&gt;
&lt;h3&gt;Programação Orientada a Objetos&lt;/h3&gt;
&lt;h4&gt;Quais são os princípios mais importântes de Programação Orientada a Objetos?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Abstração&lt;/li&gt;
&lt;li&gt;Encapsulamento&lt;/li&gt;
&lt;li&gt;Herança&lt;/li&gt;
&lt;li&gt;Polimorfísmo&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Qual a diferença entre uma Linguagem de Programação Orientada a Objetos e uma Linguagem de Programação Baseada em Objetos?&lt;/h4&gt;
&lt;p&gt;Linguagens de Programação Orientadas a Objetos como Java e C++ seguem conceitos de Programação Orientação a Objetos como Encapsulamento, Abstração, Polimorfísmo e Herança, etc. Já Linguagens de Programação Baseada em Objetos seguem recursos de Programação Orientada a Objetos, mas…, elas não dão suporte para Polimorfísmo e Herança. Exemplo: JavaScript, VBScript etc. Linguagens de Programação Baseadas em Objetos dão suporte para Objetos e você pode construir objetos por um construtor. Essas linguagens também suportam Encapsulamento. Também são conhecidas como Prototype-Oriented Languages ou Linguagens Orientadas a Protótipo. &lt;/p&gt;
&lt;h4&gt;Em Java, qual é o valor padrão de uma referência de objeto definido como uma instância de um &lt;em&gt;Object&lt;/em&gt;?&lt;/h4&gt;
&lt;p&gt;Todas instâncias de variáveis de objetos (Object) em Java são null por padrão.&lt;/p&gt;
&lt;h4&gt;Por que precisamos de construtor em Java?&lt;/h4&gt;
&lt;p&gt;Java é uma Linguagem Orientada a Objetos no qual podemos criar e usar objetos. O construtor é uma parte do código similar a um método. É utilizado para criar um objeto e adicionar o seu valor inicial. O construtor é uma função especial que tem o mesmo nome da classe. Sem o construtor, não há outra maneira de criar um objeto. Por padrão, Java provê um construtor padrão para cada objeto. Se nós sobrecarregarmos um construtor, temos que implementar o construtor default ou construtor padrão.&lt;/p&gt;
&lt;h4&gt;Porque precisamos de Construtor Padrão em Java?&lt;/h4&gt;
&lt;p&gt;Construtor Default ou Construtor Padrão é o construtor sem nenhum argumento que automaticamente é gerado pelo Java, se não tem outro construtor definido. Na especificação Java diz que vai existir um construtor padrão se não houver nenhum construtor sobrecarregado em uma classe. Mas não é dito nada sobre o cenário onde escrevemos um construtor sobrecarregado em uma classe. Nós precisamos de no minimo um construtor para criar um objeto, é por isso que Java vai criar o construtor por padrão. Quando temos construtor sobrecarregado, então Java vai assumir que nós queremos algum tratamento customizado em nosso código. Dai não é definido um construtor padrão. Mas dessa forma é necessário especificar o construtor padrão, se não fizermos isso, vai ocorrer um erro.&lt;/p&gt;
&lt;h4&gt;Qual é o valor retornado pelo construtor Java?&lt;/h4&gt;
&lt;p&gt;Quando chamamos um construtor em Java, ele retorna o objeto criado por ele. É assim que criamos objetos em Java.&lt;/p&gt;
&lt;h4&gt;Podemos herdar de um construtor?&lt;/h4&gt;
&lt;p&gt;Não, Java não suporta herança de construtores.&lt;/p&gt;
&lt;h4&gt;Porque construtores não podem ser &lt;em&gt;final&lt;/em&gt;, &lt;em&gt;static&lt;/em&gt; ou &lt;em&gt;abstract&lt;/em&gt; em Java?&lt;/h4&gt;
&lt;p&gt;Se nós definir-mos um método como &lt;em&gt;final&lt;/em&gt;, isso significa que nós não queremos que nenhuma outra classe o sobreescreva. Mas o construtor (como é dito na especificação Java) não pode ser sobrescrito. Dessa forma não há razão para defini-lo como &lt;em&gt;final&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Se nós definir-mos um método como &lt;em&gt;abstract&lt;/em&gt;, isso significa que esse método não tem corpo algum e o mesmo deve ser implamentado em classes filhas. Mas o construtor é chamado implicitamente quando a palavra-chave &lt;em&gt;new&lt;/em&gt; é usada. Dessa meneira, o construtor precisa de corpo.&lt;/p&gt;
&lt;p&gt;Finalmente, se definir-mos um método como &lt;em&gt;static&lt;/em&gt;, isso significa que esse método pertence a essa classe e não a um objeto particular (instância). O construtor é chamado toda vez para inicializar um objeto. Dessa forma, não existe necessidade de fazer um construtor &lt;em&gt;static&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Herança&lt;/h3&gt;
&lt;h4&gt;Qual o propósito da palavra-chave &lt;em&gt;this&lt;/em&gt; em Java?&lt;/h4&gt;
&lt;p&gt;Em Java, a palavra-chave &lt;em&gt;this&lt;/em&gt; se refere a atual instância do objeto. É útil para diferenciar entre variaveis de instância das variaveis locais. Também pode ser utilizado para chamar construtores. Ou pode ser utilizado para se referir a atual instância. &lt;/p&gt;
&lt;h4&gt;Explique o conceito de Herança&lt;/h4&gt;
&lt;p&gt;Heraça é um conceito importante em Programação Orientada a Objetos. Alguns objetos compartilham certas caracteristicas e comportamento. Usando herança, nós podemos colocar o comportamento ou caracteristica que é comum em uma classe base ou mãe, também conhecida como super classe. Todos os objetos com comportamento parecido podem herdar dessa classe base. Também podemos representar herança como uma relação &lt;em&gt;é um&lt;/em&gt;. Herança promove reuso de código, Sobrescrita de Método e Polimorfísmo.&lt;/p&gt;
&lt;h4&gt;Qual classe em Java é super classe (mãe) de todas as outras?&lt;/h4&gt;
&lt;p&gt;Java é uma Linguagem Orientada a Objetos. Dessa forma, a classe Object é a super classe de todas as outras classes.&lt;/p&gt;
&lt;h4&gt;Por que Java não suporta Herança Múltipla?&lt;/h4&gt;
&lt;p&gt;Herança Múltipla significa que uma classe pode herdar comportamento ou caracteristica de uma ou mais classes. O problema de fazer isso é que classes base podem ter diferentes implementações do mesmo método (assinatura). Dessa forma, eles possuem diferentes maneiras de fazer a mesma coisa. Dai vem a pergunta.. Qual implementação a classe filha deve escolher? Isso nos leva a ambiguidade. Existe uma razão principal na qual faz com que Java não dê suporte para implementar Herança Múltipla. Vamos considerar que você possui uma classe TV e outra classe BombaAtomica. As duas classes possuem o método &lt;em&gt;switchOn()&lt;/em&gt; mas apenas a TV tem o método &lt;em&gt;switchOff()&lt;/em&gt;. Se sua classe herda as duas classes você vai ter o problema de que você pode ligar as duas, porém &lt;em&gt;switchOff&lt;/em&gt; vai desligar apenas a TV. &lt;/p&gt;
&lt;p&gt;Mas em Java podemos implementar múltiplas interfaces. &lt;/p&gt;
&lt;h4&gt;Em Programação Orientada a Objetos, o que significa Composição?&lt;/h4&gt;
&lt;p&gt;Composição, também conhecido como uma relação &lt;em&gt;tem um&lt;/em&gt;, é quando uma classe segura uma instância de outra.&lt;/p&gt;
&lt;h4&gt;Como Agregação e Composição se diferem?&lt;/h4&gt;
&lt;p&gt;Agregação e Composição são tipos de associação (relacionamentos). Composição é uma relação forte. Se um objeto composto é destruído, todas as suas partes também são destruídas. Exemplo: Um Carro possui uma Roda. Se o objeto Carro é destruído, então não faz sentido a Roda ficar ali, então é destruída. Já em Agregação, a relação é mais fraca. Exemplo: Uma bibliotéca possui estudantes, se ela é destruída os estudantes vão continuar existindo. Porém se fosse composição, os livros que fazem partes dela seriam destruídos junto.&lt;/p&gt;
&lt;h4&gt;Por que não há ponteiros em Java?&lt;/h4&gt;
&lt;p&gt;Em Java existem referências ao invés de ponteiros. Essas referências apontam para objetos na memória. Mas… não há acesso direto para localizações na memória. A JVM está livre para mover objetos dentro da máquina virtual. A ausência de ponteiros ajuda Java a gerênciar memória como também o Garbage Collector (coletor de lixo) de forma efetiva. Também provê para os desenvolvedores a conveniência de não se importarem sobre alocação e desalocação de memória.&lt;/p&gt;
&lt;h4&gt;Se não há ponteiros em Java, porque recebemos &lt;em&gt;NullPointerException&lt;/em&gt; então?&lt;/h4&gt;
&lt;p&gt;Em Java, o equivalente do Ponteiro é a Referencia de Objeto. Quando nos utilizamos o &lt;em&gt;.&lt;/em&gt; (ponto), esse ponto aponta para a referência do objeto. Então a JVM utiliza ponteiros mas programadores apenas veem referências de objetos. No caso de uma referência de um objeto apontar para um objeto &lt;em&gt;null&lt;/em&gt; (núlo) e assim tentarmos acessar um método ou uma variavel dentro, vamos receber um baita &lt;em&gt;NullPointerException&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;Qual o propósito da palavra-chave &lt;em&gt;super&lt;/em&gt; em Java?&lt;/h4&gt;
&lt;p&gt;A palavra-chave &lt;em&gt;super&lt;/em&gt; é utilizada em métodos ou no construtor de uma classe herdeira ou classe filha. &lt;em&gt;super&lt;/em&gt; se refere a classe parente imediata de um objeto. Usando &lt;em&gt;super&lt;/em&gt; nos podemos chamar métodos da classe superior dentro de um método na própria classe filha. Nós podemos também chamar o construtor de uma classe base ou parente apartir do construtor de uma classe filha pela palavra-chave &lt;em&gt;super&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;É possivel usar ambos &lt;em&gt;this()&lt;/em&gt; e &lt;em&gt;super()&lt;/em&gt; no mesmo construtor?&lt;/h4&gt;
&lt;p&gt;Não, Java não permite utilizar ambos no mesmo construtor. Como consta na especificação Java, &lt;em&gt;super()&lt;/em&gt; ou &lt;em&gt;this()&lt;/em&gt; devem estar no início do corpo de um construtor. Existem motivos nos quais Java proibe este uso, se caso sua classe tivesse sobrecarga de construtores, poderia ocorrar várias chamadas de construtores indevidas.&lt;/p&gt;
&lt;h4&gt;Qual o significado de Clonagem de Objetos (Object Cloning) em Java?&lt;/h4&gt;
&lt;p&gt;O método &lt;em&gt;Object.clone()&lt;/em&gt; é usado para criar uma cópia exata de um objeto em Java. Como um construtor, cria e retorna uma cópia de um objeto, porém com os dados ou valores exatamente iguais ao objeto clonado. Uma desvantagem da clonagem é que o tipo de retorno é &lt;em&gt;Object&lt;/em&gt;. É necessário fazer o cast (moldagem) explicitamente para o tipo verdadeiro.&lt;/p&gt;
&lt;h3&gt;Estático&lt;/h3&gt;
&lt;h4&gt;Em Java, porque usamos variaveis &lt;em&gt;static&lt;/em&gt;?&lt;/h4&gt;
&lt;p&gt;Quando queremos uma propriedade comum para todos os objetos de uma classe, nós fazemos o uso de uma variavel de nível de classe, chamada de variavel estática. Essa variavel é carregada em memória apenas uma vez no tempo de carregamento da classe. Dessa meneira é salvo um bocado de memória, desde que não é definida por objeto e sim por classe.&lt;/p&gt;
&lt;h4&gt;Porque não é uma boa prática criar variáveis estáticas (&lt;em&gt;static&lt;/em&gt;) em Java?&lt;/h4&gt;
&lt;p&gt;Variaveis estáticas em Java são comuns para todos os objetos de uma classe. Se um novo objeto é criado, não há necessidade de testar o valor de uma variavel estática. Qualquer código que usa variavel estática pode estar em qualquer estado. Pode estar dentro de um novo objeto ou no nível de classe. O escopo de variavel estática é aberto em uma classe Java. Se queremos um controle maior de escopo, então variaveis devem ser criadas no nível de criação de objeto e não de classe. Também, definir variaveis estáticas não é boa prática porque elas podem ir contra os princípios de Programação Orientada a Objetos.&lt;/p&gt;
&lt;h4&gt;Qual o propósito de métodos estáticos (&lt;em&gt;static&lt;/em&gt;) em Java?&lt;/h4&gt;
&lt;p&gt;Java nos possibilita o recurso de métodos estáticos para criar comportamento em nível de classe. O método estático é commum para todos os objetos de uma classe. Não precisamos criar nenhum objeto de uma classe para chamar um método estático. Isso nos dá um pouco de conveniência, pelo fato de não termos que criar um objeto para chamar este método. Também, métodos estáticos podem acessar e modificar membros estáticos. Isso também ajuda manter comportamento, como também, estado no nível de classe.&lt;/p&gt;
&lt;h4&gt;Porque marcamos o método &lt;em&gt;main&lt;/em&gt; como estático (&lt;em&gt;static&lt;/em&gt;) em Java?&lt;/h4&gt;
&lt;p&gt;O método &lt;em&gt;main&lt;/em&gt; em Java é marcado como &lt;em&gt;static&lt;/em&gt;, dessa forma a JVM pode chamar esse método para iniciar o programa. Se o método &lt;em&gt;main&lt;/em&gt; não fosse estático, então qual construtor seria chamado pelo processo Java? É uma convenção marcar o método &lt;em&gt;main&lt;/em&gt; como &lt;em&gt;static&lt;/em&gt; em Java. Mas se nós removermos o &lt;em&gt;static&lt;/em&gt;, então ocorreria ambiguidade. O processo Java talvez não conseguiria saber qual método de uma classe ele poderia chamar para executar o programa. Essa convenção ajuda o processo Java a identificar o código que da início ao programa em uma classe que é passada como argumento para o processo Java.&lt;/p&gt;
&lt;h4&gt;Em qual cenário nos utilizamos um Bloco Estático?&lt;/h4&gt;
&lt;p&gt;Algumas vezes, quando se tem uma classe que tem membros estáticos. Essas variaveis ou membros estáticos precisam de uma inicialização complicada. Nesse sentido, blocos estáticos ajudam como uma ferramenta para inicializar membros estáticos complexos. O bloco estático é executado antes da execução do &lt;em&gt;main&lt;/em&gt;. Algumas vezes, nós podemos substituir o bloco estático com um método estático de uma classe.&lt;/p&gt;
&lt;h4&gt;É possível executar um programa sem definir um método &lt;em&gt;main&lt;/em&gt;?&lt;/h4&gt;
&lt;p&gt;Não é possivel apartir do Java 7. Você precisa de um método &lt;em&gt;main()&lt;/em&gt; para executar o programa. Em versões anteriores existia um jeito de contornar essa situação utilizando blocos estáticos para execução. Mas agora essa brecha foi fechada.&lt;/p&gt;
&lt;h4&gt;O que acontece quando o modificador &lt;em&gt;static&lt;/em&gt; não é mencionado na assinatura do método &lt;em&gt;main&lt;/em&gt;?&lt;/h4&gt;
&lt;p&gt;Como diz a especificação Java, o método &lt;em&gt;main&lt;/em&gt; tem que ser marcado como &lt;em&gt;static&lt;/em&gt;. Esse método só precisa de um arguento que é o array de Strings. Um programa pode compilar com um método não estático. Mas na execução vai acontecer o erro &lt;em&gt;NoSuchMethodError&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;Qual a diferença entre um Método Estático &lt;em&gt;static&lt;/em&gt; e um Método de Instância?&lt;/h4&gt;
&lt;p&gt;Frequentemente há a necessidade de definir um comportamento para uma classe que não é dependente de variáveis de um objeto. Tal comportamento é capturado em um método estático. Se aquele comportamento depende de variaveis de um objeto, então nós não vamos marcar como &lt;em&gt;static&lt;/em&gt;, então o comportamento permanecera apenas um método de instância. Para chamar um método estático, nós não precisamos criar um objeto. Mas pra chamar método de instância, sim. &lt;/p&gt;
&lt;h3&gt;Sobrecarga de método e Sobrescrita&lt;/h3&gt;
&lt;h4&gt;Qual é o outro nome de Sobrecarga de Método?&lt;/h4&gt;
&lt;p&gt;Sobrecarga de Método também é conhecida como Polimorfísmo Estático.&lt;/p&gt;
&lt;h4&gt;Como você vai implementar sobrecarga de método em Java?&lt;/h4&gt;
&lt;p&gt;Em Java, uma classe pode ter multiplos métodos com o mesmo nome porém com diferentes argumentos. Isso é chamado de Sobrecarga de Método. Para implementar sobrecarga de método você tem que criar dois métodos com o mesmo nome em uma mesma classe, no qual deve ter um ou mais das seguintes caracteristicas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Diferentes quantidades de parâmetros&lt;/li&gt;
&lt;li&gt;Tipos diferentes de parâmetros&lt;/li&gt;
&lt;li&gt;Sequência diferentes de tipos de parâmetros&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Quais tipos de variações de argumentos são permitidos em Sobregarga de Método?&lt;/h4&gt;
&lt;p&gt;Sobrecarga de Método permite dois métodos com o mesmo nome se diferenciarem em:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Número de parâmetros&lt;/li&gt;
&lt;li&gt;Tipos dos parâmetros&lt;/li&gt;
&lt;li&gt;Sequência dos tipos de parâmetros&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Porque não é possivel fazer Sobrecarga de Método mudando o tipo de retorno do método em Java?&lt;/h4&gt;
&lt;p&gt;Se mudarmos o tipo de retorno de métodos sobrecarregados, então isso vai causar comportamento ambíguo. Como os clientes vao saber qual método vai retornar qual tipo? Por isso que não se pode chegar em Sobrecarga de Método por meio de diferentes tipos de retorno.&lt;/p&gt;
&lt;h4&gt;É permitido sobrecarregar o método &lt;em&gt;main()&lt;/em&gt; em Java?&lt;/h4&gt;
&lt;p&gt;Sim, em Java os usuários podem criar vários métodos com o mesmo nome &lt;em&gt;main&lt;/em&gt;. Mas apenas o método *public static void main(String[] args) é usado para execução.&lt;/p&gt;
&lt;h4&gt;Como se implementa Sobrescrita de Método (Overriding) em Java?&lt;/h4&gt;
&lt;p&gt;Para sobrescrever um método, precisamos implementar um método com o mesmo nome de outro em uma classe filha. Então haverá no mínimo duas implementações do mesmo método. Uma implementação está na classe pai;mãe e outra na classe filha. &lt;/p&gt;
&lt;h4&gt;É permitido sobrescrever um método estático (static) em Java?&lt;/h4&gt;
&lt;p&gt;Não. Java não permite sobrescrita de um método estático. Se você criar um método estático com o mesmo nome em uma classe filha, então vai ser um novo método, não um método sobrescrito.&lt;/p&gt;
&lt;h4&gt;Porque Java não permite sobrescrita de um método estático?&lt;/h4&gt;
&lt;p&gt;Para sobrescrever um método, você precisa de uma instância de uma classe. Métodos estáticos não estão associados com nenhuma instância de uma classe. O conceito de sobrescrita não se aplica aqui.&lt;/p&gt;
&lt;h4&gt;É permitido sobrescrever um método sobrecarregado?&lt;/h4&gt;
&lt;p&gt;Sim, você pode sobrescrever um método sobrecarregado em Java.&lt;/p&gt;
&lt;h4&gt;Qual a diferença entre Sobrecarga de Método e Sobrescrita de Método em Java?&lt;/h4&gt;
&lt;p&gt;As diferenças entre Sobrecarga de Método e Sobrescrita são:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sobrecarga de Método é Polimorfísmo Estático. &lt;/li&gt;
&lt;li&gt;Sobrescrita de Método é Polimorfísmo de Tempo de Execução.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Java permite funções virtuais?&lt;/h4&gt;
&lt;p&gt;Sim, na verdade, todos métodos de instância em Java já são funções virtuais por padrão. Apenas métodos de classe e métodos de instância privados (privado só é acessível pela classe detentora) não são métodos virtuais em Java.&lt;/p&gt;
&lt;h4&gt;O que quer dizer tipo de retorno covariante em Java?&lt;/h4&gt;
&lt;p&gt;Um tipo de retorno covariante é um retorno que pode ser substituído por um tipo mais limitado quando o método é sobrescrito em uma classe filha.&lt;/p&gt;
&lt;p&gt;Vamos dizer que uma classe B é filha de uma classe A. Existe um método &lt;em&gt;get()&lt;/em&gt; na classe A que retorna uma instância de A, e um método &lt;em&gt;get()&lt;/em&gt; na classe B que retorna uma instância de B. A classe B sobrescreve o método &lt;em&gt;get()&lt;/em&gt; mas o tipo de retorno é diferente.&lt;/p&gt;
&lt;p&gt;Antes do Java 5, qualquer método que sobrescrevesse um método de uma classe pai/mãe teria o mesmo tipo de retorno. De Java 5 adiante, uma classe filha pode sobrescrever um método de uma classe pai/mãe e o método da classe filha pode retornar um objeto que seja filho do objeto retornado pelo método da classe pai/mãe.&lt;/p&gt;
&lt;h3&gt;Polimorfísmo&lt;/h3&gt;
&lt;h4&gt;O que é Polimorfísmo de Tempo de Execução?&lt;/h4&gt;
&lt;p&gt;Polimorfísmo de Tempo de Execução ou Polimorfísmo Dinâmico é o polimorfísmo que existe em tempo de execução. No caso de uma sobrescrita de método, não se sabe qual método vai ser chamado em tempo de execução. Com base no tipo de objeto, a JVM vai decidir exatamente qual método deve ser chamado. Então em tempo de compilação não se sabe qual método vai ser chamado em tempo de execução.&lt;/p&gt;
&lt;h4&gt;É possível chegar ao Polimorfísmo de Tempo de Execução por membros de dados em Java?&lt;/h4&gt;
&lt;p&gt;Não. Nós precisamos criar Polimorfísmo de Tempo de Execução implementandos métodos em dois níveis de herânça em Java.&lt;/p&gt;
&lt;h4&gt;Qual a diferença entre Ligação Dinâmica e Ligação Estática (Dynamic/Static Binding)?&lt;/h4&gt;
&lt;p&gt;Em Ligação Estática as referencias são resolvidas em tempo de compilação. Em Ligação Dinâmica as referencias são resolvidas em tempo de execução. &lt;/p&gt;
&lt;p&gt;Exemplo:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Pessoa&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Pessoa&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;andar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Compilador Java vai resolver essa ligação em tempo de compilação.&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;andar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Pessoa&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;andar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// isso é Ligação Dinâmica, observe o Casting!&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;O que é uma classe abstrata em Java?&lt;/h4&gt;
&lt;p&gt;Uma classe abstrata &lt;em&gt;abstract&lt;/em&gt; em Java possui um ou mais métodos abstratos. Um método abstrato
é declarado apenas em uma classe abstrata e não implementado. Uma classe abstrata tem que ser extendida em Java
e seus métodos abstrados devem ser implementados pelas classes que a extende. Também, Java não permite criar novas
instâncias de uma classe abstrata.&lt;/p&gt;
&lt;h4&gt;É permitido marcar um método como &lt;em&gt;abstract&lt;/em&gt; mesmo que a classe não seja abstrata?&lt;/h4&gt;
&lt;p&gt;Não. Na especificação Java, é dito que se existe pelo menos um método abstrato em uma classe, a classe deve ser
definida como &lt;em&gt;abstract&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;É possível definir um método abstrato como sendo &lt;em&gt;final&lt;/em&gt;?&lt;/h4&gt;
&lt;p&gt;Não. Seria contraditório marcar um método abstrato sendo final. Um método abstrato não pode ser sobrescrito por uma classe filha pois o mesmo deve ser implementado por ela, não fazendo sentido a sua sobrescrita. Dessa forma, um método pode ser abstrato ou final em Java.&lt;/p&gt;
&lt;h4&gt;O que é uma interface em Java?&lt;/h4&gt;
&lt;p&gt;Uma interface em Java é o contrato de uma classe. A interface contém os métodos que a classe deve implementar. É um tipo de protocolo. A interface possui as assinaturas dos métodos e as declarações de constantes.&lt;/p&gt;
&lt;h4&gt;É possível marcar um método de uma interface sendo &lt;em&gt;static&lt;/em&gt;?&lt;/h4&gt;
&lt;p&gt;Sim, de Java 8 para frente podemos definir métodos estáticos e métodos padrões em uma interface. Antes de Java 8 isso não era possível.&lt;/p&gt;
&lt;h4&gt;Porque uma interface não pode ter métodos definidos como &lt;em&gt;final&lt;/em&gt; em Java?&lt;/h4&gt;
&lt;p&gt;Um método &lt;em&gt;final&lt;/em&gt; não pode ser sobrescrito. Mas um método de uma interface tem que ser implementado por outra classe. Dessa forma, um método não pode ser definido como &lt;em&gt;final&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;O que é o Marcador de Interface?&lt;/h4&gt;
&lt;p&gt;Existem interfaces que não possui nenhum membro ou método. Esse tipo de interface é chamado Marcador de Interface. Exemplos: Serializable, Cloneable, Remote etc. Em versões anteriores Java, Marcador de Interface era a unica forma de se declarar metadados sobre uma classe. Por exemplo, o Marcador de Interface Serializable permite ao autor de uma classe dizer que sua classe vai se comportar corretamente quando serializada ou deserializada.&lt;/p&gt;
&lt;p&gt;No Java moderno, Marcadores de Interface não possuem mais lugar. Eles podem ser completamente substituidos por Anotações ou &lt;em&gt;Annotations&lt;/em&gt; no qual permite uma forma bem flexivel quanto a definição dos metadados de uma classe. Se você tem alguma informação sobre uma classe que é importânte declarar e essa informação não vai ficar mudando, então Annotations é uma forma bem útil para representa-la.&lt;/p&gt;
&lt;h4&gt;Annotations é melhor que Marcador de Interface?&lt;/h4&gt;
&lt;p&gt;Annotations servem o propósito de conceber metadados sobre uma classe para seus consumidores sem criar um tipo separado para isso. Annotations é uma forma mais poderosa do que Marcadores de Interface. Annotatins permitem aos programadores a passar mais informações mais sofisticadas para classes que as consome.&lt;/p&gt;
&lt;h4&gt;Qual a diferença entre uma classe abstrata e uma interface em Java?&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Uma classe abstrata pode ter métodos implementados em seu corpo (métodos não abstratos). As interfaces possuem apenas métodos abstratos (assinaturas). De Java 8 adiante, interface pode ter métodos padrões e estáticos implementados.&lt;/li&gt;
&lt;li&gt;Uma classe abstrata pode ter variaveis (membros). Uma interface não pode ter variaveis de instância, apenas constantes.&lt;/li&gt;
&lt;li&gt;Uma classe abstrata deve ter um construtor. A interface não tem construtor, o construtor deve ser implementado por outra classe.&lt;/li&gt;
&lt;li&gt;Uma classe pode extender de apenas uma única classe abstrata enquanto que classes podem implementar mais de uma interface.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Java permite o uso de modificadores &lt;em&gt;private&lt;/em&gt; e &lt;em&gt;protected&lt;/em&gt; para variaveis em uma interface?&lt;/h4&gt;
&lt;p&gt;Não. Todas as variaveis em uma interface devem ser implicitamente publicas.&lt;/p&gt;
&lt;h4&gt;Como podemos fazer o &lt;em&gt;cast&lt;/em&gt; de um objeto para uma interface?&lt;/h4&gt;
&lt;p&gt;Um objeto que implementa uma interface pode ser moldado (ser feito o cast) para a mesma interface. Desde que um objeto que implementa uma interface já provê implementação dos métodos daquela interface, lhe é permitido ser alvo de um cast para essa interface pelas regras de herança.&lt;/p&gt;
&lt;p&gt;Cast em Java não é mágica. Você está dizendo ao compilador que um objeto do tipo A é na verdade um tipo mais específico de um tipo B, dai ele ganha acesso a todos os métodos de B que o mesmo não teria se não tivesse feito o Cast. Você não está fazendo nenhum tipo de magia negra quando você faz essa conversão, essencialmente você está dizendo ao compilador “Confie em mim, eu sei o que estou fazendo e eu posso garantir pra você que esse objeto nessa linha é de um tipo X.&lt;/p&gt;
&lt;h3&gt;Final&lt;/h3&gt;
&lt;h4&gt;Como voce pode mudar o valor de uma variavel &lt;em&gt;final&lt;/em&gt; em Java?&lt;/h4&gt;
&lt;p&gt;Java não permite a alteração de variáveis &lt;em&gt;final&lt;/em&gt;. Uma vez que o valor é atribuido, não se pode alterar.&lt;/p&gt;
&lt;h4&gt;Uma classe pode ser definida como &lt;em&gt;final&lt;/em&gt; em Java?&lt;/h4&gt;
&lt;p&gt;Sim, quando a classe é definida como &lt;em&gt;final&lt;/em&gt; em Java, ninguem pode extende-la.&lt;/p&gt;
&lt;h4&gt;Como podemos criar um método &lt;em&gt;final&lt;/em&gt; em Java?&lt;/h4&gt;
&lt;p&gt;Para marcar um método como &lt;em&gt;final&lt;/em&gt; em Java, adicione o modificador para aquele método. Um método &lt;em&gt;final&lt;/em&gt; não pode ser sobrescrito por uma classe filha. Você pode proibir a herança de uma classe a definindo como &lt;em&gt;final&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;Porque a classe Integer é definida como &lt;em&gt;final&lt;/em&gt; em Java?&lt;/h4&gt;
&lt;p&gt;A classe Integer é um container para &lt;em&gt;int&lt;/em&gt;. Se ela não for marcada como &lt;em&gt;final&lt;/em&gt;, qualquer outra classe pode extende-la e modificar o comportamento das operações de Integer ou Inteiros. Para evitar tal situação a classe que envolve os inteiros primitivos &lt;em&gt;int&lt;/em&gt; é marcada como &lt;em&gt;final&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;O que é uma variavel &lt;em&gt;final&lt;/em&gt; em branco em Java?&lt;/h4&gt;
&lt;p&gt;Quando declaramos uma variavel &lt;em&gt;final&lt;/em&gt; sem dar a essa variavel algum valor inicial, então é chamada variavel &lt;em&gt;final&lt;/em&gt; em branco.&lt;/p&gt;
&lt;h4&gt;Como podemos inicializar uma variavel &lt;em&gt;final&lt;/em&gt; em branco?&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Uma instância &lt;em&gt;final&lt;/em&gt; em branco pode ser inicializada em um construtor.&lt;/li&gt;
&lt;li&gt;Uma variavel &lt;em&gt;final&lt;/em&gt; estática pode ser inicializada em um bloco estático de classe.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;É permitido decladar o método &lt;em&gt;main&lt;/em&gt; como &lt;em&gt;final&lt;/em&gt;?&lt;/h4&gt;
&lt;p&gt;Sim, podemos marcar o método &lt;em&gt;main&lt;/em&gt; como &lt;em&gt;final&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Pacotes&lt;/h3&gt;
&lt;h4&gt;Qual o propósito de pacotes em Java?&lt;/h4&gt;
&lt;p&gt;Um pacote é usado para encapsular um grupo de classes, interfaces e sub-pacotes. Frequentemente é uma estrutura hierarquica de armazenar informação. É mais fácil organizar classes relacionadas e sub-pacotes dessa forma. Um pacote também provê proteção de acesso para classes e interfaces. Um pacote também ajuda a remover a problemática da colisão de nomes.&lt;/p&gt;
&lt;h4&gt;O que é o pacote &lt;em&gt;java.lang&lt;/em&gt;?&lt;/h4&gt;
&lt;p&gt;Em Java, o pacote &lt;em&gt;java.lang&lt;/em&gt; contem as classes que são fundamentais para o design da linguagem de programação Java. A classe mais importante neste pacote é a classe &lt;em&gt;Object&lt;/em&gt;. Este pacote também classes que servem o propósito de empacotar tipos primitivos como Integer, Boolean, Character entre outros. Também este pacote provê a classe Math para operações matemáticas.&lt;/p&gt;
&lt;h4&gt;Quais são as classes mais importântes em Java?&lt;/h4&gt;
&lt;p&gt;Essa é uma pergunta com várias respostas. Em uma perspectiva, a classe &lt;em&gt;Object&lt;/em&gt; é a classe mais importânte para linguagem de programação Java. É a raiz de todas as classes em Java. Ela provê métodos importântes e fundamentais.&lt;/p&gt;
&lt;h4&gt;É obrigatório importar o pacote &lt;em&gt;java.lang&lt;/em&gt; toda vez?&lt;/h4&gt;
&lt;p&gt;Não. Por padrão a JVM vai carregar este pacote internamente.&lt;/p&gt;
&lt;h4&gt;Você pode importar o mesmo pacote ou classe duas vezes em sua classe?&lt;/h4&gt;
&lt;p&gt;Se você importar o mesmo pacote mútiplas vezes em uma classe o compilador vai incluir apenas uma vez. Dessa forma mesmo a JVM quanto o compilador não lhe vai produzir nenhum tipo de erro ou aviso por incluir estes pacotes mútilas vezes. Se você tem duas classes com o mesmo nome, então talvez você sofra de colisão de nome. A JVM carrega (internamente) essa classe apenas uma vez.&lt;/p&gt;
&lt;h4&gt;O que é uma importação estática em Java?&lt;/h4&gt;
&lt;p&gt;Importação estática em Java é similar a declaração normal de importação. A importação normal nos permite importar classes de um pacote sem usar qualificador de pacote. A importação estática nos permite importar membros estáticos de uma classe sem usar o qualificador da classe.&lt;/p&gt;
&lt;h4&gt;Qual a diferença entre &lt;em&gt;import static com.test.Testeclass&lt;/em&gt; e &lt;em&gt;import com.test.Testclass&lt;/em&gt;?&lt;/h4&gt;
&lt;p&gt;A primeira importação é estática e a segunda é uma importação normal de uma classe. A primeira nos permite importar membros estáticos de uma classe.&lt;/p&gt;
&lt;h3&gt;Internacionalização&lt;/h3&gt;
&lt;h4&gt;O que é &lt;em&gt;Locale&lt;/em&gt; em Java?&lt;/h4&gt;
&lt;p&gt;Um objeto &lt;em&gt;Locale&lt;/em&gt; em Java representa uma região geográfica, política ou cultural. É usado para operações sensitivas a localização em Java. &lt;em&gt;Locale&lt;/em&gt; ajuda no cumprimento de convenções de um páis ou região. Essas convenções podem ser para formatação de datas, dinheiro ou números etc.&lt;/p&gt;
&lt;h4&gt;Como você pode usar um &lt;em&gt;Locale&lt;/em&gt; específico em Java?&lt;/h4&gt;
&lt;p&gt;Para usar um &lt;em&gt;Locale&lt;/em&gt; específico em Java, precisamos carregar este &lt;em&gt;Locale&lt;/em&gt;. Podemos usar o método &lt;em&gt;ResourceBundle.getBundle(“Locale.UK”)&lt;/em&gt; para carregar o &lt;em&gt;Locale&lt;/em&gt; britânico por exemplo.&lt;/p&gt;
&lt;h3&gt;Serialização&lt;/h3&gt;
&lt;h4&gt;O que é a Serialização?&lt;/h4&gt;
&lt;p&gt;Serialização é o processo de converter um objeto em um array de bytes. Esse array de bytes representa a classe, versão e o estado interno do objeto. A JVM pode usar esse array de bytes para transmitir ou ler o objeto por uma rede.&lt;/p&gt;
&lt;h4&gt;Qual o propósito da Serialização?&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Comunicação: É utilizada para transmitir um objeto entre duas máquinas em rede.&lt;/li&gt;
&lt;li&gt;Persistência: Podemos guardar o estado de um objeto em um banco de dados e recolher depois.&lt;/li&gt;
&lt;li&gt;Caching: Serialização pode ser usada para fazer o caching para melhorar a performance. Podemos precisar de 10 minutos para construir um objeto, porém vai levar 10 segundos para desserializar o objeto.&lt;/li&gt;
&lt;li&gt;Sincronização entre JVM: Pode usar usado da mesma forma entre JVMs que seguem uma arquitetura diferente.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;O que é Desserialização?&lt;/h4&gt;
&lt;p&gt;Desserialização é o processo de reconstruir o objeto de um estado serializado. É o processo inverso de Serialização.&lt;/p&gt;
&lt;h4&gt;O que é Serialização e Desserialização conceitualmente?&lt;/h4&gt;
&lt;p&gt;Serialização é para converter dados &lt;em&gt;Object&lt;/em&gt; em um fluxo de bytes. Desserialização é a conversão desse fluxo de bytes de volta para uma copia de um &lt;em&gt;Object&lt;/em&gt; original.&lt;/p&gt;
&lt;h4&gt;Porque marcados um membro como &lt;em&gt;transient&lt;/em&gt;?&lt;/h4&gt;
&lt;p&gt;Variaveis de um objeto são marcados como &lt;em&gt;transient&lt;/em&gt; para indicar que esses membros não devem ser serializados. Durante o processo de serialização as variaveis do tipo &lt;em&gt;transient&lt;/em&gt; não são consideradas parte do estado persistente de um objeto.&lt;/p&gt;
&lt;h4&gt;É permitido marcar um método como &lt;em&gt;transient&lt;/em&gt;?&lt;/h4&gt;
&lt;p&gt;Não. Java não vai permitir marcar um método como &lt;em&gt;transient&lt;/em&gt;. A palavra-chave &lt;em&gt;transient&lt;/em&gt; é valida apenas para variaveis.&lt;/p&gt;
&lt;h4&gt;Como que marcar um campo como &lt;em&gt;transient&lt;/em&gt; torna possivel a serialização de um objeto?&lt;/h4&gt;
&lt;p&gt;Vamos dizer que uma classe ABC que implementa a interface &lt;em&gt;Serializable&lt;/em&gt; mas contem membros de objeto de uma classe XYZ que não implementam a interface &lt;em&gt;Serializable&lt;/em&gt;. Devido a este motivo, não é possivel serializar a classe ABC. Para resolver este problema, podemos marcar os membros XYZ como &lt;em&gt;transient&lt;/em&gt; na classe ABC. Isso nos vai permitir a serialização de ABC. &lt;/p&gt;
&lt;h4&gt;O que é a interface &lt;em&gt;Externalizable&lt;/em&gt; em Java?&lt;/h4&gt;
&lt;p&gt;A interface &lt;em&gt;Externalizable&lt;/em&gt; extende &lt;em&gt;Serializable&lt;/em&gt; em Java. É utilizada para dar controle a classe em salvar e resgatar conteúdo de suas instâncias. A classe implementa os métodos &lt;em&gt;whiteExternal()&lt;/em&gt; e &lt;em&gt;readExternal()&lt;/em&gt; para guardar e resgatar o objeto.&lt;/p&gt;
&lt;h4&gt;Qual a diferença entre as interfaces &lt;em&gt;Serializable&lt;/em&gt; e &lt;em&gt;Externalizable&lt;/em&gt;?&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Serializable&lt;/em&gt; é um Marcador de Interface equanto &lt;em&gt;Externalizable&lt;/em&gt; não é. Quando implementamos a interface &lt;em&gt;Serializable&lt;/em&gt;, a classe é serializada automaticamente por padrão. Podemos sobrescrever os métodos &lt;em&gt;whiteObject()&lt;/em&gt; e &lt;em&gt;readObject()&lt;/em&gt; para controlar mais processos de serialização complexa de objetos.&lt;/p&gt;
&lt;p&gt;No caso do &lt;em&gt;Exernalizable&lt;/em&gt;, usamos o método &lt;em&gt;readExternal()&lt;/em&gt; e &lt;em&gt;writeExternal()&lt;/em&gt; para oferecer mais controle para classe visando o processo de serialização.&lt;/p&gt;
&lt;p&gt;A interface &lt;em&gt;Serializable&lt;/em&gt; é baseada em algoritmo recursivo e lhe da duas opções. Uma é providenciar uma maneira customizada de serialização e a outra a maneira padrão. Em &lt;em&gt;Externalizable&lt;/em&gt; você tem que implementar os métodos &lt;em&gt;readExternal()&lt;/em&gt; e &lt;em&gt;writeExternal&lt;/em&gt; sempre.&lt;/p&gt;
&lt;p&gt;Um construtor sem argumentos publico é necessário quando você usa a interface &lt;em&gt;Externalizable&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Em serialização, precisamos definir o &lt;em&gt;serialVersionUID&lt;/em&gt;. Se não estiver explicitamente definido, ele sera gerado automaticamente baseado em todos em campos e métodos da classe.&lt;/p&gt;
&lt;h3&gt;Garbage Collection (Coletor de Lixo)&lt;/h3&gt;
&lt;h4&gt;O que é Garbage Collection em Java?&lt;/h4&gt;
&lt;p&gt;Java tem um mecanismo chamado Garbage Collection para retomar memória não utilizada em tempo de execução. Garbage Collection também é conhecido como gerência automática de memória.&lt;/p&gt;
&lt;h4&gt;Porque Java disponibilize o Garbage Collection?&lt;/h4&gt;
&lt;p&gt;Em Java não se tem ponteiros. Gerência e alocação de memória é feita pela JVM. Desde que a alocação de memória é feita automaticamente, depois de um certo tempo a JVM talves venha ter falta de memória. Quando isso ocorre, a JVM tem que liberar memória de objetos que não estão sendo utilizados. Para ajudar nom processo de recuperação de memória, Java dispõe de um processo automático chamado Garbage Collector.&lt;/p&gt;
&lt;h4&gt;Qual o propósito do método &lt;em&gt;gc()&lt;/em&gt; em Java?&lt;/h4&gt;
&lt;p&gt;Java fornece dois métodos &lt;em&gt;System.gc()&lt;/em&gt; e &lt;em&gt;Runtime.gc()&lt;/em&gt; para requisitar a JVM que rode o Garbage Collection. Usando esses métodos, programadores podem explicitamente enviar requisições de Garbage Collection. Mas o processo da JVM pode rejeitar essa requisição e aguardar por um certo tempo antes de rodar o coletor de lixo.&lt;/p&gt;
&lt;h4&gt;Como o Garbage Collection funciona em Java?&lt;/h4&gt;
&lt;p&gt;Java tem um processo automático chamado Garbage Collector para gerência de memória. É um daemon na JVM que monitora o uso de memória e faz limpeza da mesma. Uma vez que a JVM está com falta de memória, o processo GC encontra objetos que não estão sendo referenciados em lugar nenhum (inutilizados) e os limpa da memória.&lt;/p&gt;
&lt;h4&gt;Quando um objeto é elegido para Garbage Collection em Java?&lt;/h4&gt;
&lt;p&gt;Um objeto pode ser coletado pela JVM por meio do Coletor de Lixo se ele não é acessável. Existem dois casos no qual um objeto pode ser elegido para Garbage Collection:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Uma instância de um objeto não pode ser acessada por uma thread viva.&lt;/li&gt;
&lt;li&gt;Um conjunto de instâncias com referências circulares não podem ser alcançadas por nenhuma outra instância fora do conjunto.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Por que utilizamos um método &lt;em&gt;finalize()&lt;/em&gt; em Java?&lt;/h4&gt;
&lt;p&gt;Java disponibiliza o método &lt;em&gt;finalize()&lt;/em&gt; para fazer qualquer limpeza antes do Garbage Collection. Esse método está na classe &lt;em&gt;Object&lt;/em&gt; e é chamado pela JVM internamente. Desenvolvedores estão livres para implementar esse método para qualquer tipo de limpeza customizada no caso de Garbage Collection. &lt;/p&gt;
&lt;p&gt;Se um &lt;em&gt;Object&lt;/em&gt; não é coletado pelo Garbage Collector, então esse método não vai ser chamado. Esse método nunca é chamado mais de uma vez pela JVM.&lt;/p&gt;
&lt;h4&gt;Quais são os diferentes tipos de referências em Java?&lt;/h4&gt;
&lt;p&gt;Em Java existem quatro tipos de referências:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Forte&lt;/li&gt;
&lt;li&gt;Macia&lt;/li&gt;
&lt;li&gt;Fraca&lt;/li&gt;
&lt;li&gt;Fantasma&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Como podemos referênciar um objeto desreferênciado novamente?&lt;/h4&gt;
&lt;p&gt;Podemos provêr implementação no método &lt;em&gt;finalize()&lt;/em&gt; para referênciar e desreferênciar objeto. Para objetos desreferênciados, &lt;em&gt;finalize()&lt;/em&gt; vai ser chamado no tempo de Garbage Collection. Nesse tempo, o objeto passa sua referência &lt;em&gt;this&lt;/em&gt; para o método &lt;em&gt;finalize()&lt;/em&gt; e se revive.&lt;/p&gt;
&lt;h4&gt;Qual tipo de processo é o thread de Garbage Collection?&lt;/h4&gt;
&lt;p&gt;Garbage Collection é um processo do tipo Daemon (Daemon é tipo de processo que fica rodando no background e que lida com requisições para serviços como spooling de impressão e transferência de arquivos, ele dorme quando não está sendo requisitado) dentro da JVM. É um processo interno que fica verificando o uso de memória e que a limpa quando necessário.&lt;/p&gt;
&lt;h4&gt;Qual o propósito da classe &lt;em&gt;Runtime&lt;/em&gt;?&lt;/h4&gt;
&lt;p&gt;O propósito da classe &lt;em&gt;Runtime&lt;/em&gt; é disponibilizar acesso para o sistema de tempo de execução em Java. Essa classe disponibiliza métodos importântes como:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Runtime.freeMemory()&lt;/em&gt; - esse método retornar o valor livre de memória na JVM.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Runtime.maxMemory()&lt;/em&gt; - esse método retorna o valor livre máximo de memória que a JVM pode utilizar.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Runtime.gc()&lt;/em&gt; - Esse método pode ser chamado para invocar o Garbage Colleciton.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Como podemos invocar um processo externo em Java?&lt;/h4&gt;
&lt;p&gt;Java disponibiliza o método &lt;em&gt;Runtime.getRuntime().exec()&lt;/em&gt; para invocar um processo externo da JVM.&lt;/p&gt;
&lt;h4&gt;Quais são os usos da classe &lt;em&gt;Runtime&lt;/em&gt;?&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Lhe permite ler dados dos teclado&lt;/li&gt;
&lt;li&gt;Lhe permite usar propriedades do sistema e variáveis de ambiente&lt;/li&gt;
&lt;li&gt;Lhe ajuda a rodar programas que não são Java dentro de uma aplicação Java&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[KDD vs SEMMA]]></title><description><![CDATA[Knowledge Discovery in Databases ‘Processo não trivial, de extração de informações implícitas, previamente desconhecidas e potencialmente…]]></description><link>https:igoroctaviano.com/blog/kdd-vs-semma/</link><guid isPermaLink="false">https:igoroctaviano.com/blog/kdd-vs-semma/</guid><pubDate>Sun, 28 Aug 2016 00:11:00 GMT</pubDate><content:encoded>&lt;h2&gt;Knowledge Discovery in Databases&lt;/h2&gt;
&lt;p&gt;‘Processo não trivial, de extração de informações implícitas, previamente desconhecidas e potencialmente úteis,
a partir dos dados armazenados em um banco de dados.’&lt;/p&gt;
&lt;p&gt;O processo é não trivial já que alguma técnica de busca ou inferência é envolvida, ou seja, não é apenas um processo
de computação direta. Os padrões descobertos devem ser válidos com algum grau de certeza, novos (para o sistema e de
preferência também para o usuário), potencialmente úteis e compreensíveis.&lt;/p&gt;
&lt;p&gt;O processo &lt;strong&gt;KDD&lt;/strong&gt;, como foi apresentado por Fayyad, é o processo de usar métodos de &lt;strong&gt;Data Mining&lt;/strong&gt; para extrair o que é
considerado conhecimento em acordo com a especificação de metricas e limiares. São considerados &lt;strong&gt;5 estágios&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Seleção&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Esse estágio consiste em criar uma coleção de dados alvo, ou focar em um sub conjunto de variáveis ou dados simples, nos quais a descoberta e feita.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pre processamento&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Esse estágio consiste na limpeza dos dados alvo e o seu pre processamento visando obter dados consistentes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Transformação&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Esse estágio consiste na transofrmação dos dados reduzindo as suas dimensões ou métodos de transformação.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data Mining&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Esse estágio consiste na busca por padrões de interesse numa particular forma representacional, dependendo do objetivo do data mining.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interpretação/Avaliação&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Esse estágio consiste na interpretação e avaliação dos padrões mineirados.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;O processo &lt;strong&gt;KDD&lt;/strong&gt; é interativo e iterativo, envolvendo vários passos com várias decisões sendo feitas pelo usuário.
Adicionalmente, o processo &lt;strong&gt;KDD&lt;/strong&gt; deve proceder pelo desenvolvimento do conhecimento do dominio da aplicação, o conhecimento
relevante pŕevio e os objetivos do usuário final. Também deve ser continuada pela consolidação de conhecimento encorporando
esse conhecimento no sistema.&lt;/p&gt;
&lt;h2&gt;SEMMA&lt;/h2&gt;
&lt;p&gt;SEMMA desenvolvido pela SAS Institute, refere-se ao processo de conduzir um projeto de &lt;strong&gt;Data Mining&lt;/strong&gt;. A SAS Institute considera um ciclo com &lt;strong&gt;5 estágios&lt;/strong&gt; para o processo:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Amostragem&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Esse estágio consiste na amostragem dos dados extraindo uma porção de uma grande coleção de dados, suficientemente grande para conter a informação significante, pequeno o suficiente para manipular rapidamente. Esse estágio é apontado como sendo opcional.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explorar&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Esse estágio consiste na exploração dos dados, buscando por tendencias não antecipadas e anomalias, de forma a ganhar entendimento e ideias.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Modificar&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Esse estágio consiste na modificação dos dados, criando, selecionando e transformando as variáveis para focar no processso de seleção do modelo.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Modelo&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Esse estágio consiste na modelagem dos dados permitindo o software a buscar automaticamente por uma combinação de dados que fielmente prevê um resultado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avaliar&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Esse estágio consiste na avaliação dos dados, avaliando a usabilidade e confiabilidade dos resultados do processod e &lt;strong&gt;Data Mining&lt;/strong&gt; e a estimativa de quão bem é executado.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Embora o processo &lt;strong&gt;SEMMA&lt;/strong&gt; seja independente da ferramente de &lt;strong&gt;Data Mining&lt;/strong&gt; escolhida, o &lt;strong&gt;SEMMA&lt;/strong&gt; e relacionado ao software SAS Enterprise Minere pretende guiar o usuário na implementação de aplicações de &lt;strong&gt;Data Mining&lt;/strong&gt;.
&lt;strong&gt;SEMMA&lt;/strong&gt; oferece uma forma fácil de entender processo, permitindo o desenvolvimento e a manutenção de forma organizada e adequada em projetos de &lt;strong&gt;Data Mining&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;KDD vs SEMMA&lt;/h2&gt;
&lt;p&gt;Comparando os estágios do KDD com os do SEMMA, em primeira instância, afirmamos que são equivalentes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sample (Amostra) pode ser identificada com Selection (Seleção)&lt;/li&gt;
&lt;li&gt;Explore (Explorar) pode ser identificado com Pre processing (Pré processamento)&lt;/li&gt;
&lt;li&gt;Modify (Modificar) pode ser identificado com Transformation (Transformação)&lt;/li&gt;
&lt;li&gt;Model (Modelo) pode ser identificado com Data Mining (Mineração de Dados)&lt;/li&gt;
&lt;li&gt;Assess (Avaliação) pode ser identificado com Interpretation/Evaluation (Interpretação/Avaliação)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examinando como um todo, podemos afirmar que os cinco estágios do processo SEMMA podem ser vistos como uma implementação pratica dos cinco estágios do processo KDD, desde que o SEMMA é diretamente ligado ao software SAS Enterprise Miner.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;KDD&lt;/th&gt;
&lt;th&gt;SEMMA&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Selection&lt;/td&gt;
&lt;td&gt;Sample&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pre-processing&lt;/td&gt;
&lt;td&gt;Explore&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Transformation&lt;/td&gt;
&lt;td&gt;Modify&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data mining&lt;/td&gt;
&lt;td&gt;Model&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Interpretation/Evaluation&lt;/td&gt;
&lt;td&gt;Assessment&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;p&gt;&lt;sub&gt;Fayyad, U. M. et al. 1996. From data mining to knowledge discovery: an overview. In Fayyad, U. M.et al (Eds.),
Advances in knowledge discovery and data mining. AAAI Press / The MIT Press.&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;Benoît, G., 2002. Data Mining. Annual Review of Information Science and Technology, Vol. 36, No. 1, pp 265-310.&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;Brachman, R. J. &amp;#x26; Anand, T., 1996. The process of knowledge discovery in databases. In Fayyad, U. M. et al. (Eds.),
Advances in knowledge discovery and data mining. AAAI Press / The MIT Press.&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;Chen, M. et al, 1996. Data Mining: An Overview from a Database Perspective. IEEE Transactions on Knowledge and
Data Engineering, Vol. 8, No. 6, pp 866-883.&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;Simoudis, E., 1996. Reality check for data mining. IEEE Expert, Vol. 11, No. 5, pp 26-33.&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;Fayyad, U. M., 1996. Data mining and knowledge discovery: making sense out of data. IEEE Expert, Vol. 11 No. 5, pp
20-25.&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;Dzeroski, S., 2006. Towards a General Framework for Data Mining.. In Dzeroski, S and Struyf, J (Eds.), Knowledge
Discovery in Inductive Databases. LNCS 47474. Springer-Verlag.&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;Han, J. et al, 1996. DMQL: A Data Mining Query Language for Relational Databases. In proceedings of DMKD-96
(SIGMOD-96 Workshop on KDD). Montreal. Canada.&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;Meo, R. e tal, 1998. An Extension to SQL for Mining Association Rules. Data Mining and Knowledge Discovery Vol. 2,
pp 195-224. Kluwer Academic Publishers.&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;Imielinski, T.; Virmani, A., 1999. MSQL: A Query Language for Database Mining. Data Mining and Knowledge
Discovery Vol. 3, pp 373-408. Kluwer Academic Publishers.&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;Sarawagi, S. et al, 2000. Integrating Association Rule Mining with Relational Database Systems: Alternatives and
Implications. Data Mining and Knowledge Discovery, Vol. 4, pp 89–125.&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;Botta, Marco, et al, 2004. Query Languages Supporting Descriptive Rule Mining: A Comparative Study. Database
Support for Data Mining Applications. LNAI 2682, pp 24-51.&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;SAS Enterprise Miner – SEMMA. SAS Institute.&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;Accessed from &lt;a href=&quot;http://www.sas.com/technologies/analytics/datamining/miner/semma.html&quot;&gt;http://www.sas.com/technologies/analytics/datamining/miner/semma.html&lt;/a&gt;, on May 2008
Santos, M &amp;#x26; Azevedo, C (2005). Data Mining – Descoberta de Conhecimento em Bases de Dados. FCA Publisher.&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;Chapman, P. et al, 2000. CRISP-DM 1.0 - Step-by-step data mining guide.&lt;/sub&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Sistemas Operacionais]]></title><description><![CDATA[Sistemas Operacionais Programa ou um conjunto de programas cuja função é gerenciar os recursos do sistema (definir qual programa recebe…]]></description><link>https:igoroctaviano.com/blog/sistemas-operacionais-exercicios.md/</link><guid isPermaLink="false">https:igoroctaviano.com/blog/sistemas-operacionais-exercicios.md/</guid><pubDate>Sat, 23 Apr 2016 11:28:00 GMT</pubDate><content:encoded>&lt;h2&gt;Sistemas Operacionais&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Programa ou um conjunto de programas cuja função é gerenciar os recursos do sistema (definir qual programa recebe atenção do processador, gerenciar memória, criar um sistema de arquivos, etc.), fornecendo uma interface entre o computador e o usuário.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;sub&gt;&lt;em&gt;Dedico esse post a todos os alunos da disciplina de SO e a mim :D, numa forma de fixar o conteúdo.&lt;/em&gt;&lt;/sub&gt;&lt;/p&gt;
&lt;h3&gt;GERÊNCIA MEMÓRIA E MEMÓRIA VIRTUAL&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Ex 1: (PROVA 3 SO SI-M/JOGOS de 2007 a 2013 e PAC 2011 a 2013)&lt;/strong&gt;
Considerando um espaço de endereçamento virtual de &lt;strong&gt;512 MiB&lt;/strong&gt; e uma
memória física &lt;strong&gt;8 MiB&lt;/strong&gt; e utilizando-se páginas de &lt;strong&gt;2 Kbytes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.1&lt;/strong&gt; Determinar o número de bits necessários para os endereços
(lógicos e físicos), o número de páginas de memória virtual
e o número de “frames” ou molduras (páginas de memória física).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.2&lt;/strong&gt; Determinar a quantidade de páginas endereçáveis na memória
virtual desse sistema.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.3&lt;/strong&gt; Supondo que esse sistema disponha de 16 páginas ou
blocos físicos de memória, mostre a tabela de páginas deste
sistema com os seguintes mapeamentos: 0 -&gt; 5, 1 -&gt; 2, 2 -&gt; 10,
3 -&gt; indisponível, 4 -&gt; 8, 5 -&gt; 3.&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;1.4&lt;/strong&gt; Traduza os seguintes endereços lógicos em endereços físicos: 0x02C5, 0x2162, 0x3B34.&lt;/p&gt;
&lt;h4&gt;Resolução&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1.1.1&lt;/strong&gt; Encontrar o número de bits endereçáveis
para os endereços lógicos e físicos (ou MV e MF):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Sendo NbEMV o número de bits endereçáveis da memória virtual
e NbEMP o número de bits endereçáveis da memória física, temos:

NbEMV = 2^NbEMV = MV = 512MiB = 2^9 x 2^20 = 2^29 = 29.
Então temos 29 bits endereçaveis da memória virtual.

NbEMP = 2^NbEMP = MP = 8MiB = 2^3 x 2^20 = 2^23 = 23.
Então temos 23 bits endereçaveis da memória física.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;1.1.2&lt;/strong&gt; Depois calculamos o número de páginas de memória virtual:&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;MV (Memória Virtual)&lt;/sub&gt;&lt;br&gt;
&lt;sub&gt;MP (Memória Principal ou Memória Física)&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Número de Páginas Virtuais = MV/P = 512MiB / 2KiB = (2^9 x 2^20) / 2^11 = 
(2^29 / 2^11) = 2^18 = (4 x 65536) = 262144.
Então temos 262144 páginas virtuais.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;1.1.3&lt;/strong&gt; O segundo passo é encontrar quantos frames há de memória física:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;MF/P = (8MiB / 2KiB) = (2^3 x 2^20) / 2^11 = 2^12 = 4096.
Então temos 4096 páginas físicas.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;1.2&lt;/strong&gt; Como foi colocado o exercício, estamos utilizando utilizando páginas
de &lt;strong&gt;2 Kbytes&lt;/strong&gt;. Então o número de bits de página endereçáveis:&lt;/p&gt;
&lt;p&gt; &lt;sub&gt;Sendo P a página e NbEP os números de bits endereçáveis da página.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; 2^NbEP = P = 2Kbytes = 2^11 = 11 bits endereçaveis.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;1.4 a)&lt;/strong&gt; Para determinar o endereço físico ao endereço virtual 0:&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;Sendo EV o endereço físico e PF a página física,&lt;/sub&gt;&lt;br&gt;
&lt;sub&gt;Verificamos que a PF correspondende de 0 é 5 de acordo com o mapeamento.&lt;/sub&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;EV = 0
PF = 5

   PF binário  | Deslocamento = 11      
_______________|_____________
0...0000 0010 1|000 0000 0000
     Ox   2    8     0    0
  
R = EV = 0 -&amp;gt; EF = 0x2800.
O endereço físico da pagina virtual é Ox2800.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;Recomendo a leitura dos livros do &lt;a href=&quot;https://pt.wikipedia.org/wiki/Andrew_Stuart_Tanenbaum&quot;&gt;Tanenbaum&lt;/a&gt;, ele é o autor do &lt;a href=&quot;https://pt.wikipedia.org/wiki/MINIX&quot;&gt;MINIX&lt;/a&gt;, um sistema operacional baseado no Unix com propósito educacional, e é bastante conhecido por seus livros sobre ciência da computação. &lt;em&gt;O cara é professor de muitos, fato&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.amazon.com.br/gp/product/8576052377/ref=s9_acsd_simh_se_c_x_2?pf_rd_m=A1ZZFT5FULY4LN&amp;#x26;pf_rd_s=search-desktop-advertising-no-results-center-1&amp;#x26;pf_rd_r=M1PHC98PBWX53VCQ1KF3&amp;#x26;pf_rd_t=301&amp;#x26;pf_rd_p=1962514502&amp;#x26;pf_rd_i=operating%20systems%20tanenbum&quot;&gt;Sistemas Operacionais Modernos – 26 nov 2009 por Andrew S. Tanenbaum&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Achou o assunto interessante? tem tem um livro legal do Silberschatz em Java &lt;a href=&quot;https://www.amazon.com.br/Sistemas-Operacionais-Java-Greg-Gagne/dp/8535224068&quot;&gt;aqui&lt;/a&gt;, e caso.. você tiver sem tempo pra estudar e quer uma boa introdução no assunto, vai com o conhecido¹ “Livro dos Dinossauros” &lt;a href=&quot;https://www.amazon.com.br/Fundamentos-Sistemas-Operacionais-Princ%C3%ADpios-B%C3%A1sicos/dp/8521622058/ref=sr_1_4?s=books&amp;#x26;ie=UTF8&amp;#x26;qid=1461595743&amp;#x26;sr=1-4&quot;&gt;aqui.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;1. por mim&lt;/sub&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Programação Imperativa vs Funcional]]></title><description><![CDATA[A alguns dias venho pesquisando sobre paradigmas para um seminário na disciplina de Frameworks, sinceramente,
existe muito conteúdo a…]]></description><link>https:igoroctaviano.com/blog/imperativa-vs-funcional.md/</link><guid isPermaLink="false">https:igoroctaviano.com/blog/imperativa-vs-funcional.md/</guid><pubDate>Sun, 27 Mar 2016 15:51:00 GMT</pubDate><content:encoded>&lt;p&gt;A alguns dias venho pesquisando sobre paradigmas para um seminário na disciplina de Frameworks, sinceramente,
existe muito conteúdo a respeito deles, mas não custa nada escrever mais um pouco e com certeza também há que precise
e goste de alguns resumos como eu.&lt;/p&gt;
&lt;h3&gt;Programação Imperativa vs Programação Funcional&lt;/h3&gt;
&lt;p&gt;Bom, a idéa desse post é clarear um pouco a mente (no sentido de introdução) quanto aos paradigmas imperativos e funcionais.
No final da publicação há referências para um estudo mais amplo sobre os paradigmas (dica: o bom estudo em paradigmas de
programação é a prória programação em linguagens de paradigmas distintos e “botar a mão na massa”), aqui, cabe uma concatenação
de boas explicações que encontrei, juntamente a algumas colocações que eu venho trabalhando.&lt;/p&gt;
&lt;h3&gt;Programação Imperativa&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;Programação Imperativa&lt;/strong&gt; é o que a maioria dos programadores profissionais usam em seus trabalhos do dia-a-dia.
É o nome dado a linguagens como C, C++, Java, COBOL, etc. Na programação imperativa, você vai dizer ao computador o que fazer.
“Computador, adicione x e y”, ou “Computador, mostre uma caixa de diálogo na tela.” E (geralmente) o computador vai realizar a terefa.
Este é o lugar onde a maioria de nós gastamos nossas vidas, em estruturas de loop e declarações if-then-else e afins.&lt;/p&gt;
&lt;h3&gt;Programação Funcional&lt;/h3&gt;
&lt;p&gt;A Programação funcional, tanto quanto eu entendo, procura &lt;strong&gt;descrever o que você quer fazer, em vez de especificar como você quer que seja
feito&lt;/strong&gt;. É provavelmente melhor entendida em contraste com a programação imperativa.
Por exemplo, se você tem uma lista em C e você quer retirar todos os enésimos elementos, você tem que apontar para o primeiro elemento,
definir um contador em um, passar para o próximo elemento, incrementar o contador, verificar para ver se você está no enésimo
elemento e assim por diante. O equivalente funcional seria escrever uma função que reconhece quando o tamanho de uma lista é
um múltiplo de N, em seguida, passar essa função para a lista, possivelmente com um outro trecho de código para devolver a cabeça
da lista (sentinela) se o enésimo reconhecedor for avaliado como verdadeiro e descartá-lo se for avaliado como falso.
As duas funções recursam através da lista, e finalmente, devolve uma lista que consiste em todos os enésimos elementos.&lt;/p&gt;
&lt;p&gt;O último método pode parecer o caminho mais confuso de fazer as coisas, e isso é porque é. A programação funcional pode ser
um mind-bender (frita sua cabeça), que é uma razão pela qual as linguagens funcionais Lisp, Scheme, e Haskell nunca realmente
superaram C, C++, Java e COBOL em popularidade comercial. Mas há benefícios para a forma funcional. Por um lado,
se você pode obter a lógica correta, &lt;strong&gt;a programação funcional requer ordens de magnitude em menos código que programação imperativa&lt;/strong&gt;.
Isso significa menos pontos de falha, menos código para testar, e uma mais produtiva (e, muitos diriam, mais feliz) vida de programação.
Como os sistemas ficam maiores, esta tornou-se cada vez mais importante.&lt;/p&gt;
&lt;h2&gt;Resumo&lt;/h2&gt;
&lt;p&gt;Em linguagens imperativas você vai dizer ao computador como alterar os bits, bytes e palavras em sua memória e em que ordem.
Em linguagens funcionais, você vai dizer ao computador, o que as coisas, ações etc, são. Por exemplo, podemos dizer que o fatorial
de 0 é 1, e o fatorial de qualquer outro número natural é o produto desse número e o fatorial de seu antecessor. Nós não dizemos:
Para calcular o fatorial de n, reservar uma região de memória e armazenar 1 lá, em seguida, multiplicar o número naquela região
de memória com os números 2 a N e armazenar o resultado no mesmo lugar, e no final, a região da memória conterá o fatorial.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;Mais? segue…&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pt.wikipedia.org/wiki/The_C_Programming_Language&quot;&gt;K&amp;#x26;R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mitpress.mit.edu/sicp/&quot;&gt;Wizard Book - SICP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/602444/what-is-functional-declarative-and-imperative-programming&quot;&gt;What is functional declarative and imperative programming language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=7Zlp9rKHGD4&quot;&gt;Robert C Martin - Functional Programming; What? Why? When?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Complexidade Ciclomática]]></title><description><![CDATA[Obra de Thomas J. McCabe, ..reflete diretamente o número de caminhos independentes que um programa pode tomar durante a sua execução. Esse…]]></description><link>https:igoroctaviano.com/blog/complexidade-ciclomatica/</link><guid isPermaLink="false">https:igoroctaviano.com/blog/complexidade-ciclomatica/</guid><pubDate>Tue, 22 Mar 2016 21:23:00 GMT</pubDate><content:encoded>&lt;h3&gt;Obra de Thomas J. McCabe,&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;..reflete diretamente o número de caminhos independentes que um programa pode tomar durante a sua execução.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Esse post é dedicado aos colegas da disciplina de &lt;em&gt;Introdução a Testes de Software&lt;/em&gt;, mas
qualquer desenvolvedor que já trabalhou com testes, tem conhecimento de que a quantidade
de casos de testes necessários para exercitar um determinado trecho de código é diretamente
proporcional à &lt;a href=&quot;https://pt.wikipedia.org/wiki/%C3%81rvore_de_decis%C3%A3o&quot;&gt;árvore decisória&lt;/a&gt;.
O que em outras palavras, quanto mais caminhos de código puder tomar (seja por meios de condicionais ou loops),
maior a quantidade de testes necessários. Abaixo veremos que há uma relação direta entre a &lt;strong&gt;complexidade ciclomática&lt;/strong&gt;
e a cobertura de um código.&lt;/p&gt;
&lt;h3&gt;Calculando a complexidade ciclomática&lt;/h3&gt;
&lt;p&gt;Um exemplo:
Supondo que você esteja desenvolvendo um programa que lhe retorne o maior divisor comum entre dois números. Uma fórmula
simples é o &lt;a href=&quot;https://pt.wikipedia.org/wiki/Algoritmo_de_Euclides&quot;&gt;Algoritmo de Euclides&lt;/a&gt; que pode ser descrito da seguinte forma:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dados dois números naturais a e b, verifique se b é zero. Se sim, a é o maior divisor comum entre os mesmos; caso contrário, repita o processo usando b e o resto da divisão de a por b.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Esse algoritmo pode ser expresso pelo seguinte programa em Ruby (note que ele não está em Ruby idiomático):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;test/unit&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;euclid&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; m
    r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m
    m &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; n
    n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; r
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
  r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; n
  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; r &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
    m &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; n
    n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; r
    r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; n
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
  n
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EuclidTest&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TestCase&lt;/span&gt;
  
  &lt;span class=&quot;token constant&quot;&gt;SETS&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;test_euclid&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;SETS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;set&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
      assert_equal set&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; euclid&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; set&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;
  
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Se o programa acima for executado, ele rodará o caso de teste logo abaixo da função que verificará se a mesma está correta. Você pode adicionar mais casos ao conjunto SETS se desejar.&lt;/p&gt;
&lt;p&gt;A função euclid pode ser descrita por um grafo simples que conecta os caminhos entre as várias declarações que a mesma contém. Esse grafo é o mostrado abaixo (clique para expandir):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/grafo1.png&quot; alt=&quot;Grafo&quot;&gt;&lt;/p&gt;
&lt;p&gt;Com base nesse grafo, podemos definir a complexidade ciclomática de um programa da seguinte forma:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;CC&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;C&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nessa fórmula:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CC é a complexidade ciclomática&lt;/li&gt;
&lt;li&gt;A é o número de arestas do grafo&lt;/li&gt;
&lt;li&gt;N é o número de nós do grafo&lt;/li&gt;
&lt;li&gt;C é o número de componentes conectados&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Como se trata de uma função simples com um único ponto de entrada e saída, o número de componentes é 1 e a fórmula pode ser reduzida para:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;CC&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Se a função possuísse múltiplos pontos de saída, entretanto, a complexidade ciclomática seria definida como:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;CC&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;R&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nessa fórmula, R é o número de declarações de saída (em Ruby, o número de returns).&lt;/p&gt;
&lt;p&gt;Voltando ao grafo mostra na figura, vemos que o mesmo possui 11 nós e 12 arestas, o que nós dá uma complexidade ciclomática de &lt;strong&gt;12 - 11 + 2&lt;/strong&gt;, ou seja, &lt;strong&gt;3&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Uma outra maneira bem simples de descobrir a complexidade ciclomática é contar o número de loops fechados no grafo (que são formados por condicionais e loops) e somar ao número de pontos de saída. No grafo acima, temos 2 loops fechados (os if e while) e um ponto de saída, resultando no mesmo valor &lt;strong&gt;3&lt;/strong&gt; para a complexidade da função.&lt;/p&gt;
&lt;h3&gt;Decomposição&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/grafo3.png&quot; alt=&quot;Grafo&quot;&gt;&lt;/p&gt;
&lt;p&gt;Uma segunda simplificação do cálculo de &lt;strong&gt;A - N + 2C&lt;/strong&gt; reduz o cálculo de inspeção visual
do grafo de controle. Nós vamos precisar da formula de Euler na qual:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Se G é um grafo plano conexo com N vértices, A arestas e R regiões, então &lt;strong&gt;N - A + R = 2&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Apenas mudando a ordem dos termos, logo temos &lt;strong&gt;R = A - N + 2&lt;/strong&gt;, então &lt;strong&gt;o numero de regiões
ou (faces do grafo) = complexidade ciclomática&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;A complexidade permanece a mesma quando a sintaxe de uma linguagem é levada em questão sem alterar a semântica do programa. Tome por exemplo a versão idiomática do algoritmo em Ruby:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ruby&quot;&gt;&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token method-definition&quot;&gt;&lt;span class=&quot;token function&quot;&gt;euclid&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  m&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; m &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; m
  m&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; m &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; n &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; m &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
  n
&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;O grafo gerado nesse caso é (clique para expandir):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/grafo2.png&quot; alt=&quot;Grafo&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;&lt;em&gt;Note que embora o número de nós e arestas tenha mudado, a relação entre eles não mudou e a complexidade permanece a mesma.&lt;/em&gt;&lt;/sub&gt;&lt;/p&gt;
&lt;h3&gt;Testando&lt;/h3&gt;
&lt;p&gt;De uma forma geral, o valor da complexidade ciclomática define um limite superior para a quantidade de testes necessários para cobrir todos os caminhos decisórios no código em questão. Esse é um limite superior já que nem todos os caminhos são necessariamente realizáveis.&lt;/p&gt;
&lt;p&gt;Disso se infere que quanto menor a complexidade, menor a quantidade de testes necessários &lt;strong&gt;para o método em questão&lt;/strong&gt;. Esse fato implica em outro curioso: quebra um método em vários reduz a complexidade dos métodos mas aumenta a complexidade geral do código e, de forma geral, mantém a testabilidade do programa completo no mesmo nível.&lt;/p&gt;
&lt;h3&gt;Mas há um referêncial?&lt;/h3&gt;
&lt;p&gt;Já que a complexidade é um valor específico, é possível ter uma referência. Baseado no trabalho de McCabe, esses valores de referência são:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1-10, métodos simples, sem muito risco&lt;/li&gt;
&lt;li&gt;11-20, métodos medianamente complexos, com risco moderado&lt;/li&gt;
&lt;li&gt;21-50, métodos complexos, com risco alto&lt;/li&gt;
&lt;li&gt;51 ou mais, métodos instáveis de altíssimo risco&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Conclusão&lt;/h3&gt;
&lt;p&gt;Essa foi uma pequena introdução ao assunto com o objetivo de abrir o caminho para artigos posteriores mostrando ferramentas de apoio ao cálculo e monitoramento da complexidade ciclomática. Como de usual, sugestões e correções são bem vindos.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Você pode saber mais sobre Complexidade Ciclomática no artigo de McCabe pela IEEE TRANSACTIONS ON SOFTWARE ENGINEERING, VOL. SE-2, NO.4, em dezembro de 1976, &lt;a href=&quot;http://www.literateprogramming.com/mccabe.pdf&quot;&gt;aqui&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Template Method e Strategy]]></title><description><![CDATA[Separar algoritmos dos detalhes de sua implementação, óh “REUTILIZAÇÃO”. A melhor estratégia na vida é a diligência.  -Provérbio chines Acho…]]></description><link>https:igoroctaviano.com/blog/template-e-strategy/</link><guid isPermaLink="false">https:igoroctaviano.com/blog/template-e-strategy/</guid><pubDate>Tue, 09 Feb 2016 00:49:00 GMT</pubDate><content:encoded>&lt;h3&gt;Separar algoritmos dos detalhes de sua implementação, óh “REUTILIZAÇÃO”.&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;A melhor estratégia na vida é a diligência.  -Provérbio chines&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Acho super interessante quando o estudo é feito pela diferença, ou seja, quando se estuda algum campo utilizando heurísticas e até mesmo metáforas. Mas como assim? bom, podemos pensar que nós nos demos conta de alguma coisa pela noção de uma variação da mesma, como a própria temperatura, em que sabemos que existe, porque afinal, existem variações dela, mas que se fosse uma constante, como é que a teríamos percebido? Então, acho interessante estudar comparando, é mais fácil e interessante também. Mas como tudo tem outro lado, nem TUDO é possível estudar assim, mas neste caso, ficou bem mais produtivo e esclarecedor.&lt;/p&gt;
&lt;p&gt;Ambos &lt;strong&gt;Template Method&lt;/strong&gt; e &lt;strong&gt;Strategy&lt;/strong&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;(padrões de projeto)&lt;/a&gt; resolvem o problema de separar um algoritmo genérico de um contexto detalhado. Nós frequentemente vemos a necessidade disso no design do software. Nós temos um algoritmo que é genéricamente aplicável. Em ordem para conformar com o Dependency-Inversion Principle (DIP), nós queremos
nos assegurar que o algoritmo genérico não dependa dos detalhes de sua implementação. Ainda mais,
nós queremos que este algoritmo genérico e os seus detalhes de implementação dependam em abstrações.&lt;/p&gt;
&lt;h2&gt;TEMPLATE METHOD&lt;/h2&gt;
&lt;p&gt;Considere todos os programas em que você já tenha escrevido. Vários provavelmente tem essa estrutura &lt;em&gt;main loop&lt;/em&gt; fundamental:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token function&quot;&gt;Initialize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;  While &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// main loop&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;token function&quot;&gt;Idle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// do something useful.&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;  &lt;span class=&quot;token function&quot;&gt;Cleanup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Antes de mais nada, nós inicializamos a aplicação. Então nós entramos no &lt;em&gt;main loop&lt;/em&gt;, onde nós fazemos o
que quer que o programa necessite fazer. Nós talvez processamos eventos de interface de usuário ou talvez algumas
gravações no banco de dados. Finalmente, uma vez que terminamos, saimos do &lt;em&gt;main loop&lt;/em&gt; e limpamos tudo antes de sair.&lt;/p&gt;
&lt;p&gt;Essa estrutura é tão comum que podemos a capturar em uma classe que vamos chamar de &lt;em&gt;Application&lt;/em&gt;. Então vamos poder reutilizar essa classe para qualquer novo programa que possamos criar. Pense só! Nunca mais vamos ter que escrever esse &lt;em&gt;loop&lt;/em&gt; denovo!¹&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;1. Eu te vendo o meu loop.&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;Por exemplo, considere o código abaixo:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FtoCRaw&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;      &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; done &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;      &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; fahrString &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ReadLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;       &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fahrString &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; fahrString&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Length &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;         done &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;       &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;       &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;         &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; fahr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Double&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fahrString&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;         &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; celsius &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;9.0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fahr &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;         Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;F={0}, C={1}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fahr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; celsius&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;       &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;     Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ftoc exit&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Esse programa tem todos os elementos da estrutura &lt;em&gt;main loop&lt;/em&gt; anterior. Faz uma leve inicialização, faz o seu trabalho em um &lt;em&gt;main loop&lt;/em&gt; (loop principal) e então limpa e sai.&lt;/p&gt;
&lt;p&gt;Nós podemos separar essa estrutura fundamental do programa &lt;em&gt;ftoc&lt;/em&gt; (FahrenheitToCelsius) utilizando o &lt;strong&gt;Template Method&lt;/strong&gt;. Esse padrão aloca todo o código genérico em um método implementado em uma classe base abstrata. O método implementado captura o algoritmo genérico, mas, adia todos os detalhes a métodos abstratos da classe base.&lt;/p&gt;
&lt;p&gt;Então, como exemplo, vamos capturar a estrutura &lt;em&gt;main loop&lt;/em&gt; em uma classe base abstrata chamada &lt;em&gt;Application&lt;/em&gt;. Observe o código:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Application&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; isDone &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;    
&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Idle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Cleanup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;    
&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;SetDone&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;     isDone &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;   
&lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; isDone&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;   
&lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;     &lt;span class=&quot;token function&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;     While &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;23&lt;/span&gt;       &lt;span class=&quot;token function&quot;&gt;Idle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt;     &lt;span class=&quot;token function&quot;&gt;Cleanup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Essa classe descreve uma aplicação de uma estrutura de &lt;em&gt;main loop&lt;/em&gt; genérica. Podemos ver o &lt;em&gt;main loop&lt;/em&gt;
na função implamentada &lt;em&gt;Run&lt;/em&gt;. Nós também podemos ver que todo o trabalho esta sendo colocado aos métodos abstratos
&lt;em&gt;Init&lt;/em&gt;, &lt;em&gt;Idle&lt;/em&gt; e &lt;em&gt;Cleanup&lt;/em&gt;. O método Init cuida de qualquer inicialização, &lt;em&gt;Idle&lt;/em&gt; faz a principal parte do trabalho e será chamado
repetidamente até que o trabalho esteja feito. O &lt;em&gt;Cleanup&lt;/em&gt; faz qualquer necessidade antes que saia do método.&lt;/p&gt;
&lt;p&gt;Nós podemos reescrever a classe &lt;em&gt;ftoc&lt;/em&gt; simplesmente herdando de &lt;em&gt;Application&lt;/em&gt; e implementando os métodos abstrados. Exemplo:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FtoCTemplateMethod&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Application
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TextReader&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TextWriter&lt;/span&gt; output&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;   
&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;      &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;FtoCTemplateMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;  
&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;     input &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;In&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;     output &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Out&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;  
&lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Idle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;     &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; fahrString &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ReadLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fahrString &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; fahrString&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Length &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;        &lt;span class=&quot;token function&quot;&gt;SetDone&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;23&lt;/span&gt;      &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; fahr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Double&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fahrString&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;26&lt;/span&gt;        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; celsius &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;9.0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fahr &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;27&lt;/span&gt;        Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;F={0}, C={1}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fahr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; celsius&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;28&lt;/span&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;  
&lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Cleanup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;33&lt;/span&gt;     output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ftoc exit&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;34&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;35&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;É fácil ver como a antiga aplicação &lt;em&gt;ftoc&lt;/em&gt; (Fahrenheit to Celsius) foi encaixada ao padrão &lt;strong&gt;Template Method&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Abuso de padrões&lt;/h3&gt;
&lt;p&gt;Até então, você deve estar pensando “Sério? Esse cara realmente me espera usar a classe &lt;em&gt;Application&lt;/em&gt; para todos os novos aplicativos? Isso não me trouxe nenhuma vantagem significativa, e complicou ainda mais o problema.”&lt;/p&gt;
&lt;p&gt;Er…Sim.. :^(&lt;/p&gt;
&lt;p&gt;O exemplo foi escolhido porque ele era simples e demonstrou ser uma boa plataforma para mostrar os mecanismos do padrão de projeto &lt;strong&gt;Template Method&lt;/strong&gt;.
Mas do outro lado, eu realmente não recomendo construir a aplicação &lt;em&gt;ftoc&lt;/em&gt; como foi feita.&lt;/p&gt;
&lt;p&gt;Este é um bom exemplo de abuso de padrões. Utilizando o padrão &lt;strong&gt;Template Method&lt;/strong&gt; para essa aplicação em particular é ridículo. Isso complica o programa e faz ele ficar maior. Encapsular o &lt;em&gt;main loop&lt;/em&gt; de toda aplicação do universo meio que pareceu algo lindo e maravilhoso de se fazer quando nós começamos a falar sobre isso, mas em uma aplicação real isso não é produtivo.&lt;/p&gt;
&lt;p&gt;Padrões de Projeto são coisas maravilhosas. Eles podem lhe ajudar com vários problemas de design. Mas o fato que eles existem não
significa que eles devem sempre ser utilizados. Neste caso, o &lt;strong&gt;Template Method&lt;/strong&gt; foi aplicável ao problema mas seu uso não foi recomendado. &lt;strong&gt;O custo do padrão foi maior que o benefício que ele trouxe&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Bubble Sort&lt;/h3&gt;
&lt;p&gt;Então, vamos olhar para um exemplo um pouco mais útil. Observe que como &lt;em&gt;Application&lt;/em&gt;, uma aplicação com o algoritmo &lt;em&gt;Bubble Sort&lt;/em&gt; é um exemplo fácil de entender, e então, se faz uma ferramenta poderosa de ensino. Embora, nenhuma pessoa em sua sanidade iria utilizar o algoritmo &lt;em&gt;Bubble Sort&lt;/em&gt; se ela tiver que fazer um número significante de ordenações. Existem &lt;em&gt;muitos&lt;/em&gt; outros algoritmos melhores pra isso.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BubbleSorter&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; operations &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;      operations &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Length &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; operations&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;        
&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; nextToLast &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Length&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; nextToLast &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; nextToLast&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;       &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; index &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; index &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; nextToLast&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; index&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;         &lt;span class=&quot;token function&quot;&gt;CompareAndSwap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;         
&lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; operations&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;   
&lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Swap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;     &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; temp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;     array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;     array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; temp&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;23&lt;/span&gt;   
&lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;CompareAndSwap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;26&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;27&lt;/span&gt;       &lt;span class=&quot;token function&quot;&gt;Swap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;28&lt;/span&gt;     operations&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A classe &lt;em&gt;BubbleSorter&lt;/em&gt; sabe como ordenar um vetor de inteiros, utilizando o algoritmo &lt;em&gt;Bubble Sort&lt;/em&gt;. O método &lt;em&gt;Sort&lt;/em&gt;
da classe, contém o algoritmo que sabe como fazer um &lt;em&gt;Bubble Sort&lt;/em&gt;. Os dois métodos auxiliares -&lt;em&gt;Swap&lt;/em&gt; e &lt;em&gt;CompareAndSwap&lt;/em&gt; -Lidam
com os detalhes de inteiros, etores e também manipula a mecânica que o algoritmo dentro de &lt;em&gt;Sort&lt;/em&gt; precisa.&lt;/p&gt;
&lt;p&gt;Utilizando o padrão &lt;strong&gt;Template Method&lt;/strong&gt;, nós podemos separar o algorito &lt;em&gt;Bubble Sort&lt;/em&gt; para dentro de uma classe base abstrata chamada
&lt;em&gt;BubbleSorter&lt;/em&gt;. A classe &lt;em&gt;BubbleSorter&lt;/em&gt; contém uma implementação de função chamada &lt;em&gt;Sort&lt;/em&gt; que chama um método abstrato chamado &lt;em&gt;OutOfOrder&lt;/em&gt; e outro chamado &lt;em&gt;Swap&lt;/em&gt;. O método &lt;em&gt;OutOfOrder&lt;/em&gt; compara dois elementos adjacentes no vetor e retorna &lt;em&gt;true&lt;/em&gt; se os elementos estão fora de ordem. O método &lt;em&gt;Swap&lt;/em&gt; troca as duas celulas adjacentes no vetor que estejam fora de ordem.&lt;/p&gt;
&lt;p&gt;O método &lt;em&gt;Sort&lt;/em&gt; não sabe nada sobre o vetor; nem ele liga sobre qual o tipo do objeto que está sendo armazenado no vetor. Ele simplesmente chama &lt;em&gt;OutOfOrder&lt;/em&gt; para vários índices do vetor e determina quando esses índices devem ser trocados. Observe:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BubbleSorter&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; operations &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;  
&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DoSort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;      operations &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;       &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; operations&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; nextToLast &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; length&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; nextToLast &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; nextToLast&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;       &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; index &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; index &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; nextToLast&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; index&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;       &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;         &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;OutOfOrder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;           &lt;span class=&quot;token function&quot;&gt;Swap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;         operations&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;       &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;      
&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; operations&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;  
&lt;span class=&quot;token number&quot;&gt;23&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Swap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;OutOfOrder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dado &lt;em&gt;BubbleSorter&lt;/em&gt;, nós podemos criar simples derivações que podem ordenar vários outros tipos de objeto. Por exemplo, podemos
criar &lt;em&gt;IntBubbleSorter&lt;/em&gt;, no qual ordena um vetor de inteiros e &lt;em&gt;DoubleBubbleSorter&lt;/em&gt;, que faz ordenação de objetos de ponto flutuante. Por exemplo:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IntBubbleSorter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; BubbleSorter
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;   
&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; theArray&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;      array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; theArray&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;      length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DoSort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;  
&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Swap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;     &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; temp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;     array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;     array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; temp&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;  
&lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;OutOfOrder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DoubleBubbleSorter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; BubbleSorter
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;   
&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; theArray&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;      array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; theArray&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;      length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DoSort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;  
&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Swap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;     &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; temp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;     array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;     array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; temp&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;  
&lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;OutOfOrder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;O padrão &lt;strong&gt;Template Method&lt;/strong&gt; mostra uma das formas classicas de reutilização em Programação Orientada a Objetos. Algoritmos genéricos são colocamos em uma classe base e herdados para diferentes contextos. Mas essa técnica tem seus custos. &lt;strong&gt;Herança&lt;/strong&gt; é uma relação muito forte. Derivações estão muito amarradas a suas classes base (classes mãe).&lt;/p&gt;
&lt;p&gt;Como podemos observar, os métodos &lt;em&gt;OutOfOrder&lt;/em&gt; e &lt;em&gt;Swap&lt;/em&gt; de &lt;em&gt;IntBubbleSorter&lt;/em&gt; são exatamente o que outros tipos de algoritmos de ordenação precisam. Mas não tem nenhuma forma de reutilizar &lt;em&gt;OutOfOrder&lt;/em&gt; e &lt;em&gt;Swap&lt;/em&gt; em outros algoritmos de ordenação. Herdando de &lt;em&gt;BubbleSorter&lt;/em&gt; nós condenamos &lt;em&gt;IntBubbleSorter&lt;/em&gt; a ser eternamente amarrado ao &lt;em&gt;BubbleSorter&lt;/em&gt;. O padrão &lt;strong&gt;Strategy&lt;/strong&gt; dispõe de outra opção.&lt;/p&gt;
&lt;h2&gt;STRATEGY&lt;/h2&gt;
&lt;p&gt;O padrão &lt;strong&gt;Strategy&lt;/strong&gt; resolve o problema da inversão de dependência do algoritmo genérico e os detalhes de implementação em uma maneira bem diferente. Considere novamente o abuso de padrão do exemplo &lt;em&gt;Application&lt;/em&gt; apresentado anteriormente.&lt;/p&gt;
&lt;p&gt;Ao invés de colocarmos a aplicação do algoritmo genérico em uma classe base abstrata, nós vamos a transportar para uma classe &lt;em&gt;concreta&lt;/em&gt; chamada &lt;em&gt;ApplicationRunner&lt;/em&gt;. Nós definimos os métodos abstratos que o algoritmo genérico deve chamar dentro da &lt;em&gt;interface&lt;/em&gt; chamada &lt;em&gt;Application&lt;/em&gt;. Nós derivamos &lt;em&gt;FtoCStrategy&lt;/em&gt; dessa interface e passamos ela para a &lt;em&gt;ApplicationRunner&lt;/em&gt;. &lt;em&gt;ApplicationRunner&lt;/em&gt; então delega para essa interface.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ApplicationRunner&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Application&lt;/span&gt; itsApplication &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;   
&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ApplicationRunner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Application&lt;/span&gt; app&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;      itsApplication &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; app&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;  
&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;     itsApplication&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;itsApplication&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;       itsApplication&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Idle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;     itsApplication&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Cleanup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Application&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Idle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Cleanup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;    &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FtoCStrategy&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Application
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TextReader&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TextWriter&lt;/span&gt; output&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; isDone &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;    
&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;ApplicationRunner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;FtoCStrategy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;  
&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;     input &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;In&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;     output &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Out&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;  
&lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Idle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;     &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; fahrString &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ReadLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fahrString &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; fahrString&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Length &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;       isDone &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;23&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt;     &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;       &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; fahr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Double&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fahrString&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;26&lt;/span&gt;       &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; celcius &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;9.0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fahr &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;27&lt;/span&gt;       output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;F={0}, C={1}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fahr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; celcius&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;28&lt;/span&gt;     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;    
&lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Cleanup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;33&lt;/span&gt;     output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ftoc exit&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;34&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;35&lt;/span&gt;    
&lt;span class=&quot;token number&quot;&gt;36&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;37&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;38&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; isDone&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;39&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Deve estar bem claro que essa estrutura tem ambos benefícios e custos sobre a estrutura do &lt;strong&gt;Template Method&lt;/strong&gt;. &lt;strong&gt;Strategy&lt;/strong&gt;
envolve mais classes e mais indirecionamento que o &lt;strong&gt;Template Method&lt;/strong&gt;. O ponteiro de delegação dentro de &lt;em&gt;ApplicationRunner&lt;/em&gt; fica sujeito a um custo um pouco maior em termos de &lt;em&gt;tempo de execução&lt;/em&gt; e &lt;em&gt;espaço&lt;/em&gt; do que ficaria a herança. Mas pelo outro lado, se tivermos várias aplicações diferentes a serem executadas, nós podemos reutilizar a instância de &lt;em&gt;ApplicationRunner&lt;/em&gt; e a passar para várias implementações de &lt;em&gt;Application&lt;/em&gt;, reduzindo o overhead de espaço de código.&lt;/p&gt;
&lt;p&gt;Nenhum desses custos e benefícios estão decidindo a substituição. Na maioria dos casos, nenhum deles importa, na minoria. No caso típico, o que é mais preocupante é a extra classe que é exigida pelo &lt;strong&gt;Strategy&lt;/strong&gt;. Embora, há outras coisas a serem consideradas.&lt;/p&gt;
&lt;p&gt;Considere uma implementação do &lt;em&gt;Bubble Sort&lt;/em&gt; que utiliza o padrão &lt;strong&gt;Strategy&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BubbleSorter&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; operations &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SortHandler&lt;/span&gt; itsSortHandler &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;BubbleSorter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;SortHandler&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;      itsSortHandler &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;   
&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt;&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;     itsSortHandler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SetArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;     length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; itsSortHandler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;     operations &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;     
&lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;       &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; operations&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;       
&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; nextToLast &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; nextToLast &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; nextToLast&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;       &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; index &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; index &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; nextToLast&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; index&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;       &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;23&lt;/span&gt;         &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;itsSortHandler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;OutOfOrder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt;           itsSortHandler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Swap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;         operations&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;26&lt;/span&gt;       &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;27&lt;/span&gt;       
&lt;span class=&quot;token number&quot;&gt;28&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; operations&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SortHandler&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Swap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;OutOfOrder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;    &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;SetArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt;&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IntSortHandler&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; SortHandler
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;    
&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Swap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;      &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; temp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;      array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;      array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; temp&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;SetArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt;&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;OutOfOrder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;23&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note que a classe &lt;em&gt;IntSortHandler&lt;/em&gt; não sabe nada sobre o &lt;em&gt;BubbleSorter&lt;/em&gt;, sendo assim, não há dependência nenhuma sobre a implementação do algoritmo &lt;em&gt;Bubble Sort&lt;/em&gt;. Este não é o caso quando utilizamos o &lt;strong&gt;Template Method&lt;/strong&gt;. Olhando para trás, você pode ver que &lt;em&gt;IntBubbleSorter&lt;/em&gt; depende diretamente do &lt;em&gt;BubbleSorter&lt;/em&gt;, a classe que contém o algoritmo do &lt;em&gt;Bubble Sort&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A técnica do &lt;strong&gt;Template Method&lt;/strong&gt; parcialmente não cumpre um dos princípios &lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29&quot;&gt;SOLID&lt;/a&gt; chamado Dependency-Inversion Principle (DIP). A implementação dos métodos &lt;em&gt;Swap&lt;/em&gt; e &lt;em&gt;OutOfOrder&lt;/em&gt; depende diretamente no &lt;em&gt;Bubble Sort&lt;/em&gt;. A técnica do &lt;strong&gt;Strategy&lt;/strong&gt; não há essa dependência. Dessa maneira, nós podemos usar &lt;em&gt;IntSortHandler&lt;/em&gt; com a implementações &lt;em&gt;Sorter&lt;/em&gt;, e outras além de &lt;em&gt;BubbleSorter&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Por exemplo, nós podemos criar uma variação do &lt;em&gt;Bubble Sort&lt;/em&gt; que termina sua execuçã mais cedo se em uma passagem do vetor, o encontra em ordem. Abaixo, o &lt;em&gt;QuickBubbleSorter&lt;/em&gt; pode também utilizar &lt;em&gt;IntSortHandler&lt;/em&gt; ou qualquer outra classe implementadora da interface &lt;em&gt;SortHandler&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;QuickBubbleSorter&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; operations &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SortHandler&lt;/span&gt; itsSortHandler &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;    
&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;QuickBubbleSorter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;SortHandler&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;      itsSortHandler &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; handler&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;   
&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt;&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;     itsSortHandler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SetArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;     length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; itsSortHandler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;     operations &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;     
&lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;       &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; operations&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;     &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; thisPassInOrder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; nextToLast &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; length&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; nextToLast &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;thisPassInOrder&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;23&lt;/span&gt;     nextToLast&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt;       thisPassInOrder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//potenially.&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;       &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; index &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; index &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; nextToLast&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; index&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;26&lt;/span&gt;       &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;27&lt;/span&gt;         &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;itsSortHandler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;OutOfOrder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;28&lt;/span&gt;         &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt;           itsSortHandler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Swap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;           thisPassInOrder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;31&lt;/span&gt;         &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;         operations&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;33&lt;/span&gt;       &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;34&lt;/span&gt;     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;35&lt;/span&gt;    
&lt;span class=&quot;token number&quot;&gt;36&lt;/span&gt;     &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; operations&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;37&lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;38&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Assim, o &lt;strong&gt;Strategy&lt;/strong&gt; dispõe de um benefício extra sobre o &lt;strong&gt;Template Method&lt;/strong&gt;. Enquanto o &lt;strong&gt;Template Method&lt;/strong&gt; permite que um algoritmo genérico manipule várias implementações detalhadas possíveis, o &lt;strong&gt;Strategy&lt;/strong&gt;, por totalmente se conformar com o (DIP), permite que cada implementação detalhada manipule vários algoritmos genéricos diferentes.&lt;/p&gt;
&lt;h2&gt;Conclusão&lt;/h2&gt;
&lt;p&gt;O padrão &lt;strong&gt;Template Method&lt;/strong&gt; é simples de se escrever e simples de usar mas é um tanto inflexível. &lt;strong&gt;Strategy&lt;/strong&gt; é flexível mas você tem que criar uma classe a mais, instânciar um objeto a mais e amarrar o objeto extra ao sistema. Então a escolha entre eles depende em quando você precisa da flexibilidade do &lt;strong&gt;Strategy&lt;/strong&gt; ou quando pode viver com a simplicidade do &lt;strong&gt;Template&lt;/strong&gt;. Várias vezes optei pelo &lt;strong&gt;Template Method&lt;/strong&gt; simplesmente porque ele é mais fácil de implementar e usar. Por exemplo, eu iria utilizar a solução pelo &lt;strong&gt;Template Method&lt;/strong&gt; para o &lt;em&gt;Bubble Sort&lt;/em&gt; a menos que eu realmente precisse de diferentes algoritmos de ordenação para o meu problema.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Bom, interessante né?&lt;/p&gt;
&lt;p&gt;Este conteúdo foi baseado no livro &lt;a href=&quot;http://www.barnesandnoble.com/w/agile-principles-patterns-and-practices-in-c-robert-c-martin/1101636951?ean=9780131857254&quot;&gt;Agile Principles, Patterns, and Practices in C#&lt;/a&gt; de Robert Martin (conhecido como &lt;strong&gt;&lt;a href=&quot;https://twitter.com/unclebobmartin&quot;&gt;Uncle Bob&lt;/a&gt;&lt;/strong&gt;) e seu filho &lt;strong&gt;&lt;a href=&quot;https://twitter.com/slagyr&quot;&gt;Micah Martin&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;Recomendo a leitura e estudo deste livro.&lt;/sub&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Um exemplo sobre MVC]]></title><description><![CDATA[Um acervo dentro do mundo de perguntas e respostas do Stack Overflow Pesquisar no Stack já virou parte da minha rotina de pesquisa em…]]></description><link>https:igoroctaviano.com/blog/um-exemplo-sobre-mvc/</link><guid isPermaLink="false">https:igoroctaviano.com/blog/um-exemplo-sobre-mvc/</guid><pubDate>Mon, 01 Feb 2016 00:11:00 GMT</pubDate><content:encoded>&lt;h3&gt;Um acervo dentro do mundo de perguntas e respostas do Stack Overflow&lt;/h3&gt;
&lt;p&gt;Pesquisar no &lt;a href=&quot;https://stackoverflow.com&quot;&gt;Stack&lt;/a&gt; já virou parte da minha rotina de pesquisa em determinados assuntos..
E isso porque, pra mim, o mais interessante é que várias vezes, certas respostas são tão simples que economizam tempo de pesquisa. Os livros não deixam de ser essenciais fontes de conhecimento, mas.. no caso do Stack, a resposta é desenvolvida de forma resumida e sem rodeios, apartir da análise de quem pergunta, deterimina-se a complexidade da respota, ainda mais, é de fácil a complementação do conteúdo, sua atualização, por diversas pessoas do mundo, centralizando na chave da pergunta, um rico acervo de repostas “avaliáveis”.&lt;/p&gt;
&lt;p&gt;Segue abaixo uma analogia publicada em novembro de 2012 no Stack Overflow pelo usuário &lt;a href=&quot;http://programmers.stackexchange.com/users/6720/jw01&quot;&gt;JW01&lt;/a&gt;, publicação posteriormente atualizada
sobre o padrão de arquitetura MVC.&lt;/p&gt;
&lt;h3&gt;Analogia&lt;/h3&gt;
&lt;p&gt;Eu expliquei MVC para meu Pai assim:&lt;/p&gt;
&lt;p&gt;MVC (Model, View, Controller) é um padrão para organizar o código em uma aplicação para aprimorar sua mantenabilidade.&lt;/p&gt;
&lt;p&gt;Imagine um fotógrafo com sua câmera em um estúdio. A cliente o solicita que ele tire uma foto de uma caixa.&lt;/p&gt;
&lt;p&gt;A caixa é o &lt;em&gt;model&lt;/em&gt;, o fotógrafo é o &lt;em&gt;controller&lt;/em&gt; e a câmera é o &lt;em&gt;view&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Desde que a caixa não sabe sobre a câmera ou do fotógrafo, são completamente independentes. Essa separação permite o fotógrafo
andar em torno da caixa e posicionar a câmera a qualquer angulo e tirar qualquer foto/&lt;em&gt;view&lt;/em&gt; que ele queira.&lt;/p&gt;
&lt;p&gt;Arquiteturas que não seguem o padrão MCV, tendem de certa forma, a serem altamente interligadas (acopladas). Se a caixa, o fotógrafo e a câmera fossem um mesmo objeto, então, nós teriamos que separá-los, e então, reconstruir caixa e a câmera, toda vez que nós fossemos tirar uma foto. &lt;strong&gt;Também, tirando a foto seria sempre como tirar uma selfie - e isso não é sempre fácil&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Uma explicação detalhada&lt;/h3&gt;
&lt;p&gt;MVC é tudo sobre seperação de conceitos.&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;model&lt;/em&gt; é responsável pela gestão de dados do programa (tanto privada quanto dados do cliente). O &lt;em&gt;View/Controller&lt;/em&gt; é responsável por fornecer o mundo exterior, com os meios para interagir com dados dos clientes do programa.&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;model&lt;/em&gt; fornece uma interface interna (API) para permitir que outras partes do programa possa interagir com ela. O &lt;em&gt;View/Controller&lt;/em&gt; fornece uma interface externa (GUI/CLI/web form/high-level IPC/etc.) para habilitar tudo que esteja fora do programa, se comunicar com ela.&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;model&lt;/em&gt; é responsável por manter a integridade dos dados do programa, porque, se tal ficar corrompido, então é game over para todos. O &lt;em&gt;View/Controller&lt;/em&gt; é responsável em manter a integridade da interface de usuário, se certificando-se de que todos os pontos de vista de texto &lt;em&gt;“views”&lt;/em&gt; estão sendo visualizadas com valores atuais, desabilitando itens do menu que não se aplicam ao foco atual, etc.&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;model&lt;/em&gt; não contém nenhum código de &lt;em&gt;View/Controller&lt;/em&gt;; não há classes de widgets da GUI, nenhum código para colocar para fora as
caixas de diálogo ou receber entrada do usuário. O &lt;em&gt;View/Controller&lt;/em&gt; não contém nenhum código do &lt;em&gt;model&lt;/em&gt;; nenhum código de validação de URLs ou de realização de consultas SQL, e nenhum estado original se quer: todos os dados na posse de widgets é para fins de exibição, apenas, simplesmente um reflexo dos verdadeiros dados armazenados no &lt;em&gt;model&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Agora, aqui está a prova de um verdadeiro projeto MVC: o programa deve, em essência, ser totalmente funcional, mesmo sem um &lt;em&gt;View/Controller&lt;/em&gt; ligado a ele. Ok, o mundo externo irá ter problemas ao interagir com ele sob essa forma, mas, enquanto se sabe os encantamentos da API do &lt;em&gt;model&lt;/em&gt; apropriado, o programa conseguirá segurar e manipular os dados normalmente.&lt;/p&gt;
&lt;p&gt;Por que isso é possivel? Bom, a resposta é simples, é tudo graças ao baixo acoplamento entre a camada do &lt;em&gt;model&lt;/em&gt; e a camada View/Controller. Embora, não seja a história completa. A chave para todo o Padrão MVC é a direção em que aquelas conexões de relação vão: TODAS as instruções seguem do &lt;em&gt;View/Controller&lt;/em&gt; para o &lt;em&gt;model&lt;/em&gt;. O &lt;em&gt;model&lt;/em&gt; NUNCA diz o &lt;em&gt;View/Controller&lt;/em&gt; o que fazer.&lt;/p&gt;
&lt;p&gt;Porque? porque no MVC, enquanto o &lt;em&gt;View/Controller&lt;/em&gt; é permitido a saber um pouco sobre o &lt;em&gt;model&lt;/em&gt; (especificamente, a API do &lt;em&gt;model&lt;/em&gt;), o &lt;em&gt;model&lt;/em&gt; não é permitido saber nada sobre o &lt;em&gt;View/Controller&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Porque? porque MCV é tudo sobre criar uma separação clara de conceitos.&lt;/p&gt;
&lt;p&gt;Por quê? Para ajudar a evitar a complexidade do programa ir fora de controle em uma espiral, e enterrar o desenvolvedor, sob ela. Quanto maior for o programa, maior o número de componentes no programa. E quanto mais existem conexões entre esses componentes, mais difícil para os desenvolvedores manter/ampliar/substituir, componentes individuais, ou mesmo apenas, seguir como funciona todo o sistema. Pergunte a você mesmo: quando se olha para um diagrama da estrutura do programa, você preferiria ver uma árvore ou uma cama de gato? O padrão MVC evita o último, desativando relações circulares: B pode se conectar a A, mas A não pode se conectar a B. Neste caso, A é o &lt;em&gt;model&lt;/em&gt; e B é o &lt;em&gt;View/Controller&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A propósito, se você esta afiado, vai notar um problema com a restrição ‘one-way’ ou (uma direção) que acabamos de descrever: como pode o &lt;em&gt;model&lt;/em&gt; informar o &lt;em&gt;View/Controller&lt;/em&gt; de alterações nos dados do usuário do &lt;em&gt;model&lt;/em&gt;, quando o &lt;em&gt;model&lt;/em&gt; não é nem mesmo, permitido a saber, que o &lt;em&gt;View/Controller&lt;/em&gt; nunca pense enviar menssagems a ele? Mas não se preocupe: há uma solução para isso, e é bastante limpa, mesmo que pareça um rodeio no início. Nos vamos voltar a isso em um momento.&lt;/p&gt;
&lt;p&gt;Em termos práticos, então, um objeto &lt;em&gt;View/Controller&lt;/em&gt; pode, via API do &lt;em&gt;model&lt;/em&gt;, 1. dizer o &lt;em&gt;model&lt;/em&gt; a fazer as coisas (executar comandos), e 2. dizer o &lt;em&gt;model&lt;/em&gt; para dar-lhe as coisas (retornar dados). A camada &lt;em&gt;View/Controller&lt;/em&gt; empurra instruções para a camada do &lt;em&gt;model&lt;/em&gt; e puxa informações.&lt;/p&gt;
&lt;p&gt;E é aí que o seu primeiro exemplo &lt;em&gt;MinhaListaDeControleManeira&lt;/em&gt; dá errado, porque a API para essa classe requer que a informação seja empurradas para dentro, então você está de volta a ter um acoplamento de duas vias entre as camadas, violando as regras MVC e lhe despejando de volta para a arquitetura de cama de gato que você estava [presumivelmente] tentando evitar, em primeiro lugar.&lt;/p&gt;
&lt;p&gt;Em vez disso, a classe &lt;em&gt;MinhaListaDeControleManeira&lt;/em&gt; deve ir com o fluxo, puxando os dados de que necessita a partir da camada abaixo, quando ela precisar. No caso de um widget de lista, geralmente significa perguntar quantos valores existem e, em seguida, pedir para cada um desses itens, por sua vez, porque isso é sobre a mais simples e folgada maneira de fazê-lo e, portanto, mantém o acoplamento existente, a um mínimo. E se o widget quer, digamos, apresentar esses valores para o usuário em ordem alfabética, bom, então isso é sua prerrogativa; e sua responsabilidade, é clara.&lt;/p&gt;
&lt;p&gt;Agora, uma última charada, como sugerido anteriormente: como é que você poderá manter a tela de interface do usuário sincronizada com o estado do &lt;em&gt;model&lt;/em&gt; em um sistema baseado no MVC?&lt;/p&gt;
&lt;p&gt;Aqui está o problema: muitos objetos &lt;em&gt;view&lt;/em&gt; podem mudar de estado (stateful), por exemplo, uma caixa de seleção pode ser marcada ou desmarcada, um campo de texto pode conter algum texto editável. No entanto, MVC determina que todos os dados do usuário sejam armazenados na camada &lt;em&gt;model&lt;/em&gt;, assim, todos os dados na posse das outras camadas, para fins de exibição (o estado caixa de seleção, o texto atual do campo de texto) devem, portanto, ser uma cópia subsidiária dos dados do &lt;em&gt;model&lt;/em&gt; primário. Mas se ocorrer mudanças de estado do &lt;em&gt;model&lt;/em&gt;, a cópia do &lt;em&gt;view&lt;/em&gt; daquele estado, não será mais preciso, precisará ser atualizada.&lt;/p&gt;
&lt;p&gt;Mas como? O padrão MVC impede que o &lt;em&gt;model&lt;/em&gt; empurre uma nova cópia dessas informações para a camada &lt;em&gt;view&lt;/em&gt;. Complementando, ele nem mesmo permite que o &lt;em&gt;model&lt;/em&gt; envie ao &lt;em&gt;view&lt;/em&gt; uma mensagem dizendo que o seu estado mudou.&lt;/p&gt;
&lt;p&gt;Bem, quase lá. Ok, a camada do &lt;em&gt;model&lt;/em&gt; não tem permissão para falar diretamente com outras camadas, uma vez que isso exigiria que ele saiba de alguma coisa sobre essas camadas, e as regras MVC impede isso. No entanto, se uma árvore cai em uma floresta e ninguém está por perto para ouvi-la, então fará algum som?&lt;/p&gt;
&lt;p&gt;A resposta, você vê, é a criação de um sistema de notificações, fornecendo a camada do &lt;em&gt;model&lt;/em&gt; com um lugar que poderá anunciar, de forma a ninguém em particular, algo interessante que acabou de fazer. Outras camadas podem adicionar ouvintes com o sistema de notificação para ouvir esses anúncios, que eles estão de fato, realmente interessados. A camada do &lt;em&gt;model&lt;/em&gt; não precisa saber nada sobre quem está ouvindo (Ou mesmo se alguém está escutando alguma coisa!); ela simplesmente envia um anúncio e depois o esquece. E se alguém ouvir o anúncio e se sente que deve fazer algo depois - como pedir o &lt;em&gt;model&lt;/em&gt; novos dados para que ele possa atualizar sua exibição na tela - então ótimo. O &lt;em&gt;model&lt;/em&gt; apenas lista as notificações que envia, como parte de sua definição API; e o que ninguem mais faz com aquele conhecimento, é sabido a eles.&lt;/p&gt;
&lt;p&gt;MVC é preservado, e todo mundo está feliz. Sua estrutura de aplicativo pode muito bem proporcionar um sistema de notificações built-in, ou você pode escrever seu próprio, se não (ver o “Observer Pattern”).&lt;/p&gt;
&lt;p&gt;…
De qualquer forma, espero ter ajudado. Uma vez que você entenda as motivações por trás do MVC, as razões porque as coisas são feitas, começa tudo a fazer sentido, mesmo quando - à primeira vista - elas aparentam mais complexas que necessário.&lt;/p&gt;
&lt;p&gt;Felicidades,&lt;/p&gt;
&lt;p&gt;has&lt;/p&gt;
&lt;h3&gt;Afinal, interessante?&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Você pode acessar a publicação original no site do Stack acessando &lt;a href=&quot;http://programmers.stackexchange.com/questions/127624/what-is-mvc-really&quot;&gt;aqui&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[O que é a DOM?]]></title><description><![CDATA[Recentemente eu li um post no blog CSS-TRICKS sobre a DOM (pra quem ainda não conhece, o blog CSS-Tricks começou com o Chris Coyier sendo o…]]></description><link>https:igoroctaviano.com/blog/dom/</link><guid isPermaLink="false">https:igoroctaviano.com/blog/dom/</guid><pubDate>Mon, 01 Feb 2016 00:11:00 GMT</pubDate><content:encoded>&lt;p&gt;Recentemente eu li um post no blog &lt;a href=&quot;https://css-tricks.com/dom&quot;&gt;CSS-TRICKS&lt;/a&gt; sobre a DOM (pra quem ainda não conhece, o blog CSS-Tricks começou com o &lt;a href=&quot;https://twitter.com/chriscoyier&quot;&gt;Chris Coyier&lt;/a&gt; sendo o maior foco CSS e hoje é alimentado por uma galera e cobre assuntos gerais de web e design), é meio que uma introdução no assunto de forma bem básica, achei legal e decidi traduzir pra galera :D&lt;/p&gt;
&lt;h3&gt;O HTML que você escreve é a DOM? na verdade, não.&lt;/h3&gt;
&lt;p&gt;Mas o HTML que você escreve é analisado pelo seu browser e é transformado na DOM.&lt;/p&gt;
&lt;h3&gt;Então talvez o código fonte da página é a DOM? não, não…&lt;/h3&gt;
&lt;p&gt;O código fonte da página apenas lhe mostra as estruturas da página, o que a constrói. Provavelmente é o mesmo HTML que você escreveu.&lt;/p&gt;
&lt;p&gt;Talvez possa aparecer um código um pouco diferente, por exemplo, você trabalha com templates em uma linguagem de backend e não
observa a saída do HTML compilado frequentemente. Ou há um processo de construção (build) que acontece logo depois que você escreve
seu HTML e o código é colocado no seu website. Talvez.. esse HTML é comprimido ou alterado.&lt;/p&gt;
&lt;p&gt;O código fonte da página é um pouco estranho na verdade. As únicas pessoas que ligariam em olhar para esse código são desenvolvedores
e a maioria dos navegadores possuem ferramentas para desenvolvedores já construidas de forma integradas no próprio navegador atualmente.&lt;/p&gt;
&lt;h3&gt;Então, o código no DevTools (ferramentas do desenvolvedor) do meu navegador é a DOM? sim!, mas.. pera aí, quase isso.&lt;/h3&gt;
&lt;p&gt;Quando você está olhando no painel em qualquer ferramenta que esteja utilizando que lhe mostra algo parecido com HTML, isso é
uma representação visual da DOM! Há!&lt;/p&gt;
&lt;p&gt;Sim… mas isso parece exatamente com meu HTML…e ai??!?!?
Sim.. parece mesmo. Isso foi criado diretamente apartir do seu HTML se lembra? na maioria dos casos (os mais simples),
a representação visual da DOM será igual seu simples HTML.&lt;/p&gt;
&lt;p&gt;Mas não é sempre o mesmo…&lt;/p&gt;
&lt;h2&gt;Quando a DOM é diferente do HTML?&lt;/h2&gt;
&lt;p&gt;Aqui esta uma possibilidade: existem falhas no seu HTML e o navegador as concertou para você. Vamos dizer que você tem
um elemento de &lt;em&gt;&lt;table&gt;&lt;/em&gt; em seu HTML e deixou de fora o elemento necessário &lt;em&gt;&lt;tbody&gt;&lt;/em&gt;. O navegador vai inserir para você aquele
elemento &lt;em&gt;&lt;tbody&gt;&lt;/em&gt; para você. Isso vai estar na DOM, então você será capaz de o encontrar com JavaScript e estilizar com CSS, mesmo
são existindo em seu HTML.&lt;/p&gt;
&lt;p&gt;O caso mais provável, é…&lt;/p&gt;
&lt;h2&gt;JavaScript pode manipular a DOM&lt;/h2&gt;
&lt;p&gt;Imagine que você tem um elemento vazio em seu HTML:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;container&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Então depois em seu HTML, tem um pouco de JavaScript:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; container &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  container&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Novo conteúdo!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Mesmo se você não sabe JavaScript, você pode resoavelmente entender esse pedaço de código. Na tela você vai ver &lt;em&gt;Novo conteúdo!&lt;/em&gt;
ao invés de nada, porque aquele elemento &lt;em&gt;div&lt;/em&gt; foi preenchido com algum conteúdo.&lt;/p&gt;
&lt;p&gt;Se você usar as ferramentas de desenvolvedor de seu navegador para verificar a representação visual da DOM, você vai ver:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;container&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Novo conteúdo!&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Que é diferente do seu HTML original ou o que você observaria no código fonte.&lt;/p&gt;
&lt;h2&gt;Ajax e Templating&lt;/h2&gt;
&lt;p&gt;Você pode imaginar se você estivesse para utilizar Ajax para pegar conteúdo de algum lugar e colocar na página, a DOM vai ser
bem diferente do que seu HTML original. O mesmo acontece quando você carrega dados de algum tipo utilizando modelagem (templating)
do lado do cliente (client-side).&lt;/p&gt;
&lt;p&gt;Tente ir para o GMail e ver o código fonte. É um amontoado de scripts e dados do carregamento da página original. Quase irreconhecível
comparado com o que você vê na tela.&lt;/p&gt;
&lt;h2&gt;JavaScript vs DOM&lt;/h2&gt;
&lt;p&gt;JavaScript é a linguagem que o browser lê e faz coisas. Mas a DOM é onde essas coisas acontecem. De fato, muita coisa do que você
pode pensar como “alguma coisa de JavaScript” é na verdade, exatamente a “DOM API”.&lt;/p&gt;
&lt;p&gt;Como exemplo, podemos escrever JavaScript que observe por um evento to tipo &lt;em&gt;mouseenter&lt;/em&gt; (evento que é executado com o mouse
entra em algum elemento). Mas esse “elemento” é na verdade um nó da DOM. Nós amarramos aquele observador via uma propriedade da DOM
em naquele nó da DOM. Quando aquele evento acontece, é o nó da DOM que vai emitir esse evento.&lt;/p&gt;
&lt;p&gt;A DOM é o sangue da coisa aqui. é onde tudo vai parar, no seu navegador. JavaScript é apenas a sintaxe, a linguagem. Ela pode ser
utilizada totalmente fora do navegador sem nenhuma DOM API (da uma sacada em Node.js).&lt;/p&gt;
&lt;h2&gt;Isso foi só a ponta do iceberg, saiba muuuuito mais aqui:&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Core/introduction.html&quot;&gt;W3C:&lt;/a&gt;
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/DOM_Reference/Introduction&quot;&gt;MDN:&lt;/a&gt;
&lt;a href=&quot;http://en.wikipedia.org/wiki/Document_Object_Model&quot;&gt;Wikipedia:&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Dicas e Armadilhas em C#]]></title><description><![CDATA[O operador null-coalescing A tradução de coalescing é coagular, aderir, amalgamar, juntar…etc Provavelmente alguma vez você já fez algo…]]></description><link>https:igoroctaviano.com/blog/dicas-e-armadilhas-em-csharp/</link><guid isPermaLink="false">https:igoroctaviano.com/blog/dicas-e-armadilhas-em-csharp/</guid><pubDate>Mon, 01 Feb 2016 00:11:00 GMT</pubDate><content:encoded>&lt;h2&gt;O operador null-coalescing&lt;/h2&gt;
&lt;p&gt;&lt;sub&gt;A tradução de coalescing é coagular, aderir, amalgamar, juntar…etc&lt;/sub&gt;&lt;/p&gt;
&lt;p&gt;Provavelmente alguma vez você já fez algo parecido com esse código abaixo e
provavelmente você não sabia que podia ser feito com o operador null-coalescing:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Código sem o operador null-coalescing&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; nome &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;BuscarAlgumNomeEmAlgumLugar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nome &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    resultado &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;nenhum nome foi dado.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    resultado &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nome&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Código com o operador null-coalescing&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; nome &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Igor&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; resultado &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nome &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;nenhum nome foi dado.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Saída: Igor&lt;/span&gt;

nome &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
resultado &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nome &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;nenhum nome foi dado.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Saída: nenhum nome foi dado.&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Também podemos usar com atributos que podem ser nulo&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;&lt;/span&gt; idade &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
resultado &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; idade &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Saída: 0&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// E também encadear os operadores&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;&lt;/span&gt; idadeLocalPadrao &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; idadeGlobalPadrao &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

idade &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
resultado &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; idade &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; idadeLocalPadrao &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; idadeGlobalPadrao&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Saída: 99&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Como podemos ver, o resultado é igual a &lt;em&gt;nome&lt;/em&gt; se &lt;em&gt;nome&lt;/em&gt; já possui algum valor atribuido.
Caso contrário, é resgatado o valor ao lado direito do perador &lt;strong&gt;??&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;O perigo de chamar métodos virtuais dentro de construtores&lt;/h2&gt;
&lt;p&gt;Quando estamos trabalhando com classes com membros virtuais que podem ser sobreescritos (&lt;em&gt;override&lt;/em&gt;),
é uma boa ideia não chamar esses membros dentro de construtores, pois isso pode ser um tanto perigoso.
O autor da sub classe  (numa situação de herança) talvez não saiba que o construtor dependa desse método
para implementar alguma coisa corretamente. Vamos ao exemplo do perigo que pode ocorrer:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClasseBase&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; comprimento&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; nome&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;BaseClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;InitNome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        comprimento &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nome&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;InitNome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        nome &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Igor&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Temos uma classe chamada &lt;em&gt;ClasseBase&lt;/em&gt;, em seu construtor há uma chamada para o método protegido
&lt;em&gt;InitNome&lt;/em&gt; definido logo abaixo, esse método atribui o nome &lt;em&gt;“Igor”&lt;/em&gt; à variável nome. O contrutor continua e
artibui à variável comprimento o comprimento da variável tipo &lt;em&gt;string&lt;/em&gt; &lt;em&gt;nome&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Ok, então agora vamos adicionar mais coisa no jogo aqui. Uma classe herdeira de &lt;em&gt;ClasseBase&lt;/em&gt; chamada &lt;em&gt;ClasseDerivada&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClasseDerivada&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;ClasseBase&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;InitNome&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        nome &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Na classe derivada, foi sobrescrito o método virtual &lt;em&gt;InitNome&lt;/em&gt;. O autor da &lt;em&gt;ClasseDerivada&lt;/em&gt; decidiu que o valor
default para a variável &lt;em&gt;nome&lt;/em&gt; deve ser &lt;em&gt;null&lt;/em&gt; (tipo nulo).&lt;/p&gt;
&lt;p&gt;Tente instânciar a classe derivada e ver o que acontece.. você vai receber uma exceção de referência nula, mas porque?
porque quando você instância a classe derivada, o construtor da classe base, mãe desta classe, vai chamar o método
vritual &lt;em&gt;InitNome&lt;/em&gt; no qual foi sobrescrito nessa classe derivada, no qual agora o nome é igual a nulo. Sendo assim,
quando o construtor tentar pegar o comprimento da variável &lt;em&gt;nome&lt;/em&gt;, logo após executar o método virtual &lt;em&gt;InitNome&lt;/em&gt;, vai acontecer
que agora o nome é nulo e nulo não possui comprimento, nulo é nulo (não há referência nessa variável).&lt;/p&gt;
&lt;p&gt;Então é por isso que não se deve ficar colocando chamadas de métodos virtuais em construtores.&lt;/p&gt;
&lt;h2&gt;Métodos e tipos parciais&lt;/h2&gt;
&lt;p&gt;Tipos parciais nos permite dividir a definição de um tipo entre vários arquivos. Por exemplo: uma classe pode
ser especificada em mais de um arquivo &lt;em&gt;.cs&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;Neste exemplo estou criando uma nova instância de um tipo parcial e estou chamando os métodos &lt;em&gt;AlgumMetodo&lt;/em&gt; e &lt;em&gt;AlgumOutroMetodo&lt;/em&gt;.
Nada diferente até então..&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Arquivo: TiposParciaisEMetodos.cs&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TiposParciaisEMetodos&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Examplo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;UmTipoParcial&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AlgumMetodo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AlgumOutroMetodo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Agora se olharmos para a definição de &lt;em&gt;UmTipoParcial&lt;/em&gt;. Podemos ver que nós apenas temos o método &lt;em&gt;AlgumOutroMetodo&lt;/em&gt; definido.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Arquivo: UmTipoParcial.cs&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UmTipoParcial&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AlgumOutroMetodo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;UmMetodoParcial&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;O método &lt;em&gt;AlgumMetodo&lt;/em&gt; não está em lugar algum. (Vamos voltar a falar sobre esse método &lt;em&gt;UmMetodoParcial&lt;/em&gt; em breve..)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Arquivo: TiposParciaisEMetodos.cs&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TiposParciaisEMetodos&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Exemplo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;UmTipoParcial&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AlgumMetodo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AlgumOutroMetodo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Então fica a pergunta, a onde está esta definido esse método &lt;em&gt;AlgumMetodo&lt;/em&gt;?
Bom, neste exemplo, ela foi divido em outo arquivo, chamado &lt;em&gt;UmTipoParcial.generated.cs&lt;/em&gt;.
Não estamos utilizando herança aqui, é simplesmente uma maneira de dividir a definição em multiplos arquivos.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Arquivo: UmTipoParcial.generated.cs&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UmTipoParcial&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AlgumMetodo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;UmMetodoParcial&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;UmMetodoParcial&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Classes parcials trazem benefício quando estamos trabalhando com código gerado. O código gerado, pode fazer a classe parcial,
o que nos permite criar um arquivo &lt;em&gt;.cs&lt;/em&gt; irmão e adicionar novos métodos. Desta forma, se o código gerado originalmente
for regenerado, não vamos perder os métodos adicionais nos adicionamos. Sendo que a parte daquela classe que foi dividida em que
escrevemos o código na mão vai permanecer intacta.&lt;/p&gt;
&lt;p&gt;Para dizermos que uma classe é do tipo parcial, a palavra-chave &lt;em&gt;partial&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NomeDaClasse&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// Você pode aplicar partial em todas as partes que devem ser irmãs&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Quando estamos tralhando com classes parcials, também podemos trabalhar com métodos parciais.
Podemos ver que em nosso arquivo gerado &lt;em&gt;UmTipoParcial.generated.cs&lt;/em&gt; há um método parcial chamado &lt;em&gt;UmMetodoParcial&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Arquivo: UmTipoParcial.generated.cs&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UmTipoParcial&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AlgumMetodo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;UmMetodoParcial&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;UmMetodoParcial&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Métodos parcials devem retornar void e eles são implicitamente privados no escopo. Neste exemplo, é declarado
um método que é parcial, mas… repare que não há corpo neste método. Isso significa que o corpo deste método
pode ser fornecido em outro arquivo. Se voltarmos para o código em que escrevemos a mão:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Arquivo: UmTipoParcial.cs&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UmTipoParcial&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AlgumOutroMetodo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;UmMetodoParcial&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Podemos ver que aqui nos fornecemos um copo ao método parcial &lt;em&gt;UmMetodoParcial&lt;/em&gt;.
E voltando novamente para o nosso código gerado (parcial):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Arquivo: UmTipoParcial.generated.cs&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UmTipoParcial&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AlgumMetodo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;UmMetodoParcial&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;UmMetodoParcial&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Estamos chamando o método parcial dentro do método &lt;em&gt;AlgumMetodo&lt;/em&gt;, e quando essa chamada é feita,
lembra do corpo que implementamos a mão na nossa classe parcial não gerada? então, aquele corpo será executado.&lt;/p&gt;
&lt;p&gt;Métodos parcials permitem os código gerados a prover maneiras da parte feita a mão, se enganchar nesses métodos.
Se comentarmos o corpo que fizemos para o método da classe gerada anteriomente, não irá causar erro algum. Quando não definimos a implementação para o método, o compilador efetivamente compila pra fora (remove) a declaração do método e onde ele foi chamado, por isso não recebemos nenhum tipo de erro quando executamos o código.&lt;/p&gt;
&lt;p&gt;Então, de forma resumida, tipos parciais são uma maneira de dividir a definição de um tipo em entre vários arquivos.&lt;/p&gt;
&lt;h2&gt;Conversões em tempo de execução com Convert.ChangeType&lt;/h2&gt;
&lt;p&gt;Tem vezes que queremos converter um tipo para outro em tempo de execução (Runtime) porém
não sabemos o tipo ainda, nessas situações, podemos usar o método &lt;em&gt;ChangeType&lt;/em&gt; que recebe como parâmetro
o valor que vai ser convertido e o tipo que queremos que essa entrada seja convertida.&lt;/p&gt;
&lt;p&gt;No exemplo abaixo declarei algumas variáveis.. O valor inicial é atributo o valor &lt;em&gt;“99”&lt;/em&gt; em formato &lt;em&gt;string&lt;/em&gt;.
Para primeira conversão, quero o tipo alvo &lt;em&gt;int&lt;/em&gt;. Então, chamei o método &lt;em&gt;ChangeType&lt;/em&gt; passando o valor inicial
juntamente com o tipo alvo em que quero converter (&lt;em&gt;int&lt;/em&gt;).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ConversoesRuntime&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Exemplo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Type&lt;/span&gt; tipoAlvo&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;Type&lt;/span&gt; tipoConvertido&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt;&lt;/span&gt; valorConvertido&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt;&lt;/span&gt; valorInicial&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        valorInicial &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;99&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        tipoAlvo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token type-expression class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        valorConvertido &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Convert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ChangeType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;valorInicial&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tipoAlvo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        tipoConvertido &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; valorConvertido&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        tipoAlvo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token type-expression class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        valorConvertido &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Convert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ChangeType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;valorInicial&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tipoAlvo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        tipoConvertido &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; valorConvertido&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Se debugarmos esse método, o valor vai ser convertido para o tipo inteiro, passando de &lt;em&gt;“99”&lt;/em&gt; &lt;em&gt;string&lt;/em&gt;
para &lt;em&gt;99&lt;/em&gt; &lt;em&gt;int&lt;/em&gt;. Se continuarmos a execução, quando a variável &lt;em&gt;tipoAlvo&lt;/em&gt; for atributida para o tipo &lt;em&gt;double&lt;/em&gt;
o mesmo vai acontecer, agora do tipo &lt;em&gt;int&lt;/em&gt; para o tipo &lt;em&gt;double&lt;/em&gt;, ou seja, &lt;em&gt;99&lt;/em&gt; para &lt;em&gt;99.0&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Expondo tipos e membros internos (&lt;em&gt;internal&lt;/em&gt;) para assemblies&lt;/h2&gt;
&lt;p&gt;Em cenários mais avançados, há momentos em que precisamos fazer com que alguns membros internos (&lt;em&gt;internal&lt;/em&gt;) que são protegidos, estejam disponíveis para outras assemblies, embora seja uma técnica avançada, ela pode ser útil em alguns casos.&lt;/p&gt;
&lt;p&gt;Vejamos o examplo:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ExemplosInternos&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Exemplo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;PessoaComCoisasInternas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        
        p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Ola&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Mundo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; pi &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;PessoaInterna&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PessoaComCoisasInternas&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Ola&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Mundo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PessoaInterna&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Adeus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Se você tentar rodar esse exemplo, vai perceber erros de compilação dizendo que não há definição do método &lt;em&gt;Mundo&lt;/em&gt; e nenhum método de extensão &lt;em&gt;Mundo&lt;/em&gt; para a classe &lt;em&gt;PessoaComCoisasInternas&lt;/em&gt;… ou seja, não podemos acessar o método &lt;em&gt;Mundo&lt;/em&gt; e também não podemos criar uma instância de uma &lt;em&gt;PessoaInterna&lt;/em&gt;. Se você observar, vai ver que na classe PessoaComCoisasInternas há o método público &lt;em&gt;Ola&lt;/em&gt; e o método &lt;em&gt;Mundo&lt;/em&gt; está definido como &lt;em&gt;internal&lt;/em&gt;. Mais abaixo, a classe interna &lt;em&gt;PessoaInterna&lt;/em&gt;, temos o método público &lt;em&gt;Adeus&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Se quisermos que o método interno &lt;em&gt;Mundo&lt;/em&gt; e também a classe &lt;em&gt;PessoaInterna&lt;/em&gt; sejam acessados fora da assembly atual, nos podemos
usar o atributo de visibilidade para os expor à determinadas assemblies. Mas como?&lt;/p&gt;
&lt;p&gt;Bom, no projeto C# (quando gerado pelo Visual Studio) você tem um arquivo chamado &lt;em&gt;AssemblyInfo.cs&lt;/em&gt; e dentro dele
você tem o atributo de visibilidade:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Arquivo: AssemblyInfo.cs&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token target keyword&quot;&gt;assembly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;InternalsVisibleTo&lt;/span&gt;&lt;span class=&quot;token attribute-arguments&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Demos&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// [assembly: InternalsVisibleTo(&quot;Demos, PublicKey=xxxx&quot;)]&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No atributo, você coloca como primeiro parâmetro o projeto em que você quer compartilhar acesso de membros internos,
se você executar o exemplo anterior (considerando que os membros que são internos estejam em assemblies diferentes, neste caso seria um projeto chamado Demos querendo acessar o projeto proprietário do arquivo AssemblyInfo.cs) novamente com esse atributo já definido, você não vai receber erros como acontecia anteriormente. &lt;/p&gt;
&lt;p&gt;Caso a assembly seja de nome forte &lt;sub&gt; Um assembly com nome forte é gerado usando a chave particular que corresponde à chave pública distribuída com a montagem e a própria montagem. O assembly inclui o manifesto do assembly, que contém os nomes e hashes de todos os arquivos que compõem o assembly.&lt;/sub&gt; você vai precisar de um atributo overload &lt;em&gt;[assembly: InternalsVisibleTo(“Demos, PublicKey=xxxx”)]&lt;/em&gt;, que estava comentado no exemplo anterior, onde agora temos mais um parâmetro que é a chave pública.&lt;/p&gt;
&lt;p&gt;O atributo de visibilidade interna pode ser usado em vários cenários, como por exemplo, quando queremos expor coisas internas para podermos testa-las.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Delegates vs Command Pattern]]></title><description><![CDATA[Aqui está a declaração de um delegate. Pode levar algum tempo para se acostumar com a sintaxe. Visando usar o delegate Operation, nós vamos…]]></description><link>https:igoroctaviano.com/blog/delegates-vs-command/</link><guid isPermaLink="false">https:igoroctaviano.com/blog/delegates-vs-command/</guid><pubDate>Mon, 01 Feb 2016 00:11:00 GMT</pubDate><content:encoded>&lt;h3&gt;Aqui está a declaração de um delegate. Pode levar algum tempo para se acostumar com a sintaxe.&lt;/h3&gt;
&lt;p&gt;Visando usar o delegate &lt;em&gt;Operation&lt;/em&gt;, nós vamos precisar de alguns métodos que correspondem a forma &lt;em&gt;double (double, double)&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Operation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Subtract&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Multiply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Divide&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Não há nada de especial nisso. Agora para criar uma instância do delegate &lt;em&gt;Operation&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Operation&lt;/span&gt; math &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Operation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Add&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Novamente a sintaxe pode lhe deixar um pouco confuso. A linha representada, inicia uma instância de &lt;em&gt;Operation&lt;/em&gt;
com o método &lt;em&gt;Add&lt;/em&gt; e a armazena em uma variável chamada &lt;em&gt;math&lt;/em&gt;. Para usar &lt;em&gt;math&lt;/em&gt;, você ira chamar o método &lt;em&gt;math&lt;/em&gt; como se estivesse
chamando um método qualquer.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;result: {0}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Chamando &lt;em&gt;math&lt;/em&gt; com os parâmetros 1 e 2, cuja atualmente atuando como o método &lt;em&gt;Add&lt;/em&gt;, com os mesmos parâmetros, produz o resultado 3.
O comportamento oposto pode ser conquistado utilizando o método &lt;em&gt;Subtract&lt;/em&gt; ao invés de usar &lt;em&gt;Add&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Operation&lt;/span&gt; math &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Operation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Subtract&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;result: {0}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;math&lt;/em&gt; apenas delegou a chamada com os parâmetros 1 e 2 ao método &lt;em&gt;Subtract&lt;/em&gt; então o resultado foi -1. Até agora isso não é lá muito útil. &lt;/p&gt;
&lt;p&gt;Nós podemos jogar os métodos para o delegate e chama-los por meio dele, mas isso é apenas um monte de trabalho extra.
A força dos Delegates aparecem na jogada quando você não faz idéia de qual método irá utilizar. &lt;strong&gt;Neste caso
a decisão seria feita em tempo de execução e não em tempo de compilação&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Assuma que o código abaixo foi usado em um sistema bancário. A ação mais frequente em um sistema bancário é ajustar
o balanceamento de contas.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AdjustBalanceBy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; adjustment&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Operation&lt;/span&gt; operation&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; newBalance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;balance&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; adjustment&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;token function&quot;&gt;LogAdjustment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;balance&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; newBalance&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; newBalance&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note que &lt;em&gt;AdjustBalanceBy&lt;/em&gt; recebe uma &lt;em&gt;Operation&lt;/em&gt;, o que significa que poderia ser &lt;em&gt;Add&lt;/em&gt;, &lt;em&gt;Subtract&lt;/em&gt;, &lt;em&gt;Multiply&lt;/em&gt; ou &lt;em&gt;Divide&lt;/em&gt; a ser utilizado para ajustar o balancemento da conta.&lt;/p&gt;
&lt;p&gt;Pode haver operações que nós não temos nem mesmo considerado ainda, operações ainda não requisitadas como &lt;em&gt;ApplyInterest&lt;/em&gt;.
&lt;em&gt;AdjustBalanceBy&lt;/em&gt; pode dar conta disso pra nós enquanto nós a dermos um delegate que irá chamar &lt;em&gt;ApplyInterest(double, double)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;O código em &lt;em&gt;AdjustBalanceBy&lt;/em&gt; nunca iria ter necessidade de ser modificado e isso é exatamente
como o princípio Open/Closed diz como deve ser. E como isso pode ser feito sem o uso dos delegates?
O Command Pattern funcionaria muito bem!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Operation&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Operation&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Subtract&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Operation&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token range operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AdjustBalanceBy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; adjustment&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Operation&lt;/span&gt; operation&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; newBalance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; operation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;balance&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; adjustment&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;LogAdjustment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;balance&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; newBalance&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; newBalance&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tem um pouco mais de código sem o uso dos delegates, mas estamos a salvo daquela sintaxe excêntrica.
Considerando a extra complexidade de linguagem dos delegates, sinto que o Command Pattern
tem mais jeito pra coisa, neste caso. Ponto para o Command Pattern!
Delegates 0 - Command Pattern 1.&lt;/p&gt;
&lt;h3&gt;Que tal multicasting?&lt;/h3&gt;
&lt;p&gt;Os Delegates possuem essa habilidade chamada multicasting que o permite adicionar multiplas delegações. Por exemplo:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Operator&lt;/span&gt; math &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Operator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Add&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
math &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Operator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Subtract&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
math &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Operator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Multiply&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
math &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Operator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Divide&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Quando &lt;em&gt;math&lt;/em&gt; é chamado ao final, todas as quatro operações são efetuadas. Neste caso, não é muito útil,
porém para algo tipo um botão, que quando pressionado, várias ações devem ocorrer, o multicasting é bastante conveniente.
Mas o que acontece com todos os valores retornados?&lt;/p&gt;
&lt;p&gt;Cada um desses métodos combinados no delegate &lt;em&gt;math&lt;/em&gt; acima, retorna um valor, porém &lt;em&gt;math&lt;/em&gt; só pode retornar
um valor por vez. &lt;strong&gt;As operações não vão transformando os mesmos numeros em uma sequência, simplesmente
são usados os mesmos valores colocados inicialmente nos parâmetros, sendo os retornos, individuais&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Operation&lt;/span&gt; math &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Operation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;result 1: {0}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
math &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Operation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;subtract&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;result 2: {0}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
math &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Operation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;multiply&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;result 3: {0}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
math &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Operation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;divide&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;result 4: {0}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
OUTPUT
&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;result &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;result &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;result &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;result &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Interessante. Delegates que utilizam multicasting apenas retornam um valor da execução combinada. Isso sugere que
multicasting deve apenas ser utilizada quando você não liga sobre qual o valor retornado.&lt;/p&gt;
&lt;p&gt;O Command Pattern sozinho não compete com multicasting, porém junto com seu companheiro, o Composite Pattern,
a situação fica sob controle.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Composite&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Operation&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;token class-name&quot;&gt;IList&lt;/span&gt; operations &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
     &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt;&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Operation&lt;/span&gt; o &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; operations&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
     &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AddOperation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Operation&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        operations&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;o&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Esta versão do Composite, imita o manuseio do delegate quanto aos valores de retorno, mas ele poderia facilmente média-los,
armazená-los em uma lista, ou fazer qualquer outra coisa que poderia imaginar.&lt;/p&gt;
&lt;p&gt;O Composite Pattern oferece muito mais controle sobre execuções combinadas, então posso dizer que o Command Pattern merece mais um ponto. Delegates 0 - Command Pattern 2.&lt;/p&gt;
&lt;h3&gt;Events&lt;/h3&gt;
&lt;p&gt;Oh.. Dê uma boa olhada nessa sintaxe.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;button&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Click &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;EventHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SomeAction&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Uma interpretação intuitiva: &lt;em&gt;button.Click&lt;/em&gt; - Dizer ao botão que ele foi pressionado &lt;em&gt;button.Click +=&lt;/em&gt; - Adicionar alguma coisa
ao clique do botão..Heh? &lt;em&gt;new System.EventHandler(SomeAction)&lt;/em&gt; - &lt;em&gt;SomeAction&lt;/em&gt; deve ser algum método que se encaixa na forma do &lt;em&gt;EventHandler&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Uma instância do &lt;em&gt;EventHandler&lt;/em&gt; é criada juntamente com &lt;em&gt;SomeAction&lt;/em&gt;. Logo após esses passos lógicos, um desenvolvedor chega
a conclusão que &lt;em&gt;Click&lt;/em&gt; deve ser uma propriedade pública do Botão do &lt;em&gt;EventHandler&lt;/em&gt;, cuja é um delegate.&lt;/p&gt;
&lt;p&gt;E o desenvolvedor estaria errado! &lt;em&gt;Click&lt;/em&gt; é atualmente um &lt;em&gt;Event&lt;/em&gt;. A declaração parece algo do tipo:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cs&quot;&gt;&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;EventHandler&lt;/span&gt; Click&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Toda a construção do &lt;em&gt;Event&lt;/em&gt; é um pouco boba, porque, tanto quanto posso dizer, poderia ser facilmente substituida
com um campo (ou propriedade) pública. 1 ponto a menos aos delegates por flagrante mal uso de sintaxe.&lt;/p&gt;
&lt;p&gt;Pontuação final? delegates: -1; Command Pattern: 2&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Esse post é de autoria de &lt;strong&gt;&lt;a href=&quot;https://twitter.com/slagyr&quot;&gt;Micah Martin&lt;/a&gt;&lt;/strong&gt; que é o cofundador da &lt;a href=&quot;https://8thlight.com/&quot;&gt;8th Light&lt;/a&gt; e é conhecido pelo seu trabalho na área de open source como &lt;a href=&quot;https://github.com/unclebob/fitnesse&quot;&gt;FitNesse&lt;/a&gt;, &lt;a href=&quot;https://blog.8thlight.com/micah-martin/2013/07/19/limelight-lives-clojure-tool-chain.html&quot;&gt;Limelight&lt;/a&gt;, &lt;a href=&quot;https://github.com/slagyr/joodo&quot;&gt;Joodo&lt;/a&gt; e &lt;a href=&quot;https://github.com/slagyr/speclj&quot;&gt;Speclj&lt;/a&gt;. E de curiosidade, Micah é filho do Robert Martin (conhecido como &lt;strong&gt;&lt;a href=&quot;https://twitter.com/unclebobmartin&quot;&gt;Uncle Bob&lt;/a&gt;&lt;/strong&gt;), autor de vários livros conhecidos aos desenvolvedores (comece procurando por Clean Code), altamente recomendo a todos que não deixem de dar uma boa olhada nesses livros! Para mais informações, acesse &lt;a href=&quot;https://sites.google.com/site/unclebobconsultingllc/books&quot;&gt;aqui&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Você também pode acessar a publicação original feita por Micah no blog do 8th Light por &lt;a href=&quot;https://blog.8thlight.com/micah-martin/2006/09/07/delegates-vs-command-pattern.html&quot;&gt;aqui&lt;/a&gt;.&lt;/p&gt;</content:encoded></item></channel></rss>