{"componentChunkName":"component---src-templates-blog-post-js","path":"/dicas-e-armadilhas-em-c#/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"3b589cb7-8a32-5366-8854-5f966b1cb01e","excerpt":"O operador null-coalescing A tradução de coalescing é coagular, aderir, amalgamar, juntar…etc Provavelmente alguma vez você já fez algo parecido com esse código…","html":"<h2>O operador null-coalescing</h2>\n<p><sub>A tradução de coalescing é coagular, aderir, amalgamar, juntar…etc</sub></p>\n<p>Provavelmente alguma vez você já fez algo parecido com esse código abaixo e\nprovavelmente você não sabia que podia ser feito com o operador null-coalescing:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// Código sem o operador null-coalescing</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> nome <span class=\"token operator\">=</span> <span class=\"token function\">BuscarAlgumNomeEmAlgumLugar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nome <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    resultado <span class=\"token operator\">=</span> <span class=\"token string\">\"nenhum nome foi dado.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span>\n<span class=\"token punctuation\">{</span>\n    resultado <span class=\"token operator\">=</span> nome<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Código com o operador null-coalescing</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> nome <span class=\"token operator\">=</span> <span class=\"token string\">\"Igor\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> resultado <span class=\"token operator\">=</span> nome <span class=\"token operator\">??</span> <span class=\"token string\">\"nenhum nome foi dado.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Saída: Igor</span>\n\nnome <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\nresultado <span class=\"token operator\">=</span> nome <span class=\"token operator\">??</span> <span class=\"token string\">\"nenhum nome foi dado.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Saída: nenhum nome foi dado.</span>\n\n<span class=\"token comment\">// Também podemos usar com atributos que podem ser nulo</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">?</span></span> idade <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\nresultado <span class=\"token operator\">=</span> idade <span class=\"token operator\">??</span> <span class=\"token number\">0</span>\n<span class=\"token comment\">// Saída: 0</span>\n\n<span class=\"token comment\">// E também encadear os operadores</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">?</span></span> idadeLocalPadrao <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> idadeGlobalPadrao <span class=\"token operator\">=</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span>\n\nidade <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\nresultado <span class=\"token operator\">=</span> idade <span class=\"token operator\">??</span> idadeLocalPadrao <span class=\"token operator\">??</span> idadeGlobalPadrao<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Saída: 99</span></code></pre></div>\n<p>Como podemos ver, o resultado é igual a <em>nome</em> se <em>nome</em> já possui algum valor atribuido.\nCaso contrário, é resgatado o valor ao lado direito do perador <strong>??</strong>.</p>\n<h2>O perigo de chamar métodos virtuais dentro de construtores</h2>\n<p>Quando estamos trabalhando com classes com membros virtuais que podem ser sobreescritos (<em>override</em>),\né uma boa ideia não chamar esses membros dentro de construtores, pois isso pode ser um tanto perigoso.\nO autor da sub classe  (numa situação de herança) talvez não saiba que o construtor dependa desse método\npara implementar alguma coisa corretamente. Vamos ao exemplo do perigo que pode ocorrer:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClasseBase</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> comprimento<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> nome<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">BaseClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">InitNome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        comprimento <span class=\"token operator\">=</span> nome<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">InitNome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        nome <span class=\"token operator\">=</span> <span class=\"token string\">\"Igor\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Temos uma classe chamada <em>ClasseBase</em>, em seu construtor há uma chamada para o método protegido\n<em>InitNome</em> definido logo abaixo, esse método atribui o nome <em>“Igor”</em> à variável nome. O contrutor continua e\nartibui à variável comprimento o comprimento da variável tipo <em>string</em> <em>nome</em>.</p>\n<p>Ok, então agora vamos adicionar mais coisa no jogo aqui. Uma classe herdeira de <em>ClasseBase</em> chamada <em>ClasseDerivada</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClasseDerivada</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ClasseBase</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">InitNome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        nome <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Na classe derivada, foi sobrescrito o método virtual <em>InitNome</em>. O autor da <em>ClasseDerivada</em> decidiu que o valor\ndefault para a variável <em>nome</em> deve ser <em>null</em> (tipo nulo).</p>\n<p>Tente instânciar a classe derivada e ver o que acontece.. você vai receber uma exceção de referência nula, mas porque?\nporque quando você instância a classe derivada, o construtor da classe base, mãe desta classe, vai chamar o método\nvritual <em>InitNome</em> no qual foi sobrescrito nessa classe derivada, no qual agora o nome é igual a nulo. Sendo assim,\nquando o construtor tentar pegar o comprimento da variável <em>nome</em>, logo após executar o método virtual <em>InitNome</em>, vai acontecer\nque agora o nome é nulo e nulo não possui comprimento, nulo é nulo (não há referência nessa variável).</p>\n<p>Então é por isso que não se deve ficar colocando chamadas de métodos virtuais em construtores.</p>\n<h2>Métodos e tipos parciais</h2>\n<p>Tipos parciais nos permite dividir a definição de um tipo entre vários arquivos. Por exemplo: uma classe pode\nser especificada em mais de um arquivo <em>.cs</em>. </p>\n<p>Neste exemplo estou criando uma nova instância de um tipo parcial e estou chamando os métodos <em>AlgumMetodo</em> e <em>AlgumOutroMetodo</em>.\nNada diferente até então..</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// Arquivo: TiposParciaisEMetodos.cs</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TiposParciaisEMetodos</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Examplo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UmTipoParcial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">AlgumMetodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">AlgumOutroMetodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Agora se olharmos para a definição de <em>UmTipoParcial</em>. Podemos ver que nós apenas temos o método <em>AlgumOutroMetodo</em> definido.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// Arquivo: UmTipoParcial.cs</span>\n<span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UmTipoParcial</span> \n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AlgumOutroMetodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">partial</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">UmMetodoParcial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O método <em>AlgumMetodo</em> não está em lugar algum. (Vamos voltar a falar sobre esse método <em>UmMetodoParcial</em> em breve..)</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// Arquivo: TiposParciaisEMetodos.cs</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TiposParciaisEMetodos</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Exemplo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UmTipoParcial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">AlgumMetodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">AlgumOutroMetodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Então fica a pergunta, a onde está esta definido esse método <em>AlgumMetodo</em>?\nBom, neste exemplo, ela foi divido em outo arquivo, chamado <em>UmTipoParcial.generated.cs</em>.\nNão estamos utilizando herança aqui, é simplesmente uma maneira de dividir a definição em multiplos arquivos.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// Arquivo: UmTipoParcial.generated.cs</span>\n<span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UmTipoParcial</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AlgumMetodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">UmMetodoParcial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">partial</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">UmMetodoParcial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Classes parcials trazem benefício quando estamos trabalhando com código gerado. O código gerado, pode fazer a classe parcial,\no que nos permite criar um arquivo <em>.cs</em> irmão e adicionar novos métodos. Desta forma, se o código gerado originalmente\nfor regenerado, não vamos perder os métodos adicionais nos adicionamos. Sendo que a parte daquela classe que foi dividida em que\nescrevemos o código na mão vai permanecer intacta.</p>\n<p>Para dizermos que uma classe é do tipo parcial, a palavra-chave <em>partial</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NomeDaClasse</span>  <span class=\"token comment\">// Você pode aplicar partial em todas as partes que devem ser irmãs</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Quando estamos tralhando com classes parcials, também podemos trabalhar com métodos parciais.\nPodemos ver que em nosso arquivo gerado <em>UmTipoParcial.generated.cs</em> há um método parcial chamado <em>UmMetodoParcial</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// Arquivo: UmTipoParcial.generated.cs</span>\n<span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UmTipoParcial</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AlgumMetodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">UmMetodoParcial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">partial</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">UmMetodoParcial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Métodos parcials devem retornar void e eles são implicitamente privados no escopo. Neste exemplo, é declarado\num método que é parcial, mas… repare que não há corpo neste método. Isso significa que o corpo deste método\npode ser fornecido em outro arquivo. Se voltarmos para o código em que escrevemos a mão:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// Arquivo: UmTipoParcial.cs</span>\n<span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UmTipoParcial</span> \n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AlgumOutroMetodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">partial</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">UmMetodoParcial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Podemos ver que aqui nos fornecemos um copo ao método parcial <em>UmMetodoParcial</em>.\nE voltando novamente para o nosso código gerado (parcial):</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// Arquivo: UmTipoParcial.generated.cs</span>\n<span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UmTipoParcial</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AlgumMetodo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">UmMetodoParcial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">partial</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">UmMetodoParcial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Estamos chamando o método parcial dentro do método <em>AlgumMetodo</em>, e quando essa chamada é feita,\nlembra do corpo que implementamos a mão na nossa classe parcial não gerada? então, aquele corpo será executado.</p>\n<p>Métodos parcials permitem os código gerados a prover maneiras da parte feita a mão, se enganchar nesses métodos.\nSe comentarmos o corpo que fizemos para o método da classe gerada anteriomente, não irá causar erro algum. Quando não definimos a implementação para o método, o compilador efetivamente compila pra fora (remove) a declaração do método e onde ele foi chamado, por isso não recebemos nenhum tipo de erro quando executamos o código.</p>\n<p>Então, de forma resumida, tipos parciais são uma maneira de dividir a definição de um tipo em entre vários arquivos.</p>\n<h2>Conversões em tempo de execução com Convert.ChangeType</h2>\n<p>Tem vezes que queremos converter um tipo para outro em tempo de execução (Runtime) porém\nnão sabemos o tipo ainda, nessas situações, podemos usar o método <em>ChangeType</em> que recebe como parâmetro\no valor que vai ser convertido e o tipo que queremos que essa entrada seja convertida.</p>\n<p>No exemplo abaixo declarei algumas variáveis.. O valor inicial é atributo o valor <em>“99”</em> em formato <em>string</em>.\nPara primeira conversão, quero o tipo alvo <em>int</em>. Então, chamei o método <em>ChangeType</em> passando o valor inicial\njuntamente com o tipo alvo em que quero converter (<em>int</em>).</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConversoesRuntime</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Exemplo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Type</span> tipoAlvo<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Type</span> tipoConvertido<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> valorConvertido<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> valorInicial<span class=\"token punctuation\">;</span>\n\n        valorInicial <span class=\"token operator\">=</span> <span class=\"token string\">\"99\"</span><span class=\"token punctuation\">;</span>\n        tipoAlvo <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        valorConvertido <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ChangeType</span><span class=\"token punctuation\">(</span>valorInicial<span class=\"token punctuation\">,</span> tipoAlvo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tipoConvertido <span class=\"token operator\">=</span> valorConvertido<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        tipoAlvo <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\"><span class=\"token keyword\">double</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        valorConvertido <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ChangeType</span><span class=\"token punctuation\">(</span>valorInicial<span class=\"token punctuation\">,</span> tipoAlvo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tipoConvertido <span class=\"token operator\">=</span> valorConvertido<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Se debugarmos esse método, o valor vai ser convertido para o tipo inteiro, passando de <em>“99”</em> <em>string</em>\npara <em>99</em> <em>int</em>. Se continuarmos a execução, quando a variável <em>tipoAlvo</em> for atributida para o tipo <em>double</em>\no mesmo vai acontecer, agora do tipo <em>int</em> para o tipo <em>double</em>, ou seja, <em>99</em> para <em>99.0</em>.</p>\n<h2>Expondo tipos e membros internos (<em>internal</em>) para assemblies</h2>\n<p>Em cenários mais avançados, há momentos em que precisamos fazer com que alguns membros internos (<em>internal</em>) que são protegidos, estejam disponíveis para outras assemblies, embora seja uma técnica avançada, ela pode ser útil em alguns casos.</p>\n<p>Vejamos o examplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExemplosInternos</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Exemplo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PessoaComCoisasInternas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        p<span class=\"token punctuation\">.</span><span class=\"token function\">Ola</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        p<span class=\"token punctuation\">.</span><span class=\"token function\">Mundo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> pi <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PessoaInterna</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PessoaComCoisasInternas</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Ola</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">internal</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Mundo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PessoaInterna</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Adeus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Se você tentar rodar esse exemplo, vai perceber erros de compilação dizendo que não há definição do método <em>Mundo</em> e nenhum método de extensão <em>Mundo</em> para a classe <em>PessoaComCoisasInternas</em>… ou seja, não podemos acessar o método <em>Mundo</em> e também não podemos criar uma instância de uma <em>PessoaInterna</em>. Se você observar, vai ver que na classe PessoaComCoisasInternas há o método público <em>Ola</em> e o método <em>Mundo</em> está definido como <em>internal</em>. Mais abaixo, a classe interna <em>PessoaInterna</em>, temos o método público <em>Adeus</em>.</p>\n<p>Se quisermos que o método interno <em>Mundo</em> e também a classe <em>PessoaInterna</em> sejam acessados fora da assembly atual, nos podemos\nusar o atributo de visibilidade para os expor à determinadas assemblies. Mas como?</p>\n<p>Bom, no projeto C# (quando gerado pelo Visual Studio) você tem um arquivo chamado <em>AssemblyInfo.cs</em> e dentro dele\nvocê tem o atributo de visibilidade:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token comment\">// Arquivo: AssemblyInfo.cs</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">InternalsVisibleTo</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Demos\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// [assembly: InternalsVisibleTo(\"Demos, PublicKey=xxxx\")]</span>\n\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>No atributo, você coloca como primeiro parâmetro o projeto em que você quer compartilhar acesso de membros internos,\nse você executar o exemplo anterior (considerando que os membros que são internos estejam em assemblies diferentes, neste caso seria um projeto chamado Demos querendo acessar o projeto proprietário do arquivo AssemblyInfo.cs) novamente com esse atributo já definido, você não vai receber erros como acontecia anteriormente. </p>\n<p>Caso a assembly seja de nome forte <sub> Um assembly com nome forte é gerado usando a chave particular que corresponde à chave pública distribuída com a montagem e a própria montagem. O assembly inclui o manifesto do assembly, que contém os nomes e hashes de todos os arquivos que compõem o assembly.</sub> você vai precisar de um atributo overload <em>[assembly: InternalsVisibleTo(“Demos, PublicKey=xxxx”)]</em>, que estava comentado no exemplo anterior, onde agora temos mais um parâmetro que é a chave pública.</p>\n<p>O atributo de visibilidade interna pode ser usado em vários cenários, como por exemplo, quando queremos expor coisas internas para podermos testa-las.</p>","frontmatter":{"title":"Dias e Armadilhas em C#","date":"February 01, 2016","description":""}},"previous":{"fields":{"slug":"/dom/"},"frontmatter":{"title":"O que é a DOM?"}},"next":{"fields":{"slug":"/template-e-strategy/"},"frontmatter":{"title":"Template Method e Strategy"}}},"pageContext":{"id":"3b589cb7-8a32-5366-8854-5f966b1cb01e","previousPostId":"08c6430e-e03b-5e89-808f-67b55d425776","nextPostId":"46fd3d28-0196-580f-8b8b-83650075328a"}},"staticQueryHashes":["2841359383","916993862"]}