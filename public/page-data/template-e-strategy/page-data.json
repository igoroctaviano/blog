{"componentChunkName":"component---src-templates-blog-post-js","path":"/template-e-strategy/","result":{"data":{"site":{"siteMetadata":{"title":"Blog"}},"markdownRemark":{"id":"46fd3d28-0196-580f-8b8b-83650075328a","excerpt":"Separar algoritmos dos detalhes de sua implementação, óh “REUTILIZAÇÃO”. A melhor estratégia na vida é a diligência.  -Provérbio chines Acho super interessante…","html":"<h3>Separar algoritmos dos detalhes de sua implementação, óh “REUTILIZAÇÃO”.</h3>\n<p><em>A melhor estratégia na vida é a diligência.  -Provérbio chines</em></p>\n<p>Acho super interessante quando o estudo é feito pela diferença, ou seja, quando se estuda algum campo utilizando heurísticas e até mesmo metáforas. Mas como assim? bom, podemos pensar que nós nos demos conta de alguma coisa pela noção de uma variação da mesma, como a própria temperatura, em que sabemos que existe, porque afinal, existem variações dela, mas que se fosse uma constante, como é que a teríamos percebido? Então, acho interessante estudar comparando, é mais fácil e interessante também. Mas como tudo tem outro lado, nem TUDO é possível estudar assim, mas neste caso, ficou bem mais produtivo e esclarecedor.</p>\n<p>Ambos <strong>Template Method</strong> e <strong>Strategy</strong> <a href=\"https://en.wikipedia.org/wiki/Design_Patterns\">(padrões de projeto)</a> resolvem o problema de separar um algoritmo genérico de um contexto detalhado. Nós frequentemente vemos a necessidade disso no design do software. Nós temos um algoritmo que é genéricamente aplicável. Em ordem para conformar com o Dependency-Inversion Principle (DIP), nós queremos\nnos assegurar que o algoritmo genérico não dependa dos detalhes de sua implementação. Ainda mais,\nnós queremos que este algoritmo genérico e os seus detalhes de implementação dependam em abstrações.</p>\n<h2>TEMPLATE METHOD</h2>\n<p>Considere todos os programas em que você já tenha escrevido. Vários provavelmente tem essa estrutura <em>main loop</em> fundamental:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token number\">1</span>  <span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">2</span>  While <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// main loop</span>\n<span class=\"token number\">3</span>  <span class=\"token punctuation\">{</span>\n<span class=\"token number\">4</span>    <span class=\"token function\">Idle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// do something useful.</span>\n<span class=\"token number\">5</span>  <span class=\"token punctuation\">}</span>\n<span class=\"token number\">6</span>  <span class=\"token function\">Cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Antes de mais nada, nós inicializamos a aplicação. Então nós entramos no <em>main loop</em>, onde nós fazemos o\nque quer que o programa necessite fazer. Nós talvez processamos eventos de interface de usuário ou talvez algumas\ngravações no banco de dados. Finalmente, uma vez que terminamos, saimos do <em>main loop</em> e limpamos tudo antes de sair.</p>\n<p>Essa estrutura é tão comum que podemos a capturar em uma classe que vamos chamar de <em>Application</em>. Então vamos poder reutilizar essa classe para qualquer novo programa que possamos criar. Pense só! Nunca mais vamos ter que escrever esse <em>loop</em> denovo!¹</p>\n<p><sub>1. Eu te vendo o meu loop.</sub></p>\n<p>Por exemplo, considere o código abaixo:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token number\">1</span>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FtoCRaw</span>\n<span class=\"token number\">2</span>  <span class=\"token punctuation\">{</span>\n<span class=\"token number\">4</span>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n<span class=\"token number\">5</span>    <span class=\"token punctuation\">{</span>\n<span class=\"token number\">6</span>      <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> done <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">7</span>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>done<span class=\"token punctuation\">)</span>\n<span class=\"token number\">8</span>      <span class=\"token punctuation\">{</span>\n<span class=\"token number\">9</span>        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> fahrString <span class=\"token operator\">=</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">10</span>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fahrString <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> fahrString<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">11</span>         done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">12</span>       <span class=\"token keyword\">else</span>\n<span class=\"token number\">13</span>       <span class=\"token punctuation\">{</span>\n<span class=\"token number\">14</span>         <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> fahr <span class=\"token operator\">=</span> Double<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>fahrString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">15</span>         <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> celsius <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span><span class=\"token operator\">/</span><span class=\"token number\">9.0</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>fahr <span class=\"token operator\">-</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">16</span>         Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F={0}, C={1}\"</span><span class=\"token punctuation\">,</span> fahr<span class=\"token punctuation\">,</span> celsius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">17</span>       <span class=\"token punctuation\">}</span>\n<span class=\"token number\">18</span>     <span class=\"token punctuation\">}</span>\n<span class=\"token number\">19</span>     Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ftoc exit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">20</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">21</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esse programa tem todos os elementos da estrutura <em>main loop</em> anterior. Faz uma leve inicialização, faz o seu trabalho em um <em>main loop</em> (loop principal) e então limpa e sai.</p>\n<p>Nós podemos separar essa estrutura fundamental do programa <em>ftoc</em> (FahrenheitToCelsius) utilizando o <strong>Template Method</strong>. Esse padrão aloca todo o código genérico em um método implementado em uma classe base abstrata. O método implementado captura o algoritmo genérico, mas, adia todos os detalhes a métodos abstratos da classe base.</p>\n<p>Então, como exemplo, vamos capturar a estrutura <em>main loop</em> em uma classe base abstrata chamada <em>Application</em>. Observe o código:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token number\">1</span>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span>\n<span class=\"token number\">2</span>  <span class=\"token punctuation\">{</span>\n<span class=\"token number\">3</span>    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isDone <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">4</span>    \n<span class=\"token number\">5</span>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">6</span>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Idle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">7</span>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">8</span>    \n<span class=\"token number\">9</span>    <span class=\"token keyword\">protected</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">10</span>   <span class=\"token punctuation\">{</span>\n<span class=\"token number\">11</span>     isDone <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">12</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">13</span>   \n<span class=\"token number\">14</span>   <span class=\"token keyword\">protected</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">15</span>   <span class=\"token punctuation\">{</span>\n<span class=\"token number\">16</span>     <span class=\"token keyword\">return</span> isDone<span class=\"token punctuation\">;</span>\n<span class=\"token number\">17</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">18</span>   \n<span class=\"token number\">19</span>   <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">20</span>   <span class=\"token punctuation\">{</span>\n<span class=\"token number\">21</span>     <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">22</span>     While <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">23</span>       <span class=\"token function\">Idle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">24</span>     <span class=\"token function\">Cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">25</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">26</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Essa classe descreve uma aplicação de uma estrutura de <em>main loop</em> genérica. Podemos ver o <em>main loop</em>\nna função implamentada <em>Run</em>. Nós também podemos ver que todo o trabalho esta sendo colocado aos métodos abstratos\n<em>Init</em>, <em>Idle</em> e <em>Cleanup</em>. O método Init cuida de qualquer inicialização, <em>Idle</em> faz a principal parte do trabalho e será chamado\nrepetidamente até que o trabalho esteja feito. O <em>Cleanup</em> faz qualquer necessidade antes que saia do método.</p>\n<p>Nós podemos reescrever a classe <em>ftoc</em> simplesmente herdando de <em>Application</em> e implementando os métodos abstrados. Exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token number\">1</span>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FtoCTemplateMethod</span> <span class=\"token punctuation\">:</span> Application\n<span class=\"token number\">2</span>  <span class=\"token punctuation\">{</span>\n<span class=\"token number\">3</span>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TextReader</span> input<span class=\"token punctuation\">;</span>\n<span class=\"token number\">4</span>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TextWriter</span> output<span class=\"token punctuation\">;</span>\n<span class=\"token number\">5</span>   \n<span class=\"token number\">7</span>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n<span class=\"token number\">8</span>    <span class=\"token punctuation\">{</span>\n<span class=\"token number\">9</span>      <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FtoCTemplateMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">10</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">11</span>  \n<span class=\"token number\">12</span>   <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">13</span>   <span class=\"token punctuation\">{</span>\n<span class=\"token number\">14</span>     input <span class=\"token operator\">=</span> Console<span class=\"token punctuation\">.</span>In<span class=\"token punctuation\">;</span>\n<span class=\"token number\">15</span>     output <span class=\"token operator\">=</span> Console<span class=\"token punctuation\">.</span>Out<span class=\"token punctuation\">;</span>\n<span class=\"token number\">16</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">17</span>  \n<span class=\"token number\">18</span>   <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Idle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">19</span>   <span class=\"token punctuation\">{</span>\n<span class=\"token number\">20</span>     <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> fahrString <span class=\"token operator\">=</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">21</span>     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fahrString <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> fahrString<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">22</span>        <span class=\"token function\">SetDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">23</span>      <span class=\"token keyword\">else</span>\n<span class=\"token number\">24</span>      <span class=\"token punctuation\">{</span>\n<span class=\"token number\">25</span>        <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> fahr <span class=\"token operator\">=</span> Double<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>fahrString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">26</span>        <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> celsius <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span><span class=\"token operator\">/</span><span class=\"token number\">9.0</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>fahr <span class=\"token operator\">-</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">27</span>        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F={0}, C={1}\"</span><span class=\"token punctuation\">,</span> fahr<span class=\"token punctuation\">,</span> celsius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">28</span>      <span class=\"token punctuation\">}</span>\n<span class=\"token number\">29</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">30</span>  \n<span class=\"token number\">31</span>   <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">32</span>   <span class=\"token punctuation\">{</span>\n<span class=\"token number\">33</span>     output<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ftoc exit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">34</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">35</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>É fácil ver como a antiga aplicação <em>ftoc</em> (Fahrenheit to Celsius) foi encaixada ao padrão <strong>Template Method</strong>.</p>\n<h3>Abuso de padrões</h3>\n<p>Até então, você deve estar pensando “Sério? Esse cara realmente me espera usar a classe <em>Application</em> para todos os novos aplicativos? Isso não me trouxe nenhuma vantagem significativa, e complicou ainda mais o problema.”</p>\n<p>Er…Sim.. :^(</p>\n<p>O exemplo foi escolhido porque ele era simples e demonstrou ser uma boa plataforma para mostrar os mecanismos do padrão de projeto <strong>Template Method</strong>.\nMas do outro lado, eu realmente não recomendo construir a aplicação <em>ftoc</em> como foi feita.</p>\n<p>Este é um bom exemplo de abuso de padrões. Utilizando o padrão <strong>Template Method</strong> para essa aplicação em particular é ridículo. Isso complica o programa e faz ele ficar maior. Encapsular o <em>main loop</em> de toda aplicação do universo meio que pareceu algo lindo e maravilhoso de se fazer quando nós começamos a falar sobre isso, mas em uma aplicação real isso não é produtivo.</p>\n<p>Padrões de Projeto são coisas maravilhosas. Eles podem lhe ajudar com vários problemas de design. Mas o fato que eles existem não\nsignifica que eles devem sempre ser utilizados. Neste caso, o <strong>Template Method</strong> foi aplicável ao problema mas seu uso não foi recomendado. <strong>O custo do padrão foi maior que o benefício que ele trouxe</strong>.</p>\n<h3>Bubble Sort</h3>\n<p>Então, vamos olhar para um exemplo um pouco mais útil. Observe que como <em>Application</em>, uma aplicação com o algoritmo <em>Bubble Sort</em> é um exemplo fácil de entender, e então, se faz uma ferramenta poderosa de ensino. Embora, nenhuma pessoa em sua sanidade iria utilizar o algoritmo <em>Bubble Sort</em> se ela tiver que fazer um número significante de ordenações. Existem <em>muitos</em> outros algoritmos melhores pra isso.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token number\">1</span>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BubbleSorter</span>\n<span class=\"token number\">2</span>  <span class=\"token punctuation\">{</span>\n<span class=\"token number\">3</span>    <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> operations <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">4</span>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array<span class=\"token punctuation\">)</span>\n<span class=\"token number\">5</span>    <span class=\"token punctuation\">{</span>\n<span class=\"token number\">6</span>      operations <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">7</span>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">8</span>        <span class=\"token keyword\">return</span> operations<span class=\"token punctuation\">;</span>\n<span class=\"token number\">9</span>        \n<span class=\"token number\">10</span>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> nextToLast <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>Length<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> nextToLast <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> nextToLast<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">11</span>       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;=</span> nextToLast<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">12</span>         <span class=\"token function\">CompareAndSwap</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">13</span>         \n<span class=\"token number\">14</span>     <span class=\"token keyword\">return</span> operations<span class=\"token punctuation\">;</span>\n<span class=\"token number\">15</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">16</span>   \n<span class=\"token number\">17</span>   <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">)</span>\n<span class=\"token number\">18</span>   <span class=\"token punctuation\">{</span>\n<span class=\"token number\">19</span>     <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> temp <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">20</span>     array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">21</span>     array<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token number\">22</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">23</span>   \n<span class=\"token number\">24</span>   <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CompareAndSwap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">)</span>\n<span class=\"token number\">25</span>   <span class=\"token punctuation\">{</span>\n<span class=\"token number\">26</span>     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">27</span>       <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">28</span>     operations<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">29</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">30</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>A classe <em>BubbleSorter</em> sabe como ordenar um vetor de inteiros, utilizando o algoritmo <em>Bubble Sort</em>. O método <em>Sort</em>\nda classe, contém o algoritmo que sabe como fazer um <em>Bubble Sort</em>. Os dois métodos auxiliares -<em>Swap</em> e <em>CompareAndSwap</em> -Lidam\ncom os detalhes de inteiros, etores e também manipula a mecânica que o algoritmo dentro de <em>Sort</em> precisa.</p>\n<p>Utilizando o padrão <strong>Template Method</strong>, nós podemos separar o algorito <em>Bubble Sort</em> para dentro de uma classe base abstrata chamada\n<em>BubbleSorter</em>. A classe <em>BubbleSorter</em> contém uma implementação de função chamada <em>Sort</em> que chama um método abstrato chamado <em>OutOfOrder</em> e outro chamado <em>Swap</em>. O método <em>OutOfOrder</em> compara dois elementos adjacentes no vetor e retorna <em>true</em> se os elementos estão fora de ordem. O método <em>Swap</em> troca as duas celulas adjacentes no vetor que estejam fora de ordem.</p>\n<p>O método <em>Sort</em> não sabe nada sobre o vetor; nem ele liga sobre qual o tipo do objeto que está sendo armazenado no vetor. Ele simplesmente chama <em>OutOfOrder</em> para vários índices do vetor e determina quando esses índices devem ser trocados. Observe:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token number\">1</span>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BubbleSorter</span>\n<span class=\"token number\">2</span>  <span class=\"token punctuation\">{</span>\n<span class=\"token number\">3</span>    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> operations <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">4</span>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">5</span>  \n<span class=\"token number\">6</span>    <span class=\"token keyword\">protected</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">DoSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">7</span>    <span class=\"token punctuation\">{</span>\n<span class=\"token number\">8</span>      operations <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">9</span>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">10</span>       <span class=\"token keyword\">return</span> operations<span class=\"token punctuation\">;</span>\n<span class=\"token number\">11</span>\n<span class=\"token number\">12</span>     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> nextToLast <span class=\"token operator\">=</span> length<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> nextToLast <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> nextToLast<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">13</span>       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;=</span> nextToLast<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">14</span>       <span class=\"token punctuation\">{</span>\n<span class=\"token number\">15</span>         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">OutOfOrder</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">16</span>           <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">17</span>         operations<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">18</span>       <span class=\"token punctuation\">}</span>\n<span class=\"token number\">19</span>      \n<span class=\"token number\">20</span>     <span class=\"token keyword\">return</span> operations<span class=\"token punctuation\">;</span>\n<span class=\"token number\">21</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">22</span>  \n<span class=\"token number\">23</span>   <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">24</span>   <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">OutOfOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">25</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Dado <em>BubbleSorter</em>, nós podemos criar simples derivações que podem ordenar vários outros tipos de objeto. Por exemplo, podemos\ncriar <em>IntBubbleSorter</em>, no qual ordena um vetor de inteiros e <em>DoubleBubbleSorter</em>, que faz ordenação de objetos de ponto flutuante. Por exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token number\">1</span>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IntBubbleSorter</span> <span class=\"token punctuation\">:</span> BubbleSorter\n<span class=\"token number\">2</span>  <span class=\"token punctuation\">{</span>\n<span class=\"token number\">3</span>    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">4</span>   \n<span class=\"token number\">5</span>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> theArray<span class=\"token punctuation\">)</span>\n<span class=\"token number\">6</span>    <span class=\"token punctuation\">{</span>\n<span class=\"token number\">7</span>      array <span class=\"token operator\">=</span> theArray<span class=\"token punctuation\">;</span>\n<span class=\"token number\">8</span>      length <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n<span class=\"token number\">9</span>      <span class=\"token keyword\">return</span> <span class=\"token function\">DoSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">10</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">11</span>  \n<span class=\"token number\">12</span>   <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">)</span>\n<span class=\"token number\">13</span>   <span class=\"token punctuation\">{</span>\n<span class=\"token number\">14</span>     <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> temp <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">15</span>     array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">16</span>     array<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token number\">17</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">18</span>  \n<span class=\"token number\">19</span>   <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">OutOfOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">)</span>\n<span class=\"token number\">20</span>   <span class=\"token punctuation\">{</span>\n<span class=\"token number\">21</span>     <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">22</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">23</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token number\">1</span>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DoubleBubbleSorter</span> <span class=\"token punctuation\">:</span> BubbleSorter\n<span class=\"token number\">2</span>  <span class=\"token punctuation\">{</span>\n<span class=\"token number\">3</span>    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">4</span>   \n<span class=\"token number\">5</span>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> theArray<span class=\"token punctuation\">)</span>\n<span class=\"token number\">6</span>    <span class=\"token punctuation\">{</span>\n<span class=\"token number\">7</span>      array <span class=\"token operator\">=</span> theArray<span class=\"token punctuation\">;</span>\n<span class=\"token number\">8</span>      length <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n<span class=\"token number\">9</span>      <span class=\"token keyword\">return</span> <span class=\"token function\">DoSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">10</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">11</span>  \n<span class=\"token number\">12</span>   <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">)</span>\n<span class=\"token number\">13</span>   <span class=\"token punctuation\">{</span>\n<span class=\"token number\">14</span>     <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> temp <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">15</span>     array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">16</span>     array<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token number\">17</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">18</span>  \n<span class=\"token number\">19</span>   <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">OutOfOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">)</span>\n<span class=\"token number\">20</span>   <span class=\"token punctuation\">{</span>\n<span class=\"token number\">21</span>     <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">22</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">23</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>O padrão <strong>Template Method</strong> mostra uma das formas classicas de reutilização em Programação Orientada a Objetos. Algoritmos genéricos são colocamos em uma classe base e herdados para diferentes contextos. Mas essa técnica tem seus custos. <strong>Herança</strong> é uma relação muito forte. Derivações estão muito amarradas a suas classes base (classes mãe).</p>\n<p>Como podemos observar, os métodos <em>OutOfOrder</em> e <em>Swap</em> de <em>IntBubbleSorter</em> são exatamente o que outros tipos de algoritmos de ordenação precisam. Mas não tem nenhuma forma de reutilizar <em>OutOfOrder</em> e <em>Swap</em> em outros algoritmos de ordenação. Herdando de <em>BubbleSorter</em> nós condenamos <em>IntBubbleSorter</em> a ser eternamente amarrado ao <em>BubbleSorter</em>. O padrão <strong>Strategy</strong> dispõe de outra opção.</p>\n<h2>STRATEGY</h2>\n<p>O padrão <strong>Strategy</strong> resolve o problema da inversão de dependência do algoritmo genérico e os detalhes de implementação em uma maneira bem diferente. Considere novamente o abuso de padrão do exemplo <em>Application</em> apresentado anteriormente.</p>\n<p>Ao invés de colocarmos a aplicação do algoritmo genérico em uma classe base abstrata, nós vamos a transportar para uma classe <em>concreta</em> chamada <em>ApplicationRunner</em>. Nós definimos os métodos abstratos que o algoritmo genérico deve chamar dentro da <em>interface</em> chamada <em>Application</em>. Nós derivamos <em>FtoCStrategy</em> dessa interface e passamos ela para a <em>ApplicationRunner</em>. <em>ApplicationRunner</em> então delega para essa interface.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token number\">1</span>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApplicationRunner</span>\n<span class=\"token number\">2</span>  <span class=\"token punctuation\">{</span>\n<span class=\"token number\">3</span>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Application</span> itsApplication <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">4</span>   \n<span class=\"token number\">5</span>    <span class=\"token keyword\">public</span> <span class=\"token function\">ApplicationRunner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Application</span> app<span class=\"token punctuation\">)</span>\n<span class=\"token number\">6</span>    <span class=\"token punctuation\">{</span>\n<span class=\"token number\">7</span>      itsApplication <span class=\"token operator\">=</span> app<span class=\"token punctuation\">;</span>\n<span class=\"token number\">8</span>    <span class=\"token punctuation\">}</span>\n<span class=\"token number\">9</span>  \n<span class=\"token number\">10</span>   <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">11</span>   <span class=\"token punctuation\">{</span>\n<span class=\"token number\">12</span>     itsApplication<span class=\"token punctuation\">.</span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">13</span>     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>itsApplication<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">14</span>       itsApplication<span class=\"token punctuation\">.</span><span class=\"token function\">Idle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">15</span>     itsApplication<span class=\"token punctuation\">.</span><span class=\"token function\">Cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">16</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">17</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token number\">1</span>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Application</span>\n<span class=\"token number\">2</span>  <span class=\"token punctuation\">{</span>\n<span class=\"token number\">3</span>    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">4</span>    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Idle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">5</span>    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">6</span>    <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">7</span>  <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token number\">1</span>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FtoCStrategy</span> <span class=\"token punctuation\">:</span> Application\n<span class=\"token number\">2</span>  <span class=\"token punctuation\">{</span>\n<span class=\"token number\">3</span>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TextReader</span> input<span class=\"token punctuation\">;</span>\n<span class=\"token number\">4</span>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TextWriter</span> output<span class=\"token punctuation\">;</span>\n<span class=\"token number\">5</span>    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isDone <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">6</span>    \n<span class=\"token number\">7</span>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n<span class=\"token number\">8</span>    <span class=\"token punctuation\">{</span>\n<span class=\"token number\">9</span>      <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ApplicationRunner</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FtoCStrategy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">10</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">11</span>  \n<span class=\"token number\">12</span>   <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">13</span>   <span class=\"token punctuation\">{</span>\n<span class=\"token number\">14</span>     input <span class=\"token operator\">=</span> Console<span class=\"token punctuation\">.</span>In<span class=\"token punctuation\">;</span>\n<span class=\"token number\">15</span>     output <span class=\"token operator\">=</span> Console<span class=\"token punctuation\">.</span>Out<span class=\"token punctuation\">;</span>\n<span class=\"token number\">16</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">17</span>  \n<span class=\"token number\">18</span>   <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Idle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">19</span>   <span class=\"token punctuation\">{</span>\n<span class=\"token number\">20</span>     <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> fahrString <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">21</span>     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fahrString <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> fahrString<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">22</span>       isDone <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">23</span>     <span class=\"token keyword\">else</span>\n<span class=\"token number\">24</span>     <span class=\"token punctuation\">{</span>\n<span class=\"token number\">25</span>       <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> fahr <span class=\"token operator\">=</span> Double<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>fahrString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">26</span>       <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> celcius <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span><span class=\"token operator\">/</span><span class=\"token number\">9.0</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>fahr <span class=\"token operator\">-</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">27</span>       output<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F={0}, C={1}\"</span><span class=\"token punctuation\">,</span> fahr<span class=\"token punctuation\">,</span> celcius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">28</span>     <span class=\"token punctuation\">}</span>\n<span class=\"token number\">29</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">30</span>    \n<span class=\"token number\">31</span>   <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">32</span>   <span class=\"token punctuation\">{</span>\n<span class=\"token number\">33</span>     output<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ftoc exit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">34</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">35</span>    \n<span class=\"token number\">36</span>   <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">37</span>   <span class=\"token punctuation\">{</span>\n<span class=\"token number\">38</span>     <span class=\"token keyword\">return</span> isDone<span class=\"token punctuation\">;</span>\n<span class=\"token number\">39</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">40</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Deve estar bem claro que essa estrutura tem ambos benefícios e custos sobre a estrutura do <strong>Template Method</strong>. <strong>Strategy</strong>\nenvolve mais classes e mais indirecionamento que o <strong>Template Method</strong>. O ponteiro de delegação dentro de <em>ApplicationRunner</em> fica sujeito a um custo um pouco maior em termos de <em>tempo de execução</em> e <em>espaço</em> do que ficaria a herança. Mas pelo outro lado, se tivermos várias aplicações diferentes a serem executadas, nós podemos reutilizar a instância de <em>ApplicationRunner</em> e a passar para várias implementações de <em>Application</em>, reduzindo o overhead de espaço de código.</p>\n<p>Nenhum desses custos e benefícios estão decidindo a substituição. Na maioria dos casos, nenhum deles importa, na minoria. No caso típico, o que é mais preocupante é a extra classe que é exigida pelo <strong>Strategy</strong>. Embora, há outras coisas a serem consideradas.</p>\n<p>Considere uma implementação do <em>Bubble Sort</em> que utiliza o padrão <strong>Strategy</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token number\">1</span>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BubbleSorter</span>\n<span class=\"token number\">2</span>  <span class=\"token punctuation\">{</span>\n<span class=\"token number\">3</span>    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> operations <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">4</span>    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">5</span>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SortHandler</span> itsSortHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token number\">6</span>    <span class=\"token keyword\">public</span> <span class=\"token function\">BubbleSorter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SortHandler</span> handler<span class=\"token punctuation\">)</span>\n<span class=\"token number\">7</span>    <span class=\"token punctuation\">{</span>\n<span class=\"token number\">8</span>      itsSortHandler <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">;</span>\n<span class=\"token number\">9</span>    <span class=\"token punctuation\">}</span>\n<span class=\"token number\">10</span>   \n<span class=\"token number\">11</span>   <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> array<span class=\"token punctuation\">)</span>\n<span class=\"token number\">12</span>   <span class=\"token punctuation\">{</span>\n<span class=\"token number\">13</span>     itsSortHandler<span class=\"token punctuation\">.</span><span class=\"token function\">SetArray</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">14</span>     length <span class=\"token operator\">=</span> itsSortHandler<span class=\"token punctuation\">.</span><span class=\"token function\">Length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">15</span>     operations <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">16</span>     \n<span class=\"token number\">17</span>     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">18</span>       <span class=\"token keyword\">return</span> operations<span class=\"token punctuation\">;</span>\n<span class=\"token number\">19</span>       \n<span class=\"token number\">20</span>     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> nextToLast <span class=\"token operator\">=</span> length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> nextToLast <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> nextToLast<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">21</span>       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;=</span> nextToLast<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">22</span>       <span class=\"token punctuation\">{</span>\n<span class=\"token number\">23</span>         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>itsSortHandler<span class=\"token punctuation\">.</span><span class=\"token function\">OutOfOrder</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">24</span>           itsSortHandler<span class=\"token punctuation\">.</span><span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">25</span>         operations<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">26</span>       <span class=\"token punctuation\">}</span>\n<span class=\"token number\">27</span>       \n<span class=\"token number\">28</span>     <span class=\"token keyword\">return</span> operations<span class=\"token punctuation\">;</span>\n<span class=\"token number\">29</span>   <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token number\">1</span>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">SortHandler</span>\n<span class=\"token number\">2</span>  <span class=\"token punctuation\">{</span>\n<span class=\"token number\">3</span>    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">4</span>    <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">OutOfOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">5</span>    <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">6</span>    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">7</span>  <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token number\">1</span>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IntSortHandler</span> <span class=\"token punctuation\">:</span> SortHandler\n<span class=\"token number\">2</span>  <span class=\"token punctuation\">{</span>\n<span class=\"token number\">3</span>    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">4</span>    \n<span class=\"token number\">5</span>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">)</span>\n<span class=\"token number\">6</span>    <span class=\"token punctuation\">{</span>\n<span class=\"token number\">7</span>      <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> temp <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">8</span>      array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">9</span>      array<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token number\">10</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">11</span>\n<span class=\"token number\">12</span>   <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> array<span class=\"token punctuation\">)</span>\n<span class=\"token number\">13</span>   <span class=\"token punctuation\">{</span>\n<span class=\"token number\">14</span>     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> array<span class=\"token punctuation\">;</span>\n<span class=\"token number\">15</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">16</span>\n<span class=\"token number\">17</span>   <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">18</span>   <span class=\"token punctuation\">{</span>\n<span class=\"token number\">19</span>     <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n<span class=\"token number\">20</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">21</span>\n<span class=\"token number\">22</span>   <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">OutOfOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">)</span>\n<span class=\"token number\">23</span>   <span class=\"token punctuation\">{</span>\n<span class=\"token number\">24</span>     <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">25</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">26</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note que a classe <em>IntSortHandler</em> não sabe nada sobre o <em>BubbleSorter</em>, sendo assim, não há dependência nenhuma sobre a implementação do algoritmo <em>Bubble Sort</em>. Este não é o caso quando utilizamos o <strong>Template Method</strong>. Olhando para trás, você pode ver que <em>IntBubbleSorter</em> depende diretamente do <em>BubbleSorter</em>, a classe que contém o algoritmo do <em>Bubble Sort</em>.</p>\n<p>A técnica do <strong>Template Method</strong> parcialmente não cumpre um dos princípios <a href=\"https://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29\">SOLID</a> chamado Dependency-Inversion Principle (DIP). A implementação dos métodos <em>Swap</em> e <em>OutOfOrder</em> depende diretamente no <em>Bubble Sort</em>. A técnica do <strong>Strategy</strong> não há essa dependência. Dessa maneira, nós podemos usar <em>IntSortHandler</em> com a implementações <em>Sorter</em>, e outras além de <em>BubbleSorter</em>.</p>\n<p>Por exemplo, nós podemos criar uma variação do <em>Bubble Sort</em> que termina sua execuçã mais cedo se em uma passagem do vetor, o encontra em ordem. Abaixo, o <em>QuickBubbleSorter</em> pode também utilizar <em>IntSortHandler</em> ou qualquer outra classe implementadora da interface <em>SortHandler</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token number\">1</span>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QuickBubbleSorter</span>\n<span class=\"token number\">2</span>  <span class=\"token punctuation\">{</span>\n<span class=\"token number\">3</span>    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> operations <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">4</span>    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">5</span>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SortHandler</span> itsSortHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">6</span>    \n<span class=\"token number\">7</span>    <span class=\"token keyword\">public</span> <span class=\"token function\">QuickBubbleSorter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SortHandler</span> handler<span class=\"token punctuation\">)</span>\n<span class=\"token number\">8</span>    <span class=\"token punctuation\">{</span>\n<span class=\"token number\">9</span>      itsSortHandler <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">;</span>\n<span class=\"token number\">10</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">11</span>   \n<span class=\"token number\">12</span>   <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> array<span class=\"token punctuation\">)</span>\n<span class=\"token number\">13</span>   <span class=\"token punctuation\">{</span>\n<span class=\"token number\">14</span>     itsSortHandler<span class=\"token punctuation\">.</span><span class=\"token function\">SetArray</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">15</span>     length <span class=\"token operator\">=</span> itsSortHandler<span class=\"token punctuation\">.</span><span class=\"token function\">Length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">16</span>     operations <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">17</span>     \n<span class=\"token number\">18</span>     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">19</span>       <span class=\"token keyword\">return</span> operations<span class=\"token punctuation\">;</span>\n<span class=\"token number\">20</span>\n<span class=\"token number\">21</span>     <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> thisPassInOrder <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">22</span>     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> nextToLast <span class=\"token operator\">=</span> length<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> nextToLast <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>thisPassInOrder<span class=\"token punctuation\">;</span>\n<span class=\"token number\">23</span>     nextToLast<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token number\">24</span>       thisPassInOrder <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//potenially.</span>\n<span class=\"token number\">25</span>       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;=</span> nextToLast<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">26</span>       <span class=\"token punctuation\">{</span>\n<span class=\"token number\">27</span>         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>itsSortHandler<span class=\"token punctuation\">.</span><span class=\"token function\">OutOfOrder</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">28</span>         <span class=\"token punctuation\">{</span>\n<span class=\"token number\">29</span>           itsSortHandler<span class=\"token punctuation\">.</span><span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">30</span>           thisPassInOrder <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">31</span>         <span class=\"token punctuation\">}</span>\n<span class=\"token number\">32</span>         operations<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">33</span>       <span class=\"token punctuation\">}</span>\n<span class=\"token number\">34</span>     <span class=\"token punctuation\">}</span>\n<span class=\"token number\">35</span>    \n<span class=\"token number\">36</span>     <span class=\"token keyword\">return</span> operations<span class=\"token punctuation\">;</span>\n<span class=\"token number\">37</span>   <span class=\"token punctuation\">}</span>\n<span class=\"token number\">38</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Assim, o <strong>Strategy</strong> dispõe de um benefício extra sobre o <strong>Template Method</strong>. Enquanto o <strong>Template Method</strong> permite que um algoritmo genérico manipule várias implementações detalhadas possíveis, o <strong>Strategy</strong>, por totalmente se conformar com o (DIP), permite que cada implementação detalhada manipule vários algoritmos genéricos diferentes.</p>\n<h2>Conclusão</h2>\n<p>O padrão <strong>Template Method</strong> é simples de se escrever e simples de usar mas é um tanto inflexível. <strong>Strategy</strong> é flexível mas você tem que criar uma classe a mais, instânciar um objeto a mais e amarrar o objeto extra ao sistema. Então a escolha entre eles depende em quando você precisa da flexibilidade do <strong>Strategy</strong> ou quando pode viver com a simplicidade do <strong>Template</strong>. Várias vezes optei pelo <strong>Template Method</strong> simplesmente porque ele é mais fácil de implementar e usar. Por exemplo, eu iria utilizar a solução pelo <strong>Template Method</strong> para o <em>Bubble Sort</em> a menos que eu realmente precisse de diferentes algoritmos de ordenação para o meu problema.</p>\n<hr>\n<p>Bom, interessante né?</p>\n<p>Este conteúdo foi baseado no livro <a href=\"http://www.barnesandnoble.com/w/agile-principles-patterns-and-practices-in-c-robert-c-martin/1101636951?ean=9780131857254\">Agile Principles, Patterns, and Practices in C#</a> de Robert Martin (conhecido como <strong><a href=\"https://twitter.com/unclebobmartin\">Uncle Bob</a></strong>) e seu filho <strong><a href=\"https://twitter.com/slagyr\">Micah Martin</a></strong>.</p>\n<p><sub>Recomendo a leitura e estudo deste livro.</sub></p>","frontmatter":{"title":"Template Method e Strategy","date":"February 09, 2016","description":"Herança ou delegação: capturando a essência dos algoritmos."}},"previous":{"fields":{"slug":"/delegates-vs-command/"},"frontmatter":{"title":"Delegates vs Command Pattern"}},"next":{"fields":{"slug":"/complexidade-ciclomatica/"},"frontmatter":{"title":"Complexidade Ciclomática"}}},"pageContext":{"id":"46fd3d28-0196-580f-8b8b-83650075328a","previousPostId":"b6a3fc28-0b0d-5a4a-ad07-187809867763","nextPostId":"90ed8263-ab23-525c-9285-e0e16e688e3f"}},"staticQueryHashes":["2841359383","916993862"]}