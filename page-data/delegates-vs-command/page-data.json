{"componentChunkName":"component---src-templates-blog-post-js","path":"/delegates-vs-command/","result":{"data":{"site":{"siteMetadata":{"title":"Blog"}},"markdownRemark":{"id":"37f38ed0-4354-5e47-a4e1-1267b67172a4","excerpt":"Aqui está a declaração de um delegate. Pode levar algum tempo para se acostumar com a sintaxe. Visando usar o delegate Operation, nós vamos precisar de alguns…","html":"<h3>Aqui está a declaração de um delegate. Pode levar algum tempo para se acostumar com a sintaxe.</h3>\n<p>Visando usar o delegate <em>Operation</em>, nós vamos precisar de alguns métodos que correspondem a forma <em>double (double, double)</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">delegate</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> <span class=\"token function\">Operation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">double</span></span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">double</span></span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> <span class=\"token function\">Subtract</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">double</span></span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> <span class=\"token function\">Multiply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">double</span></span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> <span class=\"token function\">Divide</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">double</span></span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Não há nada de especial nisso. Agora para criar uma instância do delegate <em>Operation</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\">Operation</span> math <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Operation</span><span class=\"token punctuation\">(</span>Add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Novamente a sintaxe pode lhe deixar um pouco confuso. A linha representada, inicia uma instância de <em>Operation</em>\ncom o método <em>Add</em> e a armazena em uma variável chamada <em>math</em>. Para usar <em>math</em>, você ira chamar o método <em>math</em> como se estivesse\nchamando um método qualquer.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">double</span></span> result <span class=\"token operator\">=</span> <span class=\"token function\">math</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result: {0}\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">>></span> <span class=\"token number\">3</span></code></pre></div>\n<p>Chamando <em>math</em> com os parâmetros 1 e 2, cuja atualmente atuando como o método <em>Add</em>, com os mesmos parâmetros, produz o resultado 3.\nO comportamento oposto pode ser conquistado utilizando o método <em>Subtract</em> ao invés de usar <em>Add</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\">Operation</span> math <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Operation</span><span class=\"token punctuation\">(</span>Subtract<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">double</span></span> result <span class=\"token operator\">=</span> <span class=\"token function\">math</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result: {0}\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">>></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></code></pre></div>\n<p><em>math</em> apenas delegou a chamada com os parâmetros 1 e 2 ao método <em>Subtract</em> então o resultado foi -1. Até agora isso não é lá muito útil. </p>\n<p>Nós podemos jogar os métodos para o delegate e chama-los por meio dele, mas isso é apenas um monte de trabalho extra.\nA força dos Delegates aparecem na jogada quando você não faz idéia de qual método irá utilizar. <strong>Neste caso\na decisão seria feita em tempo de execução e não em tempo de compilação</strong>.</p>\n<p>Assuma que o código abaixo foi usado em um sistema bancário. A ação mais frequente em um sistema bancário é ajustar\no balanceamento de contas.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> balance <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AdjustBalanceBy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">double</span></span> adjustment<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Operation</span> operation<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> newBalance <span class=\"token operator\">=</span> <span class=\"token function\">operation</span><span class=\"token punctuation\">(</span>balance<span class=\"token punctuation\">,</span> adjustment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token function\">LogAdjustment</span><span class=\"token punctuation\">(</span>balance<span class=\"token punctuation\">,</span> newBalance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     balance <span class=\"token operator\">=</span> newBalance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note que <em>AdjustBalanceBy</em> recebe uma <em>Operation</em>, o que significa que poderia ser <em>Add</em>, <em>Subtract</em>, <em>Multiply</em> ou <em>Divide</em> a ser utilizado para ajustar o balancemento da conta.</p>\n<p>Pode haver operações que nós não temos nem mesmo considerado ainda, operações ainda não requisitadas como <em>ApplyInterest</em>.\n<em>AdjustBalanceBy</em> pode dar conta disso pra nós enquanto nós a dermos um delegate que irá chamar <em>ApplyInterest(double, double)</em>.</p>\n<p>O código em <em>AdjustBalanceBy</em> nunca iria ter necessidade de ser modificado e isso é exatamente\ncomo o princípio Open/Closed diz como deve ser. E como isso pode ser feito sem o uso dos delegates?\nO Command Pattern funcionaria muito bem!</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Operation</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">double</span></span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Add</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Operation</span></span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">double</span></span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> b<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Subtract</span><span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Operation</span></span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">double</span></span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> b<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AdjustBalanceBy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">double</span></span> adjustment<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Operation</span> operation<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> newBalance <span class=\"token operator\">=</span> operation<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>balance<span class=\"token punctuation\">,</span> adjustment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">LogAdjustment</span><span class=\"token punctuation\">(</span>balance<span class=\"token punctuation\">,</span> newBalance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   balance <span class=\"token operator\">=</span> newBalance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tem um pouco mais de código sem o uso dos delegates, mas estamos a salvo daquela sintaxe excêntrica.\nConsiderando a extra complexidade de linguagem dos delegates, sinto que o Command Pattern\ntem mais jeito pra coisa, neste caso. Ponto para o Command Pattern!\nDelegates 0 - Command Pattern 1.</p>\n<h3>Que tal multicasting?</h3>\n<p>Os Delegates possuem essa habilidade chamada multicasting que o permite adicionar multiplas delegações. Por exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\">Operator</span> math <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Operator</span><span class=\"token punctuation\">(</span>Add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmath <span class=\"token operator\">+=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Operator</span><span class=\"token punctuation\">(</span>Subtract<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmath <span class=\"token operator\">+=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Operator</span><span class=\"token punctuation\">(</span>Multiply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmath <span class=\"token operator\">+=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Operator</span><span class=\"token punctuation\">(</span>Divide<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">math</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Quando <em>math</em> é chamado ao final, todas as quatro operações são efetuadas. Neste caso, não é muito útil,\nporém para algo tipo um botão, que quando pressionado, várias ações devem ocorrer, o multicasting é bastante conveniente.\nMas o que acontece com todos os valores retornados?</p>\n<p>Cada um desses métodos combinados no delegate <em>math</em> acima, retorna um valor, porém <em>math</em> só pode retornar\num valor por vez. <strong>As operações não vão transformando os mesmos numeros em uma sequência, simplesmente\nsão usados os mesmos valores colocados inicialmente nos parâmetros, sendo os retornos, individuais</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token class-name\">Operation</span> math <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Operation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">add</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">double</span></span> result <span class=\"token operator\">=</span> <span class=\"token function\">math</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result 1: {0}\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \nmath <span class=\"token operator\">+=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Operation</span><span class=\"token punctuation\">(</span>subtract<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresult <span class=\"token operator\">=</span> <span class=\"token function\">math</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result 2: {0}\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \nmath <span class=\"token operator\">+=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Operation</span><span class=\"token punctuation\">(</span>multiply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresult <span class=\"token operator\">=</span> <span class=\"token function\">math</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result 3: {0}\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \nmath <span class=\"token operator\">+=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Operation</span><span class=\"token punctuation\">(</span>divide<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresult <span class=\"token operator\">=</span> <span class=\"token function\">math</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result 4: {0}\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \nOUTPUT\n<span class=\"token operator\">>></span>result <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n<span class=\"token operator\">>></span>result <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n<span class=\"token operator\">>></span>result <span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n<span class=\"token operator\">>></span>result <span class=\"token number\">4</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span></code></pre></div>\n<p>Interessante. Delegates que utilizam multicasting apenas retornam um valor da execução combinada. Isso sugere que\nmulticasting deve apenas ser utilizada quando você não liga sobre qual o valor retornado.</p>\n<p>O Command Pattern sozinho não compete com multicasting, porém junto com seu companheiro, o Composite Pattern,\na situação fica sob controle.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Composite</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Operation</span></span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token class-name\">IList</span> operations <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n     <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">double</span></span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> b<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Operation</span> o <span class=\"token keyword\">in</span> operations<span class=\"token punctuation\">)</span>\n            result <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n \n     <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddOperation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Operation</span> o<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">{</span>\n        operations<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esta versão do Composite, imita o manuseio do delegate quanto aos valores de retorno, mas ele poderia facilmente média-los,\narmazená-los em uma lista, ou fazer qualquer outra coisa que poderia imaginar.</p>\n<p>O Composite Pattern oferece muito mais controle sobre execuções combinadas, então posso dizer que o Command Pattern merece mais um ponto. Delegates 0 - Command Pattern 2.</p>\n<h3>Events</h3>\n<p>Oh.. Dê uma boa olhada nessa sintaxe.</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\">button<span class=\"token punctuation\">.</span>Click <span class=\"token operator\">+=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">System<span class=\"token punctuation\">.</span>EventHandler</span><span class=\"token punctuation\">(</span>SomeAction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Uma interpretação intuitiva: <em>button.Click</em> - Dizer ao botão que ele foi pressionado <em>button.Click +=</em> - Adicionar alguma coisa\nao clique do botão..Heh? <em>new System.EventHandler(SomeAction)</em> - <em>SomeAction</em> deve ser algum método que se encaixa na forma do <em>EventHandler</em>.</p>\n<p>Uma instância do <em>EventHandler</em> é criada juntamente com <em>SomeAction</em>. Logo após esses passos lógicos, um desenvolvedor chega\na conclusão que <em>Click</em> deve ser uma propriedade pública do Botão do <em>EventHandler</em>, cuja é um delegate.</p>\n<p>E o desenvolvedor estaria errado! <em>Click</em> é atualmente um <em>Event</em>. A declaração parece algo do tipo:</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre class=\"language-cs\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>EventHandler</span> Click<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Toda a construção do <em>Event</em> é um pouco boba, porque, tanto quanto posso dizer, poderia ser facilmente substituida\ncom um campo (ou propriedade) pública. 1 ponto a menos aos delegates por flagrante mal uso de sintaxe.</p>\n<p>Pontuação final? delegates: -1; Command Pattern: 2</p>\n<hr>\n<p>Esse post é de autoria de <strong><a href=\"https://twitter.com/slagyr\">Micah Martin</a></strong> que é o cofundador da <a href=\"https://8thlight.com/\">8th Light</a> e é conhecido pelo seu trabalho na área de open source como <a href=\"https://github.com/unclebob/fitnesse\">FitNesse</a>, <a href=\"https://blog.8thlight.com/micah-martin/2013/07/19/limelight-lives-clojure-tool-chain.html\">Limelight</a>, <a href=\"https://github.com/slagyr/joodo\">Joodo</a> e <a href=\"https://github.com/slagyr/speclj\">Speclj</a>. E de curiosidade, Micah é filho do Robert Martin (conhecido como <strong><a href=\"https://twitter.com/unclebobmartin\">Uncle Bob</a></strong>), autor de vários livros conhecidos aos desenvolvedores (comece procurando por Clean Code), altamente recomendo a todos que não deixem de dar uma boa olhada nesses livros! Para mais informações, acesse <a href=\"https://sites.google.com/site/unclebobconsultingllc/books\">aqui</a>.</p>\n<p>Você também pode acessar a publicação original feita por Micah no blog do 8th Light por <a href=\"https://blog.8thlight.com/micah-martin/2006/09/07/delegates-vs-command-pattern.html\">aqui</a>.</p>","frontmatter":{"title":"Delegates vs Command Pattern","date":"February 01, 2016","description":"Os delegates: um dos poucos aspectos exclusivos do .NET. Como eles são úteis?"}},"previous":{"fields":{"slug":"/dom/"},"frontmatter":{"title":"O que é a DOM?"}},"next":{"fields":{"slug":"/dicas-e-armadilhas-em-csharp/"},"frontmatter":{"title":"Dicas e Armadilhas em C#"}}},"pageContext":{"id":"37f38ed0-4354-5e47-a4e1-1267b67172a4","previousPostId":"b6937a90-a77c-5b97-a1a0-796b9e379b2d","nextPostId":"52663fb6-a6bc-5f2d-9e3e-ec018375869e"}},"staticQueryHashes":["2841359383","916993862"]}