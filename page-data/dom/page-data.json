{"componentChunkName":"component---src-templates-blog-post-js","path":"/dom/","result":{"data":{"site":{"siteMetadata":{"title":"Blog"}},"markdownRemark":{"id":"b6937a90-a77c-5b97-a1a0-796b9e379b2d","excerpt":"Recentemente eu li um post no blog CSS-TRICKS sobre a DOM (pra quem ainda não conhece, o blog CSS-Tricks começou com o Chris Coyier sendo o maior foco CSS e…","html":"<p>Recentemente eu li um post no blog <a href=\"https://css-tricks.com/dom\">CSS-TRICKS</a> sobre a DOM (pra quem ainda não conhece, o blog CSS-Tricks começou com o <a href=\"https://twitter.com/chriscoyier\">Chris Coyier</a> sendo o maior foco CSS e hoje é alimentado por uma galera e cobre assuntos gerais de web e design), é meio que uma introdução no assunto de forma bem básica, achei legal e decidi traduzir pra galera :D</p>\n<h3>O HTML que você escreve é a DOM? na verdade, não.</h3>\n<p>Mas o HTML que você escreve é analisado pelo seu browser e é transformado na DOM.</p>\n<h3>Então talvez o código fonte da página é a DOM? não, não…</h3>\n<p>O código fonte da página apenas lhe mostra as estruturas da página, o que a constrói. Provavelmente é o mesmo HTML que você escreveu.</p>\n<p>Talvez possa aparecer um código um pouco diferente, por exemplo, você trabalha com templates em uma linguagem de backend e não\nobserva a saída do HTML compilado frequentemente. Ou há um processo de construção (build) que acontece logo depois que você escreve\nseu HTML e o código é colocado no seu website. Talvez.. esse HTML é comprimido ou alterado.</p>\n<p>O código fonte da página é um pouco estranho na verdade. As únicas pessoas que ligariam em olhar para esse código são desenvolvedores\ne a maioria dos navegadores possuem ferramentas para desenvolvedores já construidas de forma integradas no próprio navegador atualmente.</p>\n<h3>Então, o código no DevTools (ferramentas do desenvolvedor) do meu navegador é a DOM? sim!, mas.. pera aí, quase isso.</h3>\n<p>Quando você está olhando no painel em qualquer ferramenta que esteja utilizando que lhe mostra algo parecido com HTML, isso é\numa representação visual da DOM! Há!</p>\n<p>Sim… mas isso parece exatamente com meu HTML…e ai??!?!?\nSim.. parece mesmo. Isso foi criado diretamente apartir do seu HTML se lembra? na maioria dos casos (os mais simples),\na representação visual da DOM será igual seu simples HTML.</p>\n<p>Mas não é sempre o mesmo…</p>\n<h2>Quando a DOM é diferente do HTML?</h2>\n<p>Aqui esta uma possibilidade: existem falhas no seu HTML e o navegador as concertou para você. Vamos dizer que você tem\num elemento de <em><table></em> em seu HTML e deixou de fora o elemento necessário <em><tbody></em>. O navegador vai inserir para você aquele\nelemento <em><tbody></em> para você. Isso vai estar na DOM, então você será capaz de o encontrar com JavaScript e estilizar com CSS, mesmo\nsão existindo em seu HTML.</p>\n<p>O caso mais provável, é…</p>\n<h2>JavaScript pode manipular a DOM</h2>\n<p>Imagine que você tem um elemento vazio em seu HTML:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Então depois em seu HTML, tem um pouco de JavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n  <span class=\"token keyword\">var</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"container\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  container<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"Novo conteúdo!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p>Mesmo se você não sabe JavaScript, você pode resoavelmente entender esse pedaço de código. Na tela você vai ver <em>Novo conteúdo!</em>\nao invés de nada, porque aquele elemento <em>div</em> foi preenchido com algum conteúdo.</p>\n<p>Se você usar as ferramentas de desenvolvedor de seu navegador para verificar a representação visual da DOM, você vai ver:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Novo conteúdo!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Que é diferente do seu HTML original ou o que você observaria no código fonte.</p>\n<h2>Ajax e Templating</h2>\n<p>Você pode imaginar se você estivesse para utilizar Ajax para pegar conteúdo de algum lugar e colocar na página, a DOM vai ser\nbem diferente do que seu HTML original. O mesmo acontece quando você carrega dados de algum tipo utilizando modelagem (templating)\ndo lado do cliente (client-side).</p>\n<p>Tente ir para o GMail e ver o código fonte. É um amontoado de scripts e dados do carregamento da página original. Quase irreconhecível\ncomparado com o que você vê na tela.</p>\n<h2>JavaScript vs DOM</h2>\n<p>JavaScript é a linguagem que o browser lê e faz coisas. Mas a DOM é onde essas coisas acontecem. De fato, muita coisa do que você\npode pensar como “alguma coisa de JavaScript” é na verdade, exatamente a “DOM API”.</p>\n<p>Como exemplo, podemos escrever JavaScript que observe por um evento to tipo <em>mouseenter</em> (evento que é executado com o mouse\nentra em algum elemento). Mas esse “elemento” é na verdade um nó da DOM. Nós amarramos aquele observador via uma propriedade da DOM\nem naquele nó da DOM. Quando aquele evento acontece, é o nó da DOM que vai emitir esse evento.</p>\n<p>A DOM é o sangue da coisa aqui. é onde tudo vai parar, no seu navegador. JavaScript é apenas a sintaxe, a linguagem. Ela pode ser\nutilizada totalmente fora do navegador sem nenhuma DOM API (da uma sacada em Node.js).</p>\n<h2>Isso foi só a ponta do iceberg, saiba muuuuito mais aqui:</h2>\n<p><a href=\"http://www.w3.org/TR/DOM-Level-2-Core/introduction.html\">W3C:</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/DOM/DOM_Reference/Introduction\">MDN:</a>\n<a href=\"http://en.wikipedia.org/wiki/Document_Object_Model\">Wikipedia:</a></p>","frontmatter":{"title":"O que é a DOM?","date":"February 01, 2016","description":"..."}},"previous":{"fields":{"slug":"/um-exemplo-sobre-mvc/"},"frontmatter":{"title":"Um exemplo sobre MVC"}},"next":{"fields":{"slug":"/delegates-vs-command/"},"frontmatter":{"title":"Delegates vs Command Pattern"}}},"pageContext":{"id":"b6937a90-a77c-5b97-a1a0-796b9e379b2d","previousPostId":"581ec664-1d81-5ff9-85ab-52527a9e191a","nextPostId":"37f38ed0-4354-5e47-a4e1-1267b67172a4"}},"staticQueryHashes":["2841359383","916993862"]}